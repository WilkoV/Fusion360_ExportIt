# This file is automatically generated for code intellisense only.
# It does not reflect the actual implementation.

from . import core

class CAM(core.Product):
    """
    Object that represents the CAM environment of a Fusion document.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return CAM()
    def export3MFForDefaultAdditiveSetup(self, filepath, addSimulationInfo, simPostProcess, simSplitSurrogates, simKeepThickeningStructure):
        """
        Exports the default additive setup's models into a 3mf file. The 3mf also contains machine and support information.

        True on success, false on errors or wrong setup type
        """
        return bool()
    def generateToolpath(self, operations):
        """
        Generates/Regenerates all of the toolpaths (including those nested in sub-folders or patterns) for the specified objects.

        operations : An Operation, Setup, Folder or Pattern object for which to generate the toolpath/s for. You can also specify a collection of any combination of these object types.

        Return GenerateToolpathFuture that includes the status of toolpath generation.
        """
        return GenerateToolpathFuture()
    def generateAllToolpaths(self, skipValid):
        """
        Generates/Regenerates all toolpaths (includes those nested in sub-folders or patterns) in the document.

        skipValid : Option to skip valid toolpaths and only regenerate invalid toolpaths.

        Return GenerateToolpathFuture that includes the status of toolpath generation.
        """
        return GenerateToolpathFuture()
    def clearToolpath(self, operations):
        """
        Clears all of the toolpaths (including those nested in sub-folders or patterns) for the specified objects.

        operations : An Operation, Setup, Folder or Pattern object for which to clear the toolpath/s for. You can also specify a collection of any combination of these object types.

        Return true if successful.
        """
        return bool()
    def clearAllToolpaths(self):
        """
        Clears all the toolpaths (includes those nested in sub-folders or patterns) in the document

        Return true if successful.
        """
        return bool()
    def checkToolpath(self, operations):
        """
        Checks if toolpath operations (including those nested in sub-folders or patterns) are valid for the specified objects.

        operations : An Operation, Setup, Folder or Pattern object for which to check the toolpath/s of. You can also specify a collection of any combination of these object types.

        Returns true if the toolpath operations are valid
        """
        return bool()
    def checkAllToolpaths(self):
        """
        Checks if all the toolpath operations (includes those nested in sub-folders or patterns) in the document are valid

        Returns true if the all toolpath operations are valid
        """
        return bool()
    def postProcess(self, operations, input):
        """
        Post all of the toolpaths (including those nested in sub-folders or patterns) for the specified objects

        operations : An Operation, Setup, Folder or Pattern object for which to post the toolpath/s of. You can also specify a collection of any combination of these object types.
        input : The PostProcessInput object that defines the post options and parameters.

        Returns true if successful
        """
        return bool()
    def postProcessAll(self, input):
        """
        Post all of the toolpaths (includes those nested in sub-folders or patterns)in the document

        input : The PostProcessInput object that defines the post options and parameters.

        Returns true if successful
        """
        return bool()
    def generateSetupSheet(self, operations, format, folder, openDocument):
        """
        Generate the setup sheets for the specified objects

        operations : An Operation, Setup, Folder or Pattern object for which to generate the setup sheet/s for. You can also specify a collection of any combination of these object types.
        format : The document format for the setup sheet. Valid options are HTMLFormat and ExcelFormat. Limitation: 'ExcelFormat' can be used in windows OS only.
        folder : The destination folder to locate the setup sheet documents in.
        openDocument : An option to allow to open the document instantly after the generation. By default, the document is opened.

        Returns true if successful
        """
        return bool()
    def generateAllSetupSheets(self, format, folder, openDocument):
        """
        Generates all of the setup sheets for all of the operations in the document

        format : The document format for the setup sheet. Valid options are HTMLFormat and ExcelFormat. Limitation: 'ExcelFormat' can be used in windows OS only.
        folder : The destination folder to locate the setup sheet documents in.
        openDocument : An option to allow to open the document instantly after the generation. By default, the document is opened.

        Returns true if successful
        """
        return bool()
    def getMachiningTime(self, operations, feedScale, rapidFeed, toolChangeTime):
        """
        Get the machining time for the specified objects.

        operations : An Operation, Setup, Folder or Pattern object for which to get the machining time for. You can also specify a collection of any combination of these object types.
        feedScale : The feed scale value (%) to use.
        rapidFeed : The rapid feed rate in centimeters per second.
        toolChangeTime : The tool change time in seconds.

        Returns a MachiningTime object that has properties holding the calculation results.
        """
        return MachiningTime()
    @property
    def setups(self):
        """
        Returns the Setups collection that provides access to existing setups
        """
        return Setups()
    @property
    def allOperations(self):
        """
        Gets a collection containing all of the operations in the document. This includes all operations nested in folders and patterns.
        """
        return core.ObjectCollection()
    @property
    def genericPostFolder(self):
        """
        Gets the installed post folder.
        """
        return str()
    @property
    def personalPostFolder(self):
        """
        Gets the personal post folder.
        """
        return str()
    @property
    def temporaryFolder(self):
        """
        Gets the folder for temporary files.
        """
        return str()
    @property
    def customGraphicsGroups(self):
        """
        Returns the customGraphicsGroups object associated with the CAM product.
        """
        return fusion.CustomGraphicsGroups()
    @property
    def designRootOccurrence(self):
        """
        Returns the occurrence that references the design root component in CAM product.
        """
        return fusion.Occurrence()
    @property
    def flatPatternOccurrences(self):
        """
        Returns a read only list of flat pattern occurrences in CAM product.
        """
        return fusion.OccurrenceList()
    @property
    def allMachines(self):
        """
        Gets a collection containing all of the machines in the document.
        """
        return core.ObjectCollection()
    @property
    def setupCreated(self):
        """
        The SetupCreated event fires when a new setup was created.
        """
        return SetupEvent()
    @property
    def setupDestroying(self):
        """
        The setupDestroying event fires before a setup will be destroyed.
        """
        return SetupEvent()
    @property
    def setupChanged(self):
        """
        The SetupChanged event fires when a setup was modified.
        """
        return SetupChangeEvent()
    @property
    def setupActivating(self):
        """
        The SetupActivating event fires before a setup will be activated.
        """
        return SetupEvent()
    @property
    def setupActivated(self):
        """
        The SetupActivated event fires when a setup was activated.
        """
        return SetupEvent()
    @property
    def setupDeactivating(self):
        """
        The SetupDeactivating event fires before a setup will be deactivated.
        """
        return SetupEvent()
    @property
    def setupDeactivated(self):
        """
        The SetupDeactivated event fires when a setup was deactivated.
        """
        return SetupEvent()

class CAMFolders(core.Base):
    """
    Collection that provides access to the folders within an existing setup, folder or pattern.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return CAMFolders()
    def item(self, index):
        """
        Function that returns the specified folder using an index into the collection.

        index : The index of the item within the collection to return. The first item in the collection has an index of 0.

        Returns the specified item or null if an invalid index was specified.
        """
        return CAMFolder()
    def itemByName(self, name):
        """
        Returns the folder with the specified name (as appears in the browser).

        name : The name (as it appears in the browser) of the folder.

        Returns the specified folder or null in the case where there is no folder with the specified name.
        """
        return CAMFolder()
    def itemByOperationId(self, id):
        """
        Returns the folder with the specified operation id.

        id : The id of the folder.

        Returns the specified folder or null in the case where there is no folder with the specified operation id.
        """
        return CAMFolder()
    @property
    def count(self):
        """
        The number of items in the collection.
        """
        return int()

class CAMParameter(core.Base):
    """
    Base class for representing parameter of an operation.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return CAMParameter()
    @property
    def name(self):
        """
        Gets the name (internal name) of the parameter.
        """
        return str()
    @property
    def title(self):
        """
        Returns the title of this parameter as seen in the user interface. This title is localized and can change based on the current language
        """
        return str()
    @property
    def expression(self):
        """
        Gets and sets the value expression of the parameter.
        """
        return str()
    @expression.setter
    def expression(self, expression):
        """
        Gets and sets the value expression of the parameter.
        """
        pass
    @property
    def isEnabled(self):
        """
        Gets if this parameter is enabled. Some parameters are enabled/disabled depending on the values set for other parameters.
        """
        return bool()
    @property
    def error(self):
        """
        Returns a message corresponding to any active error associated with the value of this parameter.
        """
        return str()
    @property
    def warning(self):
        """
        Returns a message corresponding to any active warning associated with the value of this parameter.
        """
        return str()

class CAMParameters(core.Base):
    """
    Collection that provides access to the parameters of an existing operation.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return CAMParameters()
    def item(self, index):
        """
        Function that returns the specified parameter using an index into the collection.

        index : The index of the item within the collection to return. The first item in the collection has an index of 0.

        Returns the specified item or null if an invalid index was specified.
        """
        return CAMParameter()
    def itemByName(self, internalName):
        """
        Returns the parameter of the specified id (internal name).

        internalName : The id (internal name) of the parameter.

        Returns the specified parameter or null in the case where there is no parameter with the specified id.
        """
        return CAMParameter()
    @property
    def count(self):
        """
        The number of items in the collection.
        """
        return int()

class CAMPatterns(core.Base):
    """
    Collection that provides access to the patterns within an existing setup, folder or pattern.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return CAMPatterns()
    def item(self, index):
        """
        Function that returns the specified pattern using an index into the collection.

        index : The index of the item within the collection to return. The first item in the collection has an index of 0.

        Returns the specified item or null if an invalid index was specified.
        """
        return CAMPattern()
    def itemByName(self, name):
        """
        Returns the pattern with the specified name (as appears in the browser).

        name : The name (as it appears in the browser) of the pattern.

        Returns the specified pattern or null in the case where there is no pattern with the specified name.
        """
        return CAMPattern()
    def itemByOperationId(self, id):
        """
        Returns the pattern with the specified operation id.

        id : The id of the pattern.

        Returns the specified pattern or null in the case where there is no pattern with the specified operation id.
        """
        return CAMPattern()
    @property
    def count(self):
        """
        The number of items in the collection.
        """
        return int()

class ChildOperationList(core.Base):
    """
    Provides access to the collection of child operations, folders and patterns of an existing setup.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return ChildOperationList()
    def item(self, index):
        """
        Returns the specified item using an index into the collection.

        index : The index of the item within the collection to return. The first item in the collection has an index of 0.

        Returns the specified item or null if an invalid index was specified.
        """
        return core.Base()
    def itemByName(self, name):
        """
        Returns the operation, folder or pattern with the specified name (the name seen in the browser).

        name : The name of the operation, folder or pattern as seen in the browser.

        Returns the specified item or null in the case where there is no item with the specified name.
        """
        return core.Base()
    def itemByOperationId(self, id):
        """
        Returns the operation, folder or pattern with the specified operation id.

        id : The id of the operation, folder or pattern.

        Returns the specified item or null in the case where there is no item with the specified operation id.
        """
        return core.Base()
    @property
    def count(self):
        """
        Gets the number of objects in the collection.
        """
        return int()

class GenerateToolpathFuture(core.Base):
    """
    Used to check the state and get back the results of toolpath generation.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return GenerateToolpathFuture()
    @property
    def numberOfOperations(self):
        """
        Returns a number of operations need to be generated.
        """
        return int()
    @property
    def numberOfCompleted(self):
        """
        Returns a number of operations whose toolpath generation are completed.
        """
        return int()
    @property
    def operations(self):
        """
        Returns all operations that need to be generated.
        """
        return Operations()
    @property
    def isGenerationCompleted(self):
        """
        Returns true if all operations are generated.
        """
        return bool()

class LibraryLocation():
    """
    List of locations representing folders in the library dialogs.
    """
    def __init__(self):
        pass
    Local = 0
    Cloud = 1
    Network = 2
    OnlineSamples = 3
    External = 4

class Machine(core.Base):
    """
    Object that represents a machine.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return Machine()
    @staticmethod
    def createFromTemplate(self, machineTemplate):
        """
        Creates a Machine from a template.

        machineTemplate : The template to act as a base for creating a machine from.

        Returns the newly created machine with a valid kinematics tree.
        """
        return Machine()
    @staticmethod
    def createFromFile(self, location, filePath):
        """
        Creates a Machine from a file.

        location : The location in the machine library.
        filePath : The path to a file to act as a base for creating a machine from. The path is relative to the library location given, unless library location is External, then the filePath is expected to be an absolute path.

        Returns the newly created machine with a valid kinematics tree.
        """
        return Machine()
    def save(self, location, filePath):
        """
        Save the Machine to a file. Any subsequent edits will need to be saved again.

        location : The location in the machine library to save the machine to.
        filePath : The path of the file to save the machine as. The path is relative to the library location given, unless library location is External, then the filePath is expected to be an absolute path. .machine will be appended if no extension is given.

        Returns true if the machine was saved successfully, false otherwise.
        """
        return bool()
    @property
    def vendor(self):
        """
        Gets and sets the vendor name of the machine.
        """
        return str()
    @vendor.setter
    def vendor(self, vendor):
        """
        Gets and sets the vendor name of the machine.
        """
        pass
    @property
    def model(self):
        """
        Gets and sets the model name of the machine.
        """
        return str()
    @model.setter
    def model(self, model):
        """
        Gets and sets the model name of the machine.
        """
        pass
    @property
    def description(self):
        """
        Gets and sets the description of the machine.
        """
        return str()
    @description.setter
    def description(self, description):
        """
        Gets and sets the description of the machine.
        """
        pass
    @property
    def id(self):
        """
        Gets the unique identifier of the machine. Can be used for comparing machines within the document.
        """
        return str()
    @property
    def capabilities(self):
        """
        Gets the capabilities of the machine.
        """
        return MachineCapabilities()
    @property
    def kinematics(self):
        """
        Gets the kinematics tree of the machine.
        """
        return MachineKinematics()

class MachineAxis(core.Base):
    """
    Abstract base class representing a single machine axis.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return MachineAxis()
    @property
    def name(self):
        """
        The name of this axis.
        """
        return str()
    @name.setter
    def name(self, name):
        """
        The name of this axis.
        """
        pass
    @property
    def axisType(self):
        """
        The type of axis.
        """
        return MachineAxisTypes()
    @property
    def hasLimits(self):
        """
        Does this axis have a limited range of motion.
        """
        return bool()
    @property
    def physicalMin(self):
        """
        The minimum possible value for this axis (in mm/deg). Must be less than physicalMax. Set the value of this and physicalMax to 0 to remove axis limits.
        """
        return float()
    @physicalMin.setter
    def physicalMin(self, physicalMin):
        """
        The minimum possible value for this axis (in mm/deg). Must be less than physicalMax. Set the value of this and physicalMax to 0 to remove axis limits.
        """
        pass
    @property
    def physicalMax(self):
        """
        The maximum possible value for this axis (in mm/deg). Must be less than physicalMin. Set the value of this and physicalMin to 0 to remove axis limits.
        """
        return float()
    @physicalMax.setter
    def physicalMax(self, physicalMax):
        """
        The maximum possible value for this axis (in mm/deg). Must be less than physicalMin. Set the value of this and physicalMin to 0 to remove axis limits.
        """
        pass
    @property
    def homePosition(self):
        """
        Specifies the value (in mm/deg) that this axis returns to when the machine is homed.
        """
        return float()
    @homePosition.setter
    def homePosition(self, homePosition):
        """
        Specifies the value (in mm/deg) that this axis returns to when the machine is homed.
        """
        pass

class MachineAxisInput(core.Base):
    """
    Object that defines the properties required to create a machine axis object.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return MachineAxisInput()
    @property
    def axisType(self):
        """
        The type of axis. This axis type determines which parameters of this object are valid to be accessed or modified.
        """
        return MachineAxisTypes()
    @property
    def name(self):
        """
        The user facing name of this axis.
        """
        return str()
    @name.setter
    def name(self, name):
        """
        The user facing name of this axis.
        """
        pass
    @property
    def homePosition(self):
        """
        Specifies the value (in mm/deg) that this axis returns to when the machine is homed.
        """
        return float()
    @homePosition.setter
    def homePosition(self, homePosition):
        """
        Specifies the value (in mm/deg) that this axis returns to when the machine is homed.
        """
        pass
    @property
    def physicalMin(self):
        """
        The minimum possible value for this axis (in mm/deg). Set the value of this and physicalMax to 0 to create an unlimited axis.
        """
        return float()
    @physicalMin.setter
    def physicalMin(self, physicalMin):
        """
        The minimum possible value for this axis (in mm/deg). Set the value of this and physicalMax to 0 to create an unlimited axis.
        """
        pass
    @property
    def physicalMax(self):
        """
        The maximum possible value for this axis (in mm/deg). Set the value of this and physicalMin to 0 to create an unlimited axis.
        """
        return float()
    @physicalMax.setter
    def physicalMax(self, physicalMax):
        """
        The maximum possible value for this axis (in mm/deg). Set the value of this and physicalMin to 0 to create an unlimited axis.
        """
        pass

class MachineAxisTypes():
    """
    List of machine axis types for MachineAxis
    """
    def __init__(self):
        pass
    LinearMachineAxisType = 0
    RotaryMachineAxisType = 1

class MachineCapabilities(core.Base):
    """
    Object that represents the capabilities of the machine.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return MachineCapabilities()
    @property
    def isMillingSupported(self):
        """
        Gets and sets if the machine is capable of subtractive milling.
        """
        return bool()
    @isMillingSupported.setter
    def isMillingSupported(self, isMillingSupported):
        """
        Gets and sets if the machine is capable of subtractive milling.
        """
        pass
    @property
    def isTurningSupported(self):
        """
        Gets and sets if the machine is capable of subtractive turning.
        """
        return bool()
    @isTurningSupported.setter
    def isTurningSupported(self, isTurningSupported):
        """
        Gets and sets if the machine is capable of subtractive turning.
        """
        pass
    @property
    def isCuttingSupported(self):
        """
        Gets and sets if the machine is capable of subtractive cutting.
        """
        return bool()
    @isCuttingSupported.setter
    def isCuttingSupported(self, isCuttingSupported):
        """
        Gets and sets if the machine is capable of subtractive cutting.
        """
        pass

class MachineKinematics(core.Base):
    """
    Object that represents the kinematics tree in the machine.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return MachineKinematics()
    @property
    def parts(self):
        """
        Get the root parts collection.
        """
        return MachineParts()

class MachinePart(core.Base):
    """
    Object representing some part of a machine, such as the static base of the machine, an axis, or the attachment points for tools and fixtures.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return MachinePart()
    def deleteMe(self):
        """
        Delete this part and its children from the kinematics tree.
        """
        return Void()
    @property
    def children(self):
        """
        Get the collection of child parts.
        """
        return MachineParts()
    @property
    def parent(self):
        """
        Get or set the parent of this part. Setting the parent will add this part to the end of the parent's children collection. Setting the parent will throw an error if the new parent is this part or a child this part.
        """
        return MachinePart()
    @parent.setter
    def parent(self, parent):
        """
        Get or set the parent of this part. Setting the parent will add this part to the end of the parent's children collection. Setting the parent will throw an error if the new parent is this part or a child this part.
        """
        pass
    @property
    def partType(self):
        """
        Get the type of this part.
        """
        return MachinePartTypes()
    @property
    def id(self):
        """
        Get the internal ID of the part. This is unique with respect to other MachineParts in the Machine.
        """
        return str()
    @property
    def axis(self):
        """
        Get the axis object for this part used to reference this part for other operations. Only valid when partType is Axis, otherwise returns null
        """
        return MachineAxis()

class MachinePartInput(core.Base):
    """
    Object representing the set of inputs required to create a new MachinePart. Set an MachineAxisInput object on this object's axisInput parameter to create a new MachineAxis with this part.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return MachinePartInput()
    def createAxisInput(self, axisType):
        """
        Create a new MachineAxisInput object to be used to create a new MachineAxis. Set this object on to an axis type MachinePartInput to create a new MachineAxis with that part.

        axisType : The type of MachineAxisInput to create.

        Returns a LinearMachineAxisInput or RotaryMachineAxisInput, or null if the creation failed.
        """
        return MachineAxisInput()
    @property
    def id(self):
        """
        Get or set the internal ID of the part, used to reference this part for other operations. This ID can be any string. This must be unique with respect to other MachineParts in the Machine.
        """
        return str()
    @id.setter
    def id(self, id):
        """
        Get or set the internal ID of the part, used to reference this part for other operations. This ID can be any string. This must be unique with respect to other MachineParts in the Machine.
        """
        pass
    @property
    def partType(self):
        """
        Get the type of part this input will create.
        """
        return MachinePartTypes()
    @property
    def axisInput(self):
        """
        Get or Set an axis input object to create a new MachineAxis with this part. Only valid when partType is Axis.
        """
        return MachineAxisInput()
    @axisInput.setter
    def axisInput(self, axisInput):
        """
        Get or Set an axis input object to create a new MachineAxis with this part. Only valid when partType is Axis.
        """
        pass

class MachineParts(core.Base):
    """
    Object that represents a collection of machine parts. These parts are the children of another part or the collection of base parts from MachineKinematics
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return MachineParts()
    def add(self, partInput):
        """
        Add a new part to this collection. The part's parent will be set to the the owner of this collection, or null if this is the root parts collection. If the passed MachinePartInput has a MachineAxisInput a new MachineAxis will be created.

        partInput : Part input object used to create the new MachinePart.

        Returns the newly creted MachinePart or null if creation failed.
        """
        return MachinePart()
    def createPartInput(self, partType):
        """
        Create a new MachinePartInput.

        partType : The type of part to create. When this parameter is Axis, you must set a value for axisInput.

        Returns the new MachinePartInput or null if creation failed.
        """
        return MachinePartInput()
    def item(self, index):
        """
        Get the part at index in this collection.

        index : The index of the part.

        The MachinePart at index.
        """
        return MachinePart()
    def itemById(self, id):
        """
        Get the part with the given ID.

        id : The ID for the part to get.

        Returns the MachinePart with the given ID, or null if the given ID does not match any part in the collection.
        """
        return MachinePart()
    @property
    def count(self):
        """
        Get the number of parts in this collection.
        """
        return int()

class MachinePartTypes():
    """
    List of part types for MachinePart
    """
    def __init__(self):
        pass
    BasicMachinePartType = 0
    AxisMachinePartType = 1
    ToolAttachmentMachinePartType = 2
    FixtureAttachmentMachinePartType = 3

class MachineTemplate():
    """
    List of the machine templates to create a machine from.
    """
    def __init__(self):
        pass
    GenericLathe = 0
    Generic3Axis = 1
    Generic4Axis = 2
    Generic5AxisHeadHead = 3
    Generic5AxisHeadTable = 4
    Generic5AxisTableTable = 5

class MachiningTime(core.Base):
    """
    Object returned when using the getMachiningTime method from the CAM class. Use the properties on this object to get the machining time results.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return MachiningTime()
    @property
    def feedDistance(self):
        """
        Gets the feed distance in centimeters.
        """
        return float()
    @property
    def totalFeedTime(self):
        """
        Get the total feed time in seconds.
        """
        return float()
    @property
    def rapidDistance(self):
        """
        Gets the calculated rapid distance in centimeters.
        """
        return float()
    @property
    def totalRapidTime(self):
        """
        Gets the total rapid feed time in seconds.
        """
        return float()
    @property
    def toolChangeCount(self):
        """
        Gets the number of tool changes.
        """
        return int()
    @property
    def totalToolChangeTime(self):
        """
        Gets the total tool change time in seconds.
        """
        return float()
    @property
    def machiningTime(self):
        """
        Gets the machining time in seconds.
        """
        return float()

class OperationBase(core.Base):
    """
    Base class object representing all operations, folders, patterns and setups.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return OperationBase()
    @property
    def name(self):
        """
        Gets and sets the name of the operation as seen in the browser. This name is unique as compared to the names of all other operations in the document.
        """
        return str()
    @name.setter
    def name(self, name):
        """
        Gets and sets the name of the operation as seen in the browser. This name is unique as compared to the names of all other operations in the document.
        """
        pass
    @property
    def isProtected(self):
        """
        Gets and sets the 'protected' property value of the operation. Gets/sets true if the operation is protected.
        """
        return bool()
    @isProtected.setter
    def isProtected(self, isProtected):
        """
        Gets and sets the 'protected' property value of the operation. Gets/sets true if the operation is protected.
        """
        pass
    @property
    def isOptional(self):
        """
        Gets and sets the 'Optional' property value of the operation. Gets/sets true if the operation is optional.
        """
        return bool()
    @isOptional.setter
    def isOptional(self, isOptional):
        """
        Gets and sets the 'Optional' property value of the operation. Gets/sets true if the operation is optional.
        """
        pass
    @property
    def isSuppressed(self):
        """
        Gets and sets the 'Suppressed' property value of the operation. Gets/sets true if the operation is suppressed.
        """
        return bool()
    @isSuppressed.setter
    def isSuppressed(self, isSuppressed):
        """
        Gets and sets the 'Suppressed' property value of the operation. Gets/sets true if the operation is suppressed.
        """
        pass
    @property
    def parentSetup(self):
        """
        Gets the Setup this operation belongs to.
        """
        return Setup()
    @property
    def isSelected(self):
        """
        Gets if this operation is selected in the 'Setups' browser.
        """
        return bool()
    @property
    def notes(self):
        """
        Gets and sets the notes of the operation.
        """
        return str()
    @notes.setter
    def notes(self, notes):
        """
        Gets and sets the notes of the operation.
        """
        pass
    @property
    def operationId(self):
        """
        Returns the id of the operation. This id is unique as compared to the ids of all other operations in the document. This id will not change when changing the order or parent of the operation. This id will remain valid when the document is saved and reloaded.
        """
        return int()
    @property
    def parameters(self):
        """
        Gets the CAMParameters collection for this operation.
        """
        return CAMParameters()

class Operations(core.Base):
    """
    Collection that provides access to the individual operations within an existing setup, folder or pattern.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return Operations()
    def item(self, index):
        """
        Function that returns the specified operation using an index into the collection.

        index : The index of the item within the collection to return. The first item in the collection has an index of 0.

        Returns the specified item or null if an invalid index was specified.
        """
        return Operation()
    def itemByName(self, name):
        """
        Returns the operation with the specified name (as appears in the browser).

        name : The name (as it appears in the browser) of the operation.

        Returns the specified operation or null in the case where there is no operation with the specified name.
        """
        return Operation()
    def itemByOperationId(self, id):
        """
        Returns the operation with the specified operation id.

        id : The id of the operation.

        Returns the specified operation or null in the case where there is no operation with the specified operation id.
        """
        return Operation()
    @property
    def count(self):
        """
        The number of items in the collection.
        """
        return int()

class OperationStates():
    """
    The possible states of an operation
    """
    def __init__(self):
        pass
    IsValidOperationState = 0
    IsInvalidOperationState = 1
    SuppressedOperationState = 2
    NoToolpathOperationState = 3

class OperationStrategyTypes():
    """
    The valid options for the Strategy Type of an operation.
    """
    def __init__(self):
        pass
    AdaptiveClearing2D = 0
    Pocket2D = 1
    Face = 2
    Contour2D = 3
    Slot = 4
    Trace = 5
    Thread = 6
    Bore = 7
    Circular = 8
    Engrave = 9
    AdaptiveClearing = 10
    PocketClearing = 11
    Parallel = 12
    Contour = 13
    Ramp = 14
    Horizontal = 15
    Pencil = 16
    Scallop = 17
    Spiral = 18
    Radial = 19
    MorphedSpiral = 20
    Projection = 21
    Drilling = 22
    Jet2D = 23
    TurningChamfer = 24
    TurningFace = 25
    TurningGroove = 26
    TurningPart = 27
    TurningProfile = 28
    TurningProfileGroove = 29
    TurningStockTransfer = 30
    TurningThread = 31
    SteepAndShallow = 32
    Flow = 33
    RotaryFinishing = 34
    Chamfer2D = 35
    Morph = 36
    MultiAxisContour = 37
    MultiAxisMorph = 38
    RestFinishing = 39
    Swarf = 40

class OperationTypes():
    """
    The valid options for the Operation Type of a Setup.
    """
    def __init__(self):
        pass
    MillingOperation = 0
    TurningOperation = 1
    JetOperation = 2
    AdditiveOperation = 3

class PostOutputUnitOptions():
    """
    List of the valid options for the outputUnit property on a PostProcessInput object .
    """
    def __init__(self):
        pass
    DocumentUnitsOutput = 0
    InchesOutput = 1
    MillimetersOutput = 2

class PostProcessInput(core.Base):
    """
    This class defines the properties that pertain to the settings and options required for posting a toolpath to generate a CNC file. A PostProcessInput object is a required parameter for the postProcessAll() and postProcess() methods on the CAM class.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return PostProcessInput()
    @staticmethod
    def create(self, programName, postConfiguration, outputFolder, outputUnits):
        """
        Creates a new PostProcessInput object to be used as an input argument by the postProcess() and postProcessAll() methods on the CAM class for posting toolpaths and generating CNC files.

        programName : The program name or number. If the post configuration specifies the parameter programNameIsInteger = true, then the program name must be a number.
        postConfiguration : The full filename (including the path) to the post configuration file (.cps) The post config file can be stored in any path but for convenience you can use the genericPostFolder or the personalPostFolder property on the CAM class to specify the path if your .cps file is stored in either of those locations. You must add a forward slash (this works for Mac or Windows) to the path defined by these folder properties before the filename (e.g. postConfiguration = cam.genericPostFolder + '/' + 'fanuc.cps')
        outputFolder : The path for the existing output folder where the .cnc files will be located. This method will create the specified output folder if it does not already exist. It is not necessary to add a slash to the end of the outputFolder path. You should use forward slashes in your path definition if you want your script to run on both Mac and Windows.
        outputUnits : The units option for the cnc output. Valid options are DocumentUnitsOutput, InchesOutput or MillimetersOutput

        Returns the newly created PostProcessInput object or null if the creation failed.
        """
        return PostProcessInput()
    @property
    def programName(self):
        """
        Gets and sets the program name or number. If the post configuration specifies the parameter programNameIsInteger = true, then the program name must be a number.
        """
        return str()
    @programName.setter
    def programName(self, programName):
        """
        Gets and sets the program name or number. If the post configuration specifies the parameter programNameIsInteger = true, then the program name must be a number.
        """
        pass
    @property
    def programComment(self):
        """
        Gets and sets the program comment. The default value for this property is an empty string ('').
        """
        return str()
    @programComment.setter
    def programComment(self, programComment):
        """
        Gets and sets the program comment. The default value for this property is an empty string ('').
        """
        pass
    @property
    def postConfiguration(self):
        """
        Gets and sets the full filename (including the path) for the post configuration file (.cps)
        """
        return str()
    @postConfiguration.setter
    def postConfiguration(self, postConfiguration):
        """
        Gets and sets the full filename (including the path) for the post configuration file (.cps)
        """
        pass
    @property
    def outputFolder(self):
        """
        Gets and sets the path for the output folder where the .cnc files will be located.
        """
        return str()
    @outputFolder.setter
    def outputFolder(self, outputFolder):
        """
        Gets and sets the path for the output folder where the .cnc files will be located.
        """
        pass
    @property
    def outputUnits(self):
        """
        Gets and sets the units option for the cnc output. Valid options are DocumentUnitsOutput, InchesOutput or MillimetersOutput
        """
        return PostOutputUnitOptions()
    @outputUnits.setter
    def outputUnits(self, outputUnits):
        """
        Gets and sets the units option for the cnc output. Valid options are DocumentUnitsOutput, InchesOutput or MillimetersOutput
        """
        pass
    @property
    def isOpenInEditor(self):
        """
        Gets and sets the option if opening the cnc file with the editor after it is created. The default value for this property is true.
        """
        return bool()
    @isOpenInEditor.setter
    def isOpenInEditor(self, isOpenInEditor):
        """
        Gets and sets the option if opening the cnc file with the editor after it is created. The default value for this property is true.
        """
        pass
    @property
    def areToolChangesMinimized(self):
        """
        Gets and sets that operations may be reordered between setups to minimize the number of tool changes. Operations within each setup will still be executed in the programmed order. This is commonly used for tombstone machining where you have multiple setups. The default value for this property is false.
        """
        return bool()
    @areToolChangesMinimized.setter
    def areToolChangesMinimized(self, areToolChangesMinimized):
        """
        Gets and sets that operations may be reordered between setups to minimize the number of tool changes. Operations within each setup will still be executed in the programmed order. This is commonly used for tombstone machining where you have multiple setups. The default value for this property is false.
        """
        pass
    @property
    def postProperties(self):
        """
        Gets and sets the list of post properties. Each property has a string name and a ValueInput object. The default value for this is an empty NamedValues.
        """
        return core.NamedValues()
    @postProperties.setter
    def postProperties(self, postProperties):
        """
        Gets and sets the list of post properties. Each property has a string name and a ValueInput object. The default value for this is an empty NamedValues.
        """
        pass
    @property
    def machine(self):
        """
        Gets and sets the machine used for post processing. It will override the machines associated with the operations or setup when posting. The default value for this property is null.
        """
        return Machine()
    @machine.setter
    def machine(self, machine):
        """
        Gets and sets the machine used for post processing. It will override the machines associated with the operations or setup when posting. The default value for this property is null.
        """
        pass

class SetupChangeEvent(core.Event):
    """
    A SetupChangeEvent represents a setup related change event. It is used for SetupChanged notifications.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return SetupChangeEvent()
    def add(self, handler):
        """
        Add a handler to be notified when the file event occurs.

        handler : The handler object to be called when this event is fired.

        Returns true if the addition of the handler was successful.
        """
        return bool()
    def remove(self, handler):
        """
        Removes a handler from the event.

        handler : The handler object to be removed from the event.

        Returns true if removal of the handler was successful.
        """
        return bool()

class SetupChangeEventArgs(core.EventArgs):
    """
    The SetupChangeEventArgs provides information associated with a change event of a setup.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return SetupChangeEventArgs()
    @property
    def setup(self):
        """
        Provides access to the setup. Can be null in the case where the event is fired before the setup has been created or after it has been deleted.
        """
        return Setup()
    @property
    def info(self):
        """
        Provides access to an information string. The optional string may contain additional information about the change.
        """
        return str()
    @property
    def type(self):
        """
        The type specifies the actual change.
        """
        return SetupChangeEventType()

class SetupChangeEventType():
    """
    List of setup change event types.
    """
    def __init__(self):
        pass
    Arbitrary = 0
    PrintSettingSelection = 1

class SetupEvent(core.Event):
    """
    A SetupEvent represents a setup related event. For example, SetupCreated or SetupDestroying.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return SetupEvent()
    def add(self, handler):
        """
        Add a handler to be notified when the file event occurs.

        handler : The handler object to be called when this event is fired.

        Returns true if the addition of the handler was successful.
        """
        return bool()
    def remove(self, handler):
        """
        Removes a handler from the event.

        handler : The handler object to be removed from the event.

        Returns true if removal of the handler was successful.
        """
        return bool()

class SetupEventArgs(core.EventArgs):
    """
    The SetupEventArgs provides information associated with a setup event.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return SetupEventArgs()
    @property
    def setup(self):
        """
        Provides access to the setup. Can be null in the case where the event is fired before the setup has been created or after it has been deleted.
        """
        return Setup()

class Setups(core.Base):
    """
    Collection that provides access to all of the existing setups in a document.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return Setups()
    def item(self, index):
        """
        Function that returns the specified setup using an index into the collection.

        index : The index of the item within the collection to return. The first item in the collection has an index of 0.

        Returns the specified item or null if an invalid index was specified.
        """
        return Setup()
    def itemByName(self, name):
        """
        Returns the setup with the specified name.

        name : The name (as it appears in the browser) of the operation.

        Returns the specified setup or null in the case where there is no setup with the specified name.
        """
        return Setup()
    def itemByOperationId(self, id):
        """
        Returns the setup with the specified operation id.

        id : The id of the operation.

        Returns the specified setup or null in the case where there is no setup with the specified operation id.
        """
        return Setup()
    @property
    def count(self):
        """
        The number of setups in the collection.
        """
        return int()

class SetupSheetFormats():
    """
    List of the formats to choose from when generating setup sheets
    """
    def __init__(self):
        pass
    HTMLFormat = 0
    ExcelFormat = 1

class CAMFolder(OperationBase):
    """
    Object that represents a folder in an existing Setup, Folder or Pattern.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return CAMFolder()
    def createFromTemplate(self, templateFilePath):
        """
        Create and add operations, folders or patterns from the specified template file to the end of this folder.

        templateFilePath : The full path to the template file.

        Returns the collection containing all of the operations, folders and patterns created from the template file.
        """
        return core.ObjectCollection()
    @property
    def isActive(self):
        """
        Gets if this folder is active.
        """
        return bool()
    @property
    def operations(self):
        """
        Returns the Operations collection that provides access to existing individual operations in this folder.
        """
        return Operations()
    @property
    def folders(self):
        """
        Returns the Folders collection that provides access to existing folders in this folder.
        """
        return CAMFolders()
    @property
    def patterns(self):
        """
        Returns the Patterns collection that provides access to existing patterns in this folder.
        """
        return CAMPatterns()
    @property
    def children(self):
        """
        Returns a collection containing all of the immediate (top level) child operations, folders and patterns in this folder in the order they appear in the browser.
        """
        return ChildOperationList()
    @property
    def parent(self):
        """
        Returns the parent Setup, Folder or Pattern for this Folder.
        """
        return core.Base()
    @property
    def allOperations(self):
        """
        Gets a collection containing all of the operations in this folder. This includes all operations nested in folders and patterns.
        """
        return core.ObjectCollection()

class LinearMachineAxis(MachineAxis):
    """
    Object that represents an axis with linear motion (e.g. X, Y, and Z).
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return LinearMachineAxis()
    @property
    def direction(self):
        """
        The unit vector that represents the direction along which the axis will move.
        """
        return core.Vector3D()
    @direction.setter
    def direction(self, direction):
        """
        The unit vector that represents the direction along which the axis will move.
        """
        pass

class LinearMachineAxisInput(MachineAxisInput):
    """
    Object that defines the properties required to create a new linear machine axis object.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return LinearMachineAxisInput()
    @property
    def direction(self):
        """
        The unit vector that represents the direction along which the linear axis will move. This vector is in the machine's coordinate system (e.g. the X axis is always (1,0,0)).
        """
        return core.Vector3D()
    @direction.setter
    def direction(self, direction):
        """
        The unit vector that represents the direction along which the linear axis will move. This vector is in the machine's coordinate system (e.g. the X axis is always (1,0,0)).
        """
        pass

class Operation(OperationBase):
    """
    Object that represents an operation in an existing Setup, Folder or Pattern.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return Operation()
    @property
    def strategyType(self):
        """
        Gets the strategy type for this operation.
        """
        return OperationStrategyTypes()
    @property
    def isToolpathValid(self):
        """
        Gets if the toolpath for this operation is currently valid. (has not become invalidated by model changes).
        """
        return bool()
    @property
    def isGenerating(self):
        """
        Gets if the toolpath is in the process of generating.
        """
        return bool()
    @property
    def hasWarning(self):
        """
        Gets if problems were encountered when generating the toolpath for this operation.
        """
        return bool()
    @property
    def parent(self):
        """
        Returns the parent Setup, Folder or Pattern for this operation.
        """
        return core.Base()
    @property
    def hasToolpath(self):
        """
        Gets if a toolpath currently exists (has been generated) for this operation.
        """
        return bool()
    @property
    def operationState(self):
        """
        Gets the current state of this operation.
        """
        return OperationStates()
    @property
    def generatingProgress(self):
        """
        Gets the toolpath generation progress value for this operation.
        """
        return str()

class RotaryMachineAxis(MachineAxis):
    """
    Object that represents an axis with rotary motion (e.g. A, B, and C).
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return RotaryMachineAxis()
    @property
    def rotationAxis(self):
        """
        The infinite line that defines the direction and location of the axis of rotation.
        """
        return core.InfiniteLine3D()
    @rotationAxis.setter
    def rotationAxis(self, rotationAxis):
        """
        The infinite line that defines the direction and location of the axis of rotation.
        """
        pass

class RotaryMachineAxisInput(MachineAxisInput):
    """
    Object that defines the properties required to create a new rotary machine axis object.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return RotaryMachineAxisInput()
    @property
    def rotationAxis(self):
        """
        The infinite line that defines the direction and location of the axis of rotation. This direction is in the machine's coordinate system (e.g. an A axis would typically use (1,0,0) for the direction), and follows the right-hand rule.
        """
        return core.InfiniteLine3D()
    @rotationAxis.setter
    def rotationAxis(self, rotationAxis):
        """
        The infinite line that defines the direction and location of the axis of rotation. This direction is in the machine's coordinate system (e.g. an A axis would typically use (1,0,0) for the direction), and follows the right-hand rule.
        """
        pass

class Setup(OperationBase):
    """
    Object that represents an existing Setup.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return Setup()
    def createFromTemplate(self, templateFilePath):
        """
        Create and add operations, folders or patterns from the specified template file to the end of this setup.

        templateFilePath : The full path to the template file.

        Returns the collection containing all of the operations, folders and patterns created from the template file.
        """
        return core.ObjectCollection()
    @property
    def operationType(self):
        """
        Gets the Operation Type. It can be MillingOperation, TurningOperation, JetOperation or AdditiveOperation.
        """
        return OperationTypes()
    @property
    def isActive(self):
        """
        Gets if this setup is active.
        """
        return bool()
    @property
    def operations(self):
        """
        Returns the Operations collection that provides access to existing operations in this setup.
        """
        return Operations()
    @property
    def folders(self):
        """
        Returns the Folders collection that provides access to existing folders in this setup.
        """
        return CAMFolders()
    @property
    def patterns(self):
        """
        Returns the Patterns collection that provides access to existing patterns in this setup.
        """
        return CAMPatterns()
    @property
    def children(self):
        """
        Returns a collection containing all of the immediate (top level) child operations, folders and patterns in this setup in the order they appear in the browser.
        """
        return ChildOperationList()
    @property
    def allOperations(self):
        """
        Gets a collection containing all of the operations in this setup. This includes all operations nested in folders and patterns.
        """
        return core.ObjectCollection()
    @property
    def models(self):
        """
        Gets and sets the bodies associated with the setup. Passing in an empty ObjectCollection will remove all current bodies. Valid input is MeshBody and/or BRepBody objects.
        """
        return core.ObjectCollection()
    @models.setter
    def models(self, models):
        """
        Gets and sets the bodies associated with the setup. Passing in an empty ObjectCollection will remove all current bodies. Valid input is MeshBody and/or BRepBody objects.
        """
        pass
    @property
    def fixtures(self):
        """
        Gets the fixtures associated with the setup.
        """
        return core.ObjectCollection()
    @property
    def stockSolids(self):
        """
        Gets the stock solids associated with the setup.
        """
        return core.ObjectCollection()
    @property
    def machine(self):
        """
        Gets the Machine associated with the setup.
        """
        return Machine()

class CAMPattern(CAMFolder):
    """
    Object that represents a pattern in an existing Setup, Folder or Pattern.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return CAMPattern()