# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#  fusion.py
#
#  This file is a component of ApperSample.
#
#  Copyright (c) 2020 by Patrick Rainsberry.
#  :license: Apache2, see LICENSE for more details.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#  fusion.py
#
#  This file is a component of ApperSample.
#
#  Copyright (c) 2020 by Patrick Rainsberry.
#  :license: Apache2, see LICENSE for more details.
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# This file is automatically generated for code intellisense only.
# It does not reflect the actual implementation.

from . import core


class AreaProperties(core.Base):
    """
    The Area properties of a sketch profile or planar surface.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return AreaProperties()

    def _get_area(self):
        return float()

    def _get_centroid(self):
        return core.Point3D()

    def _get_perimeter(self):
        return float()

    def _get_rotationToPrincipal(self):
        return float()

    def _get_accuracy(self):
        return CalculationAccuracy()

    def getPrincipalAxes(self):
        """
        Method that returns the principal axes.
        xAxis : The output Vector3D object that indicates the direction of the x axis.
        yAxis : The output Vector3D object that indicates the direction of the y axis.
        Returns true if successful
        """
        return bool(), core.Vector3D(), core.Vector3D()

    def getMomentsOfInertia(self):
        """
        Method that, for a sketch, returns the moments of inertia about the sketch origin. For a planar face,
        this method returns the moments about the world coordinate system origin. Unit for returned values is
        kg/cm^2. ixx : Output Double that returns the XX partial moment. iyy : Output Double that returns the YY
        partial moment. izz : Output Double that returns the ZZ partial moment. ixy : Output Double that returns the
        XY partial moment. iyz : Output Double that returns the YZ partial moment. ixz : Output Double that returns
        the XZ partial moment. Returns true if successful
        """
        return bool(), float(), float(), float(), float(), float(), float()

    def getCentroidMomentsOfInertia(self):
        """
        Method that returns the moments of inertia about the centroid. Unit for returned values is kg/cm^2.
        ixx : Output Double that returns the XX partial moment.
        iyy : Output Double that returns the YY partial moment.
        izz : Output Double that returns the ZZ partial moment.
        ixy : Output Double that returns the XY partial moment.
        iyz : Output Double that returns the YZ partial moment.
        ixz : Output Double that returns the XZ partial moment.
        Returns true if successful
        """
        return bool(), float(), float(), float(), float(), float(), float()

    def getPrincipalMomentsOfInertia(self):
        """
        Method that returns the moments of inertia about the principal axes. Unit for returned values is kg/cm^2.
        i1 : Output Double that specifies the first moment of inertia.
        i2 : Output Double that specifies the second moment of inertia.
        i3 : Output Double that specifies the third moment of inertia.
        Returns true if successful
        """
        return bool(), float(), float(), float()

    def getRadiusOfGyration(self):
        """
        Method that returns the radius of gyration about the principal axes. Unit for returned values is cm.
        kxx : Output Double that returns the X partial radius of gyration.
        kyy : Output Double that returns the Y partial radius of gyration.
        kzz : Output Double that returns the Z partial radius of gyration.
        Returns true if successful
        """
        return bool(), float(), float(), float()

    area = property(_get_area, None, doc="Gets the area in the square centimeters.")
    centroid = property(_get_centroid, None,
                        doc="Gets the centroid where the units are centimeters. The Location is relative to the sketch origin for a profile or relative to the world coordinate system for a planar face.")
    perimeter = property(_get_perimeter, None,
                         doc="Gets the perimeter in centimeters. The perimeter is the sum of the length of all the curves or edges of the profile or planar surface")
    rotationToPrincipal = property(_get_rotationToPrincipal, None,
                                   doc="Gets the angle of rotation of the principal axes.")
    accuracy = property(_get_accuracy, None, doc="Returns the accuracy that was used for the calculation.")


class AsBuiltJoint(core.Base):
    """
    Represent an as-built joint.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return AsBuiltJoint()

    def _get_parentComponent(self):
        return Component()

    def _set_name(self, name):
        pass

    def _get_name(self):
        return str()

    def _get_occurrenceOne(self):
        return Occurrence()

    def _get_occurrenceTwo(self):
        return Occurrence()

    def _set_geometry(self, geometry):
        pass

    def _get_geometry(self):
        return JointGeometry()

    def _get_timelineObject(self):
        return TimelineObject()

    def _get_jointMotion(self):
        return JointMotion()

    def _get_nativeObject(self):
        return AsBuiltJoint()

    def _get_assemblyContext(self):
        return Occurrence()

    def _set_isSuppressed(self, isSuppressed):
        pass

    def _get_isSuppressed(self):
        return bool()

    def _set_isLightBulbOn(self, isLightBulbOn):
        pass

    def _get_isLightBulbOn(self):
        return bool()

    def _get_isVisible(self):
        return bool()

    def _get_attributes(self):
        return core.Attributes()

    def deleteMe(self):
        """
        Deletes this as-built joint.
        Returns true if the delete was successful.
        """
        return bool()

    def setAsRigidJointMotion(self):
        """
        Redefines the relationship between the two joint geometries as a rigid joint.
        Returns true if successful.
        """
        return bool()

    def setAsRevoluteJointMotion(self, rotationAxis, geometry, customRotationAxisEntity):
        """
        Redefines the relationship between the two joint geometries as a revolute joint.
        rotationAxis : Specifies which axis the rotation is around. If this is set to CustomJointDirection then the customRotationAxisEntity argument must also be provided.
        geometry : Redefines the joint geometry. If not provided, the existing geometry is used. This argument is required if the current joint motion is rigid.
        customRotationAxisEntity : If the rotationAxis is customAxisEntity this argument is used to specify the entity that defines the custom axis of rotation. This can be several types of entities that an axis can be derived from.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsSliderJointMotion(self, sliderDirection, geometry, customSliderDirectionEntity):
        """
        Redefines the relationship between the two joint geometries as a slider joint.
        sliderDirection : Specifies which axis the slide direction is along. If this is set to CustomJointDirection then the customSliderDirectionEntity argument must also be provided.
        geometry : Redefines the joint geometry. If not provided, the existing geometry is used. This argument is required if the current joint motion is rigid.
        customSliderDirectionEntity : If the sliderDirection is CustomJointDirection this argument is used to specify the entity that defines the custom slider direction. This can be several types of entities that can define a direction.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsCylindricalJointMotion(self, rotationAxis, geometry, customRotationAxisEntity):
        """
        Redefines the relationship between the two joint geometries as a cylindrical joint.
        rotationAxis : Specifies which axis the rotation is around. If this is set to CustomJointDirection then the customRotationAxisEntity argument must also be provided.
        geometry : Redefines the joint geometry. If not provided, the existing geometry is used. This argument is required if the current joint motion is rigid.
        customRotationAxisEntity : If the rotationAxis is customAxisEntity this argument is used to specify the entity that defines the custom axis of rotation. This can be several types of entities that an axis can be derived from.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsPinSlotJointMotion(self, rotationAxis, slideDirection, geometry, customRotationAxisEntity,
                                customSlideDirectionEntity):
        """
        Redefines the relationship between the two joint geometries as a pin-slot joint.
        rotationAxis : Specifies which axis the rotation is around. If this is set to CustomJointDirection then the customRotationAxisEntity argument must also be provided.
        slideDirection : Specifies which axis the slide direction is along. If this is set to CustomJointDirection then the customSlideDirectionEntity argument must also be provided.
        geometry : Redefines the joint geometry. If not provided, the existing geometry is used. This argument is required if the current joint motion is rigid.
        customRotationAxisEntity : If the rotationAxis is customAxisEntity this argument is used to specify the entity that defines the custom axis of rotation. This can be several types of entities that an axis can be derived
        customSlideDirectionEntity : If the slideDirection is CustomJointDirection this argument is used to specify the entity that defines the custom slide direction. This can be several types of entities that can define a direction.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsPlanarJointMotion(self, normalDirection, geometry, customNormalDirectionEntity,
                               customPrimarySlideDirection):
        """
        Redefines the relationship between the two joint geometries as a planar joint.
        normalDirection : Defines the direction of the normal of the single degree of rotation. This can be set to XAxisJointDirection, YAxisJointDirection, ZAxisJointDirection, or CustomJointDirection. If set to CustomJointDirection then the customNormalDirectionEntity argument must also be provided.
        geometry : Redefines the joint geometry. If not provided, the existing geometry is used. This argument is required if the current joint motion is rigid.
        customNormalDirectionEntity : If the normalDirection is CustomJointDirection this argument is used to specify the entity that defines the direction of the normal. This can be several types of entities that can define a direction.
        customPrimarySlideDirection : This arguments defines the direction of the primary slide direction. A default primary slide direction is automatically chosen and will be used if this argument is not provided or is null. The secondary slide direction is automatically inferred from the normal and primary slide directions.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsBallJointMotion(self, pitchDirection, yawDirection, geometry, customPitchDirection, customYawDirection):
        """
        Redefines the relationship between the two joint geometries as a ball joint.
        pitchDirection : Defines the direction the pitch angle is measured from. This can be ZAxisJointDirection or CustomJointDirection. If CustomJointDirection is specified then you must also provide a value for the customPitchDirection argument.
        yawDirection : Defines the direction the yaw is measured from. This can be XAxisJointDirection or CustomJointDirection. If CustomJointDirection is specified then you must also provide a value for the customYawDirection argument.
        geometry : Redefines the joint geometry. If not provided, the existing geometry is used. This argument is required if the current joint motion is rigid.
        customPitchDirection : If the pitchDirection argument is customPitchDirection this argument is used to define the direction the pitch angel is measured from. This can be several types of entities that can define a direction.
        customYawDirection : If the yawDirection argument is customPitchDirection this argument is used to define the direction the yaw angel is measured from. This can be several types of entities that can define a direction.
        Returns true if the operation was successful.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return AsBuiltJoint()

    parentComponent = property(_get_parentComponent, None,
                               doc="Returns the parent component that owns this AsBuiltJoint.")
    name = property(_get_name, _set_name,
                    doc="The name of the as-built joint as it is displayed in the timeline and the browser. The name can be changed.")
    occurrenceOne = property(_get_occurrenceOne, None,
                             doc="Specifies the first of two occurrences the joint is between.")
    occurrenceTwo = property(_get_occurrenceTwo, None,
                             doc="Specifies the second of two occurrences the joint is between.")
    geometry = property(_get_geometry, _set_geometry,
                        doc="Specifies the position of the joint. Getting this property will return null and setting it will be ignored in the case where the joint motion is rigid.")
    timelineObject = property(_get_timelineObject, None,
                              doc="Returns the timeline object associated with this as-built joint.")
    jointMotion = property(_get_jointMotion, None,
                           doc="Returns a JointMotion object that defines the motion relationship between the two geometries.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly but is already the native object.")
    isSuppressed = property(_get_isSuppressed, _set_isSuppressed,
                            doc="Gets and sets if this as-built joint is suppressed.")
    isLightBulbOn = property(_get_isLightBulbOn, _set_isLightBulbOn,
                             doc="Gets and sets if the light bulb of this as-built joint as displayed in the browser is on or off. A joint will only be visible if the light bulb is switched on. However, the light bulb can be on and the joint still invisible if a higher level occurrence in the assembly context is not visible because its light bulb is off or the joints folder is light bulb is off.")
    isVisible = property(_get_isVisible, None,
                         doc="Gets whether the as-built joint is visible. To change the visibility see the isLightBulbOn property. This property is affected by the assembly context.")
    attributes = property(_get_attributes, None,
                          doc="Returns the collection of attributes associated with this as-built joint.")


class AsBuiltJointInput(core.Base):
    """
    Defines all of the information needed to create an as-built joint.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return AsBuiltJointInput()

    def _set_occurrenceOne(self, occurrenceOne):
        pass

    def _get_occurrenceOne(self):
        return Occurrence()

    def _set_occurrenceTwo(self, occurrenceTwo):
        pass

    def _get_occurrenceTwo(self):
        return Occurrence()

    def _set_geometry(self, geometry):
        pass

    def _get_geometry(self):
        return JointGeometry()

    def _get_jointMotion(self):
        return JointMotion()

    def setAsRigidJointMotion(self):
        """
        Defines the relationship between the two joint geometries as a rigid joint.
        Returns true if successful.
        """
        return bool()

    def setAsRevoluteJointMotion(self, rotationAxis, customRotationAxisEntity):
        """
        Defines the relationship between the two joint geometries as a revolute joint.
        rotationAxis : Specifies which axis the rotation is around. If this is set to CustomJointDirection then the customRotationAxisEntity argument must also be provided.
        customRotationAxisEntity : If the rotationAxis is customAxisEntity this argument is used to specify the entity that defines the custom axis of rotation. This can be several types of entities that an axis can be derived from.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsSliderJointMotion(self, sliderDirection, customSliderDirectionEntity):
        """
        Defines the relationship between the two joint geometries as a slider joint.
        sliderDirection : Specifies which axis the slide direction is along. If this is set to CustomJointDirection then the customSliderDirectionEntity argument must also be provided.
        customSliderDirectionEntity : If the sliderDirection is CustomJointDirection this argument is used to specify the entity that defines the custom slider direction. This can be several types of entities that can define a direction.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsCylindricalJointMotion(self, rotationAxis, customRotationAxisEntity):
        """
        Defines the relationship between the two joint geometries as a cylindrical joint.
        rotationAxis : Specifies which axis the rotation is around. If this is set to CustomJointDirection then the customRotationAxisEntity argument must also be provided.
        customRotationAxisEntity : If the rotationAxis is customAxisEntity this argument is used to specify the entity that defines the custom axis of rotation. This can be several types of entities that an axis can be derived from.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsPinSlotJointMotion(self, rotationAxis, slideDirection, customRotationAxisEntity,
                                customSlideDirectionEntity):
        """
        Defines the relationship between the two joint geometries as a pin-slot joint.
        rotationAxis : Specifies which axis the rotation is around. If this is set to CustomJointDirection then the customRotationAxisEntity argument must also be provided.
        slideDirection : Specifies which axis the slide direction is along. If this is set to CustomJointDirection then the customSlideDirectionEntity argument must also be provided.
        customRotationAxisEntity : If the rotationAxis is customAxisEntity this argument is used to specify the entity that defines the custom axis of rotation. This can be several types of entities that an axis can be derived
        customSlideDirectionEntity : If the slideDirection is CustomJointDirection this argument is used to specify the entity that defines the custom slide direction. This can be several types of entities that can define a direction.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsPlanarJointMotion(self, normalDirection, customNormalDirectionEntity, customPrimarySlideDirection):
        """
        Defines the relationship between the two joint geometries as a planar joint.
        normalDirection : Defines the direction of the normal of the single degree of rotation. This can be set to XAxisJointDirection, YAxisJointDirection, ZAxisJointDirection, or CustomJointDirection. If set to CustomJointDirection then the customNormalDirectionEntity argument must also be provided.
        customNormalDirectionEntity : If the normalDirection is CustomJointDirection this argument is used to specify the entity that defines the direction of the normal. This can be several types of entities that can define a direction.
        customPrimarySlideDirection : This arguments defines the direction of the primary slide direction. A default primary slide direction is automatically chosen and will be used if this argument is not provided or is null. The secondary slide direction is automatically inferred from the normal and primary slide directions.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsBallJointMotion(self, pitchDirection, yawDirection, customPitchDirection, customYawDirection):
        """
        Defines the relationship between the two joint geometries as a ball joint.
        pitchDirection : Defines the direction the pitch angle is measured from. This can be ZAxisJointDirection or CustomJointDirection. If CustomJointDirection is specified then you must also provide a value for the customPitchDirection argument.
        yawDirection : Defines the direction the yaw is measured from. This can be XAxisJointDirection or CustomJointDirection. If CustomJointDirection is specified then you must also provide a value for the customYawDirection argument.
        customPitchDirection : If the pitchDirection argument is customPitchDirection this argument is used to define the direction the pitch angel is measured from. This can be several types of entities that can define a direction.
        customYawDirection : If the yawDirection argument is customPitchDirection this argument is used to define the direction the yaw angel is measured from. This can be several types of entities that can define a direction.
        Returns true if the operation was successful.
        """
        return bool()

    occurrenceOne = property(_get_occurrenceOne, _set_occurrenceOne,
                             doc="Specifies the first of two occurrences the joint is between.")
    occurrenceTwo = property(_get_occurrenceTwo, _set_occurrenceTwo,
                             doc="Specifies the second of two occurrences the joint is between.")
    geometry = property(_get_geometry, _set_geometry, doc="Specifies the position of the joint.")
    jointMotion = property(_get_jointMotion, None,
                           doc="Returns one of the objects derived from JointMotion that defines how the motion between the two joint geometries is defined. Can be null if the motion hasn't yet been defined.")


class AsBuiltJointList(core.Base):
    """
    A list of as-built joints.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return AsBuiltJointList()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified as-built joint using an index into the list.
        index : The index of the item within the list to return. The first item in the list has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return AsBuiltJoint()

    def itemByName(self, name):
        """
        Function that returns the specified as-built joint using a name.
        name : The name of the item within the list to return.
        Returns the specified item or null if an invalid name was specified.
        """
        return AsBuiltJoint()

    count = property(_get_count, None, doc="Returns number of as-built joints in the list.")


class AsBuiltJoints(core.Base):
    """
    The collection of as-built joints in this component. This provides access to all existing as-built joints and supports the ability to create new as-built joints.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return AsBuiltJoints()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified as-built joint using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return AsBuiltJoint()

    def itemByName(self, name):
        """
        Function that returns the specified as-built joint using a name.
        name : The name of the item within the collection to return.
        Returns the specified item or null if an invalid name was specified.
        """
        return AsBuiltJoint()

    def createInput(self, occurrenceOne, occurrenceTwo, geometry):
        """
        Creates an AsBuiltJointInput object which is used to collect all of the information needed to create an as-built joint. This object is equivalent to the as-built joint dialog in the user-interface in that it doesn't represent an actual joint but just the information needed to create an as-built joint. Once this is fully defined the add method can be called, passing this object in to create the actual joint.
        occurrenceOne : Specifies the first of two occurrences the joint is between.
        occurrenceTwo : Specifies the second of two occurrences the joint is between.
        geometry : Specifies the geometry of where the joint will be positioned. If the as-built joint is a rigid joint, this argument should be null because no geometry is needed.
        Returns the new AsBuiltJointInput object or null in the case of failure.
        """
        return AsBuiltJointInput()

    def add(self, input):
        """
        Creates a new as-built joint.
        input : An AsBuiltJointInput object that was created using the AsBuiltJoints.createInput method and then fully defined using the properties and methods on the AsBuiltJointInput object.
        Returns the new AsBuiltJoint object or null in the case of failure.
        """
        return AsBuiltJoint()

    count = property(_get_count, None, doc="Returns number of joint origins in the collection.")


class BaseComponent(core.Base):
    """
    The BaseComponent object that defines all of the common design data and is the base class for the product specific components.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BaseComponent()

    def _set_name(self, name):
        pass

    def _get_name(self):
        return str()

    def _get_occurrences(self):
        return Occurrences()

    def _get_allOccurrences(self):
        return OccurrenceList()

    def _get_constructionPlanes(self):
        return ConstructionPlanes()

    def _get_constructionAxes(self):
        return ConstructionAxes()

    def _get_constructionPoints(self):
        return ConstructionPoints()

    def _get_bRepBodies(self):
        return BRepBodies()

    def _get_parentDesign(self):
        return Design()

    def occurrencesByComponent(self, component):
        """
        Returns all occurrences at the top-level of this component that reference the specified component. The returned list is read-only.
        component : The component that is being referenced by the occurrences that will be returned.
        The occurrences referenced by the specified component.
        """
        return OccurrenceList()

    def allOccurrencesByComponent(self, component):
        """
        Returns all occurrences, at any level of the assembly, that reference the specified component. The returned list is read-only.
        component : The component that is being referenced by the occurrences that will be returned.
        The occurrences referenced by the specified component.
        """
        return OccurrenceList()

    def findBRepUsingRay(self, originPoint, rayDirection, entityType, proximityTolerance, visibleEntitiesOnly,
                         hitPoints):
        """
        Finds all the B-Rep entities that are intersected by the specified ray. This can return BRepFace, BrepEdge, and BRepVertex objects.
        originPoint : Input point that defines the origin of the ray. The search for entities begins at this point.
        rayDirection : Input vector that defines the direction of the ray. The ray is infinite so the length of the vector is ignored.
        entityType : The type of B-Rep entity wanted. You can also take advantage of B-Rep topology to infer other intersections. For example, If you get a BRepEdge it implies that the faces the edge connects were also intersected. If a BRepVertex is returned it implies the edges that the vertex connects were intersected and the faces that the edges connect were intersected.
        proximityTolerance : Optional argument that specifies the tolerance for the search. All entities within this distance from the ray and of the specified type will be returned. If not specified a default small tolerance is used.
        visibleEntitiesOnly : Optional argument that indicates whether or not invisible entities should be included in the search. Defaults to True indicating that invisible entities will be ignored.
        hitPoints : An ObjectCollection of Point3D objects that represent the coordinates where the ray hit the found entity. There will be the same number of hit points as returned entities and they will be in the collections in the same order. In other words, hit point 1 corresponds with found entity 1, hit point 2 corresponds with found entity 2, and so on. Because of the proximity tolerance the hitPoint may not actually lie on the entity but will be within the proximity tolerance to it. It's an optional out argument, returns the hit points if an existing ObjectCollection is input. You can create a new ObjectCollection by using the static create method on the ObjectCollection class.
        Returns an ObjectCollection containing the entities found. The returned collection can be empty indicating nothing was found. The points are returned in an order where they are arranged based on their distance from the origin point where the closest point is first. If an entity is hit more than once, the entity is returned once for the first intersection.
        """
        return core.ObjectCollection()

    def findBRepUsingPoint(self, point, entityType, proximityTolerance, visibleEntitiesOnly):
        """
        Finds all the entities of the specified type at the specified location.
        point : Input coordinate that specifies the component space point at which to find the entities.
        entityType : The type of B-Rep entity wanted. You can also take advantage of B-Rep topology to infer other that other entities were found. For example, If you get a BRepEdge it implies that the faces the edge connects were also found. If a BRepVertex is returned it implies the edges that the vertex connects were found and the faces that the edges connect were found.
        proximityTolerance : Specifies the tolerance for the search. All entities within this distance from the search point that match the filter will be returned. If not specified a default tolerance is used.
        visibleEntitiesOnly : indicates whether or not invisible objects should be included in the search. Defaults to True indicating that invisible objects will be ignored.
        Returns an ObjectCollection containing the entities found. The returned collection can be empty indicating nothing was found.
        """
        return core.ObjectCollection()

    name = property(_get_name, _set_name,
                    doc="Property that gets and sets the name of this component. This is the name shown in the browser for each occurrence referencing this component.")
    occurrences = property(_get_occurrences, None,
                           doc="Property that returns the Occurrences collection associated with this component. This provides access to the occurrences at the top-level of this component and provides the functionality to add new occurrences.")
    allOccurrences = property(_get_allOccurrences, None,
                              doc="Returns all of the occurrences in the assembly regardless of their level within the assembly structure. The returned list is read-only.")
    constructionPlanes = property(_get_constructionPlanes, None,
                                  doc="Returns the construction planes collection associated with this component. This provides access to the existing construction planes and supports the creation of new construction planes.")
    constructionAxes = property(_get_constructionAxes, None,
                                doc="Returns the construction axes collection associated with this component. This provides access to the existing construction axes and supports the creation of new construction axes.")
    constructionPoints = property(_get_constructionPoints, None,
                                  doc="Returns the construction points collection associated with this component. This provides access to the existing construction points and supports the creation of new construction points.")
    bRepBodies = property(_get_bRepBodies, None,
                          doc="Returns the B-Rep bodies collection associated with this component.")
    parentDesign = property(_get_parentDesign, None, doc="Returns the parent product this component is owned by.")


class BaseFeatures(core.Base):
    """
    The BaseFeature class represents a direct edit feature within a parametric design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BaseFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified base feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return BaseFeature()

    def itemByName(self, name):
        """
        Function that returns the specified base feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return BaseFeature()

    def add(self):
        """
        Creates a new empty base feature in the parent component.
        Returns the new BaseFeature or null in the case of an error.
        """
        return BaseFeature()

    count = property(_get_count, None, doc="The number of base features in the collection.")


class BooleanTypes:
    """
    Defines the different type of boolean operations that are supported.
    """

    def __init__(self):
        pass

    DifferenceBooleanType = 0
    IntersectionBooleanType = 1
    UnionBooleanType = 2


class BoundaryFillFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a BoundaryFillFeatureInput.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BoundaryFillFeatureInput()

    def _get_bRepCells(self):
        return BRepCells()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return FeatureOperations()

    def _set_creationOccurrence(self, creationOccurrence):
        pass

    def _get_creationOccurrence(self):
        return Occurrence()

    def _set_tools(self, tools):
        pass

    def _get_tools(self):
        return core.ObjectCollection()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    def cancel(self):
        """
        To determine the possible boundaries and allow you to choose which cells to keep, the boundary
        fill feature does a partial compute when the input object is created. To do this it starts a boundary
        fill feature transaction and completes the transaction when you call the add method. If you don't
        call the add method to finish the transaction it leaves Fusion 360 in a bad state and there will be undo
        problems and possibly a crash. If you have created a BoundFillFeatureInput object and don't want to finish
        the feature creation, you need to call the cancel method on the BoundaryFillFeatureInput object to
        safely abort the current boundary fill transaction.
        """
        return bool()

    bRepCells = property(_get_bRepCells, None,
                         doc="Returns the collection of the valid cells that have been calculated based on the set of input tools. You use this collection to specify which cells you want included in the output.")
    operation = property(_get_operation, _set_operation,
                         doc="Gets and sets the type of operation performed by the boundary fill feature.")
    creationOccurrence = property(_get_creationOccurrence, _set_creationOccurrence,
                                  doc="In order for geometry to be transformed correctly, an Occurrence for creation needs to be specified when the Boundary Fill is created based on geometry (e.g. a profile and/or face(s)) in another component AND (the Boundary Fill) is not in the root component. The CreationOccurrence is analogous to the active occurrence in the UI")
    tools = property(_get_tools, _set_tools,
                     doc="Gets and sets the collection of one or more construction planes and open or closed BRepBody objects that are used in calculating the possible closed boundaries.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class BoundaryFillFeatures(core.Base):
    """
    Collection that provides access to all of the existing boundary fill features in a component and supports the ability to create new boundary fill features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BoundaryFillFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified boundary fill feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return BoundaryFillFeature()

    def createInput(self, tools, operation):
        """
        Creates a BoundaryFillFeatureInput object. Use properties and methods on this object to define the boundary fill you want to create and then use the Add method, passing in the BoundaryFillFeatureInput object. To determine the possible boundaries and allow you to choose which cells to keep, the boundary fill feature does a partial compute when the input object is created. To do this it starts a boundary fill feature transaction and completes the transaction when you call the add method. If you don't call the add method to finish the transaction it leaves Fusion 360 in a bad state and there will be undo problems and possibly a crash. If you have created a BoundFillFeatureInput object and don't want to finish the feature creation, you need to call the cancel method on the BoundaryFillFeatureInput object to safely abort the current boundary fill transaction.
        tools : A collection of one or more construction planes and open or closed BRepBody objects that will be used in calculating the possible closed boundaries.
        operation : The operation type to perform.
        Returns the newly created BoundaryFillFeatureInput object or null if the creation failed.
        """
        return BoundaryFillFeatureInput()

    def add(self, input):
        """
        Creates a new boundary fill feature.
        input : A BoundaryFillFeatureInput object that defines the desired boundary fill feature. Use the createInput method to create a new BoundaryFillFeatureInput object and then use methods on it (the BoundaryFillFeatureInput object) to define the boundary fill feature.
        Returns the newly created BoundaryFillFeature object or null if the creation failed.
        """
        return BoundaryFillFeature()

    def itemByName(self, name):
        """
        Function that returns the specified boundary fill feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return BoundaryFillFeature()

    count = property(_get_count, None, doc="The number of boundary fill features in the collection.")


class BoxFeatures(core.Base):
    """
    Collection that provides access to all of the existing box features in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BoxFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified box feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return BoxFeature()

    def itemByName(self, name):
        """
        Function that returns the specified box feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return BoxFeature()

    count = property(_get_count, None, doc="The number of box features in the collection.")


class BRepBodies(core.Base):
    """
    The BRepBodies collection provides access to all of the B-Rep bodies within a component.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepBodies()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified body using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return BRepBody()

    def itemByName(self, name):
        """
        Returns a specific body using the name of the body within the collection.
        name : The name of the body, as seen in the browser, to return.
        The BRepBody or null if a body with the defined name is not found.
        """
        return BRepBody()

    def add(self, body, targetBaseFeature):
        """
        Creates a new BRepBody object. The input can be a persisted or transient BRepBody and the result is a persisted BRepBody. In a model where the design history is ignored (direct edit model) the BRepBody is created within the component the BRepBodies collection was obtained from. In a model where the design history is captured (parametric model), the new BRepBody is created within the specified Base Feature. Because of a current limitation, if you want to create a BRepBody in a parametric model, you must first call the edit method of the base feature, then use the add method to create the body, and finally call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.
        body : The input BRepBody. Typically this is a transient BRepBody but that's not a requirement. In any case, there is not any association back to the original BRepBody.
        targetBaseFeature : The BaseFeature object that this B-Rep body will be associated with. This is an optional requirement but is required when the model design history is being captured (parametric model) but is ignored otherwise (direct edit model).
        Returns the newly created BRepBody or null if the creation failed.
        """
        return BRepBody()

    count = property(_get_count, None, doc="Returns the number of bodies in the collection.")


class BRepBody(core.Base):
    """
    Represents a B-Rep (Boundary Representation) body.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepBody()

    def _get_parentComponent(self):
        return Component()

    def _get_lumps(self):
        return BRepLumps()

    def _get_shells(self):
        return BRepShells()

    def _get_faces(self):
        return BRepFaces()

    def _get_edges(self):
        return BRepEdges()

    def _get_vertices(self):
        return BRepVertices()

    def _get_isSolid(self):
        return bool()

    def _get_boundingBox(self):
        return core.BoundingBox3D()

    def _get_concaveEdges(self):
        return BRepEdges()

    def _get_convexEdges(self):
        return BRepEdges()

    def _get_area(self):
        return float()

    def _get_volume(self):
        return float()

    def _get_isTransient(self):
        return bool()

    def _set_name(self, name):
        pass

    def _get_name(self):
        return str()

    def _set_isVisible(self, isVisible):
        pass

    def _get_isVisible(self):
        return bool()

    def _set_isSelectable(self, isSelectable):
        pass

    def _get_isSelectable(self):
        return bool()

    def _set_appearance(self, appearance):
        pass

    def _get_appearance(self):
        return core.Appearance()

    def _get_appearanceSourceType(self):
        return core.AppearanceSourceTypes()

    def _set_material(self, material):
        pass

    def _get_material(self):
        return core.Material()

    def _get_meshManager(self):
        return MeshManager()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return BRepBody()

    def _get_physicalProperties(self):
        return PhysicalProperties()

    def _set_isLightBulbOn(self, isLightBulbOn):
        pass

    def _get_isLightBulbOn(self):
        return bool()

    def _get_attributes(self):
        return core.Attributes()

    def _get_baseFeature(self):
        return BaseFeature()

    def _set_opacity(self, opacity):
        pass

    def _get_opacity(self):
        return float()

    def _get_visibleOpacity(self):
        return float()

    def _get_revisionId(self):
        return str()

    def _get_wires(self):
        return BRepWires()

    def _get_isTemporary(self):
        return bool()

    def pointContainment(self, point):
        """
        Determines the relationship of the input point with respect to this body.
        point : The point to do the containment check for.
        Returns a value from the PointContainment enum indicating the relationship of the input point to the body.
        """
        return PointContainment()

    def deleteMe(self):
        """
        Deletes the body. This property is only valid if the IsTransient property is false.
        Returns true if the delete was successful.
        """
        return bool()

    def copy(self):
        """
        Copies the body to the clipboard. This property is only valid if the IsTransient property is false.
        Returns true if the copy was successful.
        """
        return bool()

    def cut(self):
        """
        Cuts the body to the clipboard. This property is only valid if the IsTransient property is false.
        Returns true if the cut was successful.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence. This method is only valid if the IsTransient property is false.
        occurrence : The occurrence that defines the context for the created proxy.
        Returns the new BRepBoy proxy or null if this isn't the NativeObject.
        """
        return BRepBody()

    def createComponent(self):
        """
        Creates a new component and occurrence within the component that currently owns this body. This body is moved into the new component and returned. The newly created component can be obtained by using the parentComponent property of the BRepBody object. This method is only valid if the IsTransient property is false.
        Returns the BRrepBody in the new component or null in the case the creation failed.
        """
        return BRepBody()

    def moveToComponent(self, target):
        """
        Moves this body from it's current component into the root component or the component owned by the specified occurrence.
        target : The target can be either the root component or an occurrence. In the case where an occurrence is specified, the body will be moved into the parent component of the target occurrence and the target occurrence defines the transform of how the body will be copied so that the body maintains it's same position with respect to the assembly.
        Returns the moved BRepBody or null in the case the move failed.
        """
        return BRepBody()

    def copyToComponent(self, target):
        """
        Creates a copy of this body into the specified target.
        target : The target can be either the root component or an occurrence. In the case where an occurrence is specified, the body will be copied into the parent component of the target occurrence and the target occurrence defines the transform of how the body will be copied so that the body maintains it's same position with respect to the assembly. If target is null, then a copy of the body is created in the owning component of the original body.
        Returns the moved BRepBody or null in the case the move failed.
        """
        return BRepBody()

    def convert(self, options):
        """
        Creates a new body where the faces and edges are converted to different types of geometry based on the input options. This is particularly useful when you need a body made up entirely of NURBS surfaces. The tempId on the faces, edges, and vertices on the new body will match with the corresponding tempId on the original body. In cases where faces are split as a result of the conversion there can be more than one face or edge in the new body that matches to a single face or edge in the original body. The findByTempId method will find the entity with the matching id.
        options : Input options that define how the conversion should be done. These are bitwise options so they can be combined.
        Returns the new converted body or null in the case of failure.
        """
        return BRepBody()

    def findByTempId(self, tempId):
        """
        Returns all of the faces, edges, or vertices that match the input ID.
        tempId : The ID of the B-Rep entity to find.
        Returns an array of entities that have the specified ID. This returns an array because it's possible that a body created by converting a body can have multiple entities with the same ID in the case where a curve or face was split. Returns an empty array in the case where no match is found.
        """
        return core.Base()

    parentComponent = property(_get_parentComponent, None, doc="Returns the component this body is owned by.")
    lumps = property(_get_lumps, None, doc="Returns a collection of all of the lumps in the body.")
    shells = property(_get_shells, None, doc="Returns a collection of all of the shells in the body.")
    faces = property(_get_faces, None, doc="Returns a collection of all of the faces in the body.")
    edges = property(_get_edges, None, doc="Returns a collection of all of the edges in the body.")
    vertices = property(_get_vertices, None, doc="Returns a collection of all of the vertices in the body.")
    isSolid = property(_get_isSolid, None, doc="Returns whether this body is closed (solid) or not.")
    boundingBox = property(_get_boundingBox, None, doc="Returns the bounding box of this body.")
    concaveEdges = property(_get_concaveEdges, None, doc="Returns all of the edges that connect concave faces.")
    convexEdges = property(_get_convexEdges, None, doc="Returns all of the edges that connect convex faces.")
    area = property(_get_area, None, doc="Returns the area in cm ^ 2.")
    volume = property(_get_volume, None,
                      doc="Returns the volume in cm ^ 3. Returns 0 in the case the body is not solid.")
    isTransient = property(_get_isTransient, None,
                           doc="Indicates if this body is represented in the model or is transient.")
    name = property(_get_name, _set_name,
                    doc="Gets and sets the name of the body. This property is only valid if the IsTransient property is false.")
    isVisible = property(_get_isVisible, _set_isVisible,
                         doc="Gets if this body is currently visible in the graphics window. Use the isLightBulbOn to change if the light bulb beside the body node in the browser is on or not. Parent nodes in the browser can have their light bulb off which affects all of their children. This property indicates the final result and whether this body is actually visible or not. This property is only valid if the IsTransient property is false.")
    isSelectable = property(_get_isSelectable, _set_isSelectable,
                            doc="Gets and sets if this body is selectable. This property is only valid if the IsTransient property is false.")
    appearance = property(_get_appearance, _set_appearance,
                          doc="Read-write property that gets and sets the current appearance of the body. Setting this property will result in applying an override appearance to the body and the AppearanceSourceType property will return OverrideAppearanceSource. Setting this property to null will remove any override. This property is only valid if the IsTransient property is false.")
    appearanceSourceType = property(_get_appearanceSourceType, None,
                                    doc="Read-write property that gets the source of the appearance for the body. If this returns OverrideAppearanceSource, an override exists on this body. The override can be removed by setting the Appearance property to null. This property is only valid if the IsTransient property is false.")
    material = property(_get_material, _set_material,
                        doc="Gets and sets the material assigned to this body. This property is only valid if the IsTransient property is false.")
    meshManager = property(_get_meshManager, None, doc="Returns the mesh manager object for this body.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this BRepBody object is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly. but is already the native object. Also returns null in the case where this body is transient.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    physicalProperties = property(_get_physicalProperties, None,
                                  doc="Returns the PhysicalProperties object that has properties for getting the area, density, mass, volume, moments, etc of this body. Property values will be calulated using the 'LowCalculationAccuracy' setting when using this property to get the PhysicalProperties object. To specify a higher calculation tolerance, use the getPhysicalProperties method on the Design class instead.")
    isLightBulbOn = property(_get_isLightBulbOn, _set_isLightBulbOn,
                             doc="Gets and set if the light bulb beside the body node in the browser is on or not. Parent nodes in the browser can have their light bulb off which affects all of their children so this property does not indicate if the body is actually visible, just that it should be visible if all of it's parent nodes are also visible. Use the isVisible property to determine if it's actually visible. This property is only valid if the IsTransient property is false.")
    attributes = property(_get_attributes, None, doc="Returns the collection of attributes associated with this face.")
    baseFeature = property(_get_baseFeature, None,
                           doc="If this body is associated with a base feature, this property will return that base feature. If it's not associated with a base feature, this property will return null.")
    opacity = property(_get_opacity, _set_opacity,
                       doc="Gets and sets the opacity override assigned to this body. A value of 1.0 specifies that is it completely opaque and a value of 0.0 specifies that is it completely transparent. This value is not necessarily related to what the user sees because the opacity is inherited. For example, if you this body is in a component and that component's opacity is set to something other than 1.0, the body will also be shown as slightly transparent even though the opacity property for the body will return 1.0. Because the component that contains the body can be referenced as an occurrence in other components and they can have different opacity settings, it's possible that different instances of the same body can display using different opacity levels. To get the opacity that it is being displayed with use the BrepBody.visibleOpacity property. This is the API equivalent of the 'Opacity Control' command available for the body in the browser.")
    visibleOpacity = property(_get_visibleOpacity, None,
                              doc="The user can set an override opacity for components and bodies these opacity overrides combine if children and parent components have overrides. This property returns the actual opacity that is being used to render the body. To set the opacity use the opacity property of the BRepBody object.")
    revisionId = property(_get_revisionId, None,
                          doc="Returns the current revision ID of the body. This ID changes any time the body is modified in any way. By getting and saving the ID when you create any data that is dependent on the body, you can then compare the saved ID with the current ID to determine if the body has changed to know if you should update your data.")
    wires = property(_get_wires, None, doc="Returns any wire bodies that exist within this body.")
    isTemporary = property(_get_isTemporary, None,
                           doc="Indicates if this body is represented in the model or is temporary.")


class BRepCell(core.Base):
    """
    Object that represents an existing BRepCell.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepCell()

    def _set_isSelected(self, isSelected):
        pass

    def _get_isSelected(self):
        return bool()

    def _get_sourceTools(self):
        return core.ObjectCollection()

    def _get_cellBody(self):
        return BRepBody()

    isSelected = property(_get_isSelected, _set_isSelected,
                          doc="Gets and sets whether the cell is selected. For a Trim feature a selected cell is removed, whereas for a boundary fill feature, a selected cell is kept and used in the feature operation.")
    sourceTools = property(_get_sourceTools, None,
                           doc="Returns the tools that we're using in the definition of this cell.")
    cellBody = property(_get_cellBody, None,
                        doc="Returns a BRepBody that represents this cell. This is a transient B-Rep body.")


class BRepCells(core.Base):
    """
    Collection that provides access to all of the existing BRepCells defined by a BoundaryFillFeatureInput
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepCells()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified BRepCell using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return BRepCell()

    count = property(_get_count, None, doc="The number of BRepCells in the collection.")


class BRepCoEdge(core.Base):
    """
    Represents the use of a BRepEdge by a BRepFace.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepCoEdge()

    def _get_edge(self):
        return BRepEdge()

    def _get_loop(self):
        return BRepLoop()

    def _get_evaluator(self):
        return core.CurveEvaluator2D()

    def _get_geometry(self):
        return core.Curve2D()

    def _get_isOpposedToEdge(self):
        return bool()

    def _get_isParamReversed(self):
        return bool()

    def _get_next(self):
        return BRepCoEdge()

    def _get_body(self):
        return BRepBody()

    def _get_partner(self):
        return BRepCoEdge()

    def _get_previous(self):
        return BRepCoEdge()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return BRepCoEdge()

    def createForAssemblyContext(self, occurrence):
        """
        Returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context for the created proxy.
        Returns the new BrepCoEdge proxy or null if this isn't the NativeObject.
        """
        return BRepCoEdge()

    edge = property(_get_edge, None, doc="Returns the edge this co-edge is associated with.")
    loop = property(_get_loop, None, doc="Returns the loop this co-edge is part of.")
    evaluator = property(_get_evaluator, None,
                         doc="Returns a curve evaluator that can be used to perform geometric evaluations on the co-edge.")
    geometry = property(_get_geometry, None,
                        doc="Returns a geometry object that represents the shape of this co-edge in parameter space of the parent face's surface.")
    isOpposedToEdge = property(_get_isOpposedToEdge, None,
                               doc="Indicates if the orientation of this co-edge is in the same direction or opposed to its associated edge.")
    isParamReversed = property(_get_isParamReversed, None,
                               doc="Returns if the parametric direction of this co-edge is reversed from the parametric direction of the underlying curve obtained from the geometry property. A co-edge's parametric direction is from the start vertex to the end vertex. But the underlying curve geometry may have the opposite parameterization. This property indicates if the parameterization order of the evaluator obtained from this co-edge is reversed from the order of the geometry curve's evaluator.")
    next = property(_get_next, None, doc="Returns the next co-edge in the loop.")
    body = property(_get_body, None, doc="Returns the body this co-edge is part of.")
    partner = property(_get_partner, None, doc="Returns the co-edge on the adjacent face")
    previous = property(_get_previous, None, doc="Returns the previous co-edge in the loop.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this BRepCoEdge object is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly. but is already the native object.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class BRepCoEdges(core.Base):
    """
    BRepCoEdge Collection.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepCoEdges()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified co-edge using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return BRepCoEdge()

    count = property(_get_count, None, doc="The number of co-edges in the collection.")


class BRepConvertOptions:
    """
    Defines the various options when converting the geometry of a B-Rep body or face to NURBS. This is used by the convert method of the BRepBody and BRepFace objects.
    """

    def __init__(self):
        pass

    ProceduralToNURBSConversion = 0
    AnalyticsToNURBSConversion = 1
    PlanesToNURBSConversion = 2
    SplitPeriodicFacesConversion = 3


class BRepEdge(core.Base):
    """
    Represents a one-dimensional topological element that can be used to bound a BRepFace A BRepEdge uses a single, connected and bounded subset of a curve for it geometry.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepEdge()

    def _get_startVertex(self):
        return BRepVertex()

    def _get_endVertex(self):
        return BRepVertex()

    def _get_faces(self):
        return BRepFaces()

    def _get_shell(self):
        return BRepShell()

    def _get_body(self):
        return BRepBody()

    def _get_isDegenerate(self):
        return bool()

    def _get_evaluator(self):
        return core.CurveEvaluator3D()

    def _get_geometry(self):
        return core.Curve3D()

    def _get_isTolerant(self):
        return bool()

    def _get_tolerance(self):
        return float()

    def _get_pointOnEdge(self):
        return core.Point3D()

    def _get_coEdges(self):
        return BRepCoEdges()

    def _get_isParamReversed(self):
        return bool()

    def _get_tangentiallyConnectedEdges(self):
        return core.ObjectCollection()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return BRepEdge()

    def _get_attributes(self):
        return core.Attributes()

    def _get_length(self):
        return float()

    def _get_tempId(self):
        return int()

    def _get_boundingBox(self):
        return core.BoundingBox3D()

    def createForAssemblyContext(self, occurrence):
        """
        Returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context for the created proxy.
        Returns the new BrepEdge proxy or null if this isn't the NativeObject.
        """
        return BRepEdge()

    startVertex = property(_get_startVertex, None, doc="Returns the BRepVertex that bounds its low parameter end.")
    endVertex = property(_get_endVertex, None, doc="Returns the BRepVertex that bounds its high parameter end.")
    faces = property(_get_faces, None,
                     doc="Returns the BRepFaces that are associated with this edge through its BRepCoEdges.")
    shell = property(_get_shell, None, doc="Returns the parent shell of the edge.")
    body = property(_get_body, None, doc="Returns the parent body of the edge.")
    isDegenerate = property(_get_isDegenerate, None,
                            doc="Returns if the edge's geometry is degenerate. For example, the apex of a cone is a degerate edge.")
    evaluator = property(_get_evaluator, None, doc="Returns CurveEvaluator3D for evaluation.")
    geometry = property(_get_geometry, None, doc="Returns the underlying curve geometry of the edge.")
    isTolerant = property(_get_isTolerant, None,
                          doc="Returns if the edge is tolerant. The tolerance used is available from the tolerance property.")
    tolerance = property(_get_tolerance, None,
                         doc="Returns the tolerance used by a tolerant edge. This value is only useful when isTolerant is true.")
    pointOnEdge = property(_get_pointOnEdge, None,
                           doc="Returns a sample point guaranteed to lie on the edge's curve, within its boundaries, and not on a vertex (unless this is a degenerate edge).")
    coEdges = property(_get_coEdges, None, doc="Returns the BRepCoEdges on the edge.")
    isParamReversed = property(_get_isParamReversed, None,
                               doc="Returns if the parametric direction of this edge is reversed from the parametric direction of the underlying curve obtained from the geometry property. An edge's parametric direction is from the start vertex to the end vertex. But the underlying curve geometry may have the opposite parameterization. This property indicates if the parameterization order of the evaluator obtained from this edge is reversed from the order of the geometry curve's evaluator.")
    tangentiallyConnectedEdges = property(_get_tangentiallyConnectedEdges, None,
                                          doc="Returns a collection of edges that includes all of the edges tangentially connected to this edge. The result includes this edge. The edges are in the collection in their connected order.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this BRepEdge object is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly. but is already the native object.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    attributes = property(_get_attributes, None, doc="Returns the collection of attributes associated with this face.")
    length = property(_get_length, None, doc="Returns the length of the edge in centimeters.")
    tempId = property(_get_tempId, None,
                      doc="Returns the temporary ID of this edge. This ID is only good while the document remains open and as long as the owning BRepBody is not modified in any way. The findByTempId method of the BRepBody will return the entity in the body with the given ID.")
    boundingBox = property(_get_boundingBox, None, doc="Returns the bounding box of this edge.")


class BRepEdges(core.Base):
    """
    BRepEdge collection.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepEdges()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified edge using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return BRepEdge()

    count = property(_get_count, None, doc="The number of edges in the collection.")


class BRepEntityTypes:
    """
    Used by the findBRepUsingRay and findBRepUsingPoint methods to specify the desired return type.
    """

    def __init__(self):
        pass

    BRepBodyEntityType = 0
    BRepFaceEntityType = 1
    BRepEdgeEntityType = 2
    BRepVertexEntityType = 3


class BRepFace(core.Base):
    """
    Represent a connected region on a single geometric surface.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepFace()

    def _get_edges(self):
        return BRepEdges()

    def _get_vertices(self):
        return BRepVertices()

    def _get_shell(self):
        return BRepShell()

    def _get_loops(self):
        return BRepLoops()

    def _get_body(self):
        return BRepBody()

    def _get_geometry(self):
        return core.Surface()

    def _get_evaluator(self):
        return core.SurfaceEvaluator()

    def _get_pointOnFace(self):
        return core.Point3D()

    def _get_tangentiallyConnectedFaces(self):
        return BRepFaces()

    def _get_meshManager(self):
        return MeshManager()

    def _set_appearance(self, appearance):
        pass

    def _get_appearance(self):
        return core.Appearance()

    def _get_appearanceSourceType(self):
        return core.AppearanceSourceTypes()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return BRepFace()

    def _get_area(self):
        return float()

    def _get_boundingBox(self):
        return core.BoundingBox3D()

    def _get_centroid(self):
        return core.Point3D()

    def _get_attributes(self):
        return core.Attributes()

    def _get_tempId(self):
        return int()

    def _get_isParamReversed(self):
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context for the created proxy.
        Returns the new BRepFace proxy or null if this isn't the NativeObject.
        """
        return BRepFace()

    def convert(self, options):
        """
        Creates a new body where this face and its edges are converted to different types of geometry based on the input options. The tempId on the faces, edges, and vertices on the new body will match with the corresponding tempId on the original body. In cases where the face is split as a result of the conversion there can be more than one face or edge in the new body that matches to a single face or edge in the original body.
        options : Input options that define how the conversion should be done. These are bitwise options so they can be combined.
        Returns the new converted body or null in the case of failure.
        """
        return BRepBody()

    edges = property(_get_edges, None, doc="Returns the BRepEdges used by this face")
    vertices = property(_get_vertices, None, doc="Returns the BRepVertices used by this face")
    shell = property(_get_shell, None, doc="Returns the parent shell of the face.")
    loops = property(_get_loops, None, doc="Returns the BRepLoops owned by this face")
    body = property(_get_body, None, doc="Returns the parent body of the face.")
    geometry = property(_get_geometry, None, doc="Returns the underlying surface geometry of this face")
    evaluator = property(_get_evaluator, None,
                         doc="Returns a SurfaceEvaluator to allow geometric evaluations across the face's surface. This evaluator differs from the evaluator available from the Surface obtained from the geometry property by being bounded by the topological boundaries of this face.")
    pointOnFace = property(_get_pointOnFace, None,
                           doc="Returns a sample point guaranteed to lie on the face's surface, within the face's boundaries, and not on a boundary edge.")
    tangentiallyConnectedFaces = property(_get_tangentiallyConnectedFaces, None,
                                          doc="Returns the set of faces that are tengentially adjacent to this face. In other words, it is the set of faces that are adjacent to this face's edges and have a smooth transition across those edges.")
    meshManager = property(_get_meshManager, None,
                           doc="Returns a MeshManager object that allows access to existing and new meshes of this face.")
    appearance = property(_get_appearance, _set_appearance,
                          doc="Read-write property that gets and sets the current appearance of the face. Setting this property will result in applying an override appearance to the face and the AppearanceSourceType property will return OverrideAppearanceSource. Setting this property to null will remove any override.")
    appearanceSourceType = property(_get_appearanceSourceType, None,
                                    doc="Read-write property that gets the source of the appearance for the face. If this returns OverrideAppearanceSource, an override exists on this face. The override can be removed by setting the Appearance property to null.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this BRepFace object is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly. but is already the native object.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    area = property(_get_area, None, doc="Returns the area in cm ^ 2.")
    boundingBox = property(_get_boundingBox, None, doc="Returns the bounding box of this face")
    centroid = property(_get_centroid, None, doc="Returns a point at the centroid (aka, geometric center) of the face.")
    attributes = property(_get_attributes, None, doc="Returns the collection of attributes associated with this face.")
    tempId = property(_get_tempId, None,
                      doc="Returns the temporary ID of this face. This ID is only good while the document remains open and as long as the owning BRepBody is not modified in any way. The findByTempId method of the BRepBody will return the entity in the body with the given ID.")
    isParamReversed = property(_get_isParamReversed, None,
                               doc="Gets if the normal of this face is reversed with respect to the surface geometry associated with this face.")


class BRepFaces(core.Base):
    """
    BRepFace collection.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepFaces()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified face using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return BRepFace()

    count = property(_get_count, None, doc="The number of faces in the collection.")


class BRepLoop(core.Base):
    """
    Represents a connected portion of a BRepFace boundary. It consists of a chain of BRepCoEdges.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepLoop()

    def _get_edges(self):
        return BRepEdges()

    def _get_coEdges(self):
        return BRepCoEdges()

    def _get_isOuter(self):
        return bool()

    def _get_boundingBox(self):
        return core.BoundingBox3D()

    def _get_face(self):
        return BRepFace()

    def _get_body(self):
        return BRepBody()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return BRepLoop()

    def createForAssemblyContext(self, occurrence):
        """
        Returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context for the created proxy.
        Returns the new BrepLoop proxy or null if this isn't the NativeObject.
        """
        return BRepLoop()

    edges = property(_get_edges, None, doc="Returns the BRepEdges used by this loop")
    coEdges = property(_get_coEdges, None, doc="Returns the BRepCoEdges consisting this loop")
    isOuter = property(_get_isOuter, None, doc="Returns true of this loop is an outer loop of a face")
    boundingBox = property(_get_boundingBox, None, doc="Returns the bounding box of this loop")
    face = property(_get_face, None, doc="Returns the parent face of the loop.")
    body = property(_get_body, None, doc="Returns the parent body of the loop.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this BRepLoop object is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly. but is already the native object.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class BRepLoops(core.Base):
    """
    BRepLoop collection.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepLoops()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified loop using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return BRepLoop()

    count = property(_get_count, None, doc="The number of loops in the collection.")


class BRepLump(core.Base):
    """
    Represents an entirely connected set of entities. A BRepBody consists of BRepLumps.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepLump()

    def _get_shells(self):
        return BRepShells()

    def _get_faces(self):
        return BRepFaces()

    def _get_edges(self):
        return BRepEdges()

    def _get_vertices(self):
        return BRepVertices()

    def _get_body(self):
        return BRepBody()

    def _get_isClosed(self):
        return bool()

    def _get_boundingBox(self):
        return core.BoundingBox3D()

    def _get_area(self):
        return float()

    def _get_volume(self):
        return float()

    def _get_meshManager(self):
        return MeshManager()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return BRepLump()

    def pointContainment(self, point):
        """
        Determines the relationship of the input point with respect to this lump.
        point : The point to do the containment check for.
        Returns a value from the PointContainment enum indicating the relationship of the input point to the lump.
        """
        return PointContainment()

    def createForAssemblyContext(self, occurrence):
        """
        Returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context for the created proxy.
        Returns the new BrepLump proxy or null if this isn't the NativeObject.
        """
        return BRepLump()

    shells = property(_get_shells, None, doc="Returns the BRepShells owned by the lump")
    faces = property(_get_faces, None, doc="Returns the BRepFaces owned by the lump")
    edges = property(_get_edges, None, doc="Returns the BRepEdges owned by the lump")
    vertices = property(_get_vertices, None, doc="Returns the BRepVertices owned by the lump")
    body = property(_get_body, None, doc="Returns the immediate owner BRepBody of the lump")
    isClosed = property(_get_isClosed, None, doc="Returns true of the lump is closed")
    boundingBox = property(_get_boundingBox, None, doc="Returns the bounding box of the lump")
    area = property(_get_area, None, doc="Returns the area in cm ^ 2.")
    volume = property(_get_volume, None,
                      doc="Returns the volume in cm ^ 3. Returns 0 in the case the lump is not solid.")
    meshManager = property(_get_meshManager, None, doc="Returns the mesh manager object for this lump.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly context that is directly referencing this object in an assembly. This is only valid in the case where this BRepLump object is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly. but is already the native object.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class BRepLumps(core.Base):
    """
    BRepLump collection.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepLumps()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified lump using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return BRepLump()

    count = property(_get_count, None, doc="Returns the number of lumps in the collection.")


class BRepShell(core.Base):
    """
    Represents an entirely connected set of BRepFaces. A BRepLump may contain multiple BRepShells.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepShell()

    def _get_faces(self):
        return BRepFaces()

    def _get_edges(self):
        return BRepEdges()

    def _get_vertices(self):
        return BRepVertices()

    def _get_lump(self):
        return BRepLump()

    def _get_body(self):
        return BRepBody()

    def _get_boundingBox(self):
        return core.BoundingBox3D()

    def _get_isClosed(self):
        return bool()

    def _get_isVoid(self):
        return bool()

    def _get_area(self):
        return float()

    def _get_volume(self):
        return float()

    def _get_meshManager(self):
        return MeshManager()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return BRepShell()

    def _get_wire(self):
        return BRepWire()

    def pointContainment(self, point):
        """
        Determines the relationship of the input point with respect to this shell.
        point : The point to do the containment check for.
        Returns a value from the PointContainment enum indicating the relationship of the input point to the shell.
        """
        return PointContainment()

    def createForAssemblyContext(self, occurrence):
        """
        Returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context for the created proxy.
        Returns the new BrepShell proxy or null if this isn't the NativeObject.
        """
        return BRepShell()

    faces = property(_get_faces, None, doc="Returns the BRepFaces directly owned by this shell")
    edges = property(_get_edges, None, doc="returns the BRepEdges owned by this shell")
    vertices = property(_get_vertices, None, doc="Returns the BRepVertices owned by this shell")
    lump = property(_get_lump, None, doc="Returns the parent lump of this shell.")
    body = property(_get_body, None, doc="Returns the parent body of the shell.")
    boundingBox = property(_get_boundingBox, None, doc="Returns the bounding box of this shell")
    isClosed = property(_get_isClosed, None, doc="Returns true if this shell is closed")
    isVoid = property(_get_isVoid, None,
                      doc="Returns true if the faces of this shell bound a void or an empty space within an outer shell.")
    area = property(_get_area, None, doc="Returns the area in cm ^ 2.")
    volume = property(_get_volume, None,
                      doc="Returns the volume in cm ^ 3. Returns 0 in the case the shell is not solid.")
    meshManager = property(_get_meshManager, None, doc="Returns the mesh manager object for this shell.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this BRepShell object is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly. but is already the native object.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    wire = property(_get_wire, None,
                    doc="Returns the wire body, if any, that exists in this shell. Returns null if the shell doesn't have a wire body.")


class BRepShells(core.Base):
    """
    BRepShell collection.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepShells()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified shell using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return BRepShell()

    count = property(_get_count, None, doc="The number of shells in the collection.")


class BRepVertex(core.Base):
    """
    A 0-dimentional topological entity that bounds a BRepEdge.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepVertex()

    def _get_faces(self):
        return BRepFaces()

    def _get_edges(self):
        return BRepEdges()

    def _get_isTolerant(self):
        return bool()

    def _get_tolerance(self):
        return float()

    def _get_geometry(self):
        return core.Point3D()

    def _get_shell(self):
        return BRepShell()

    def _get_body(self):
        return BRepBody()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return BRepVertex()

    def _get_attributes(self):
        return core.Attributes()

    def _get_tempId(self):
        return int()

    def createForAssemblyContext(self, occurrence):
        """
        Returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context for the created proxy.
        Returns the new BrepVertex proxy or null if this isn't the NativeObject.
        """
        return BRepVertex()

    faces = property(_get_faces, None, doc="Returns the BRepFaces that uses this vertex through BRepEdge")
    edges = property(_get_edges, None, doc="Returns the BRepEdges bounded by this vertex")
    isTolerant = property(_get_isTolerant, None,
                          doc="Returns if the vertex is tolerant. The tolerance used is available from the tolerance property.")
    tolerance = property(_get_tolerance, None,
                         doc="Returns the tolerance used by a tolerant vertex. This value is only useful when isTolerant is true.")
    geometry = property(_get_geometry, None, doc="Returns the underlying geometry point")
    shell = property(_get_shell, None, doc="Returns the parent shell.")
    body = property(_get_body, None, doc="Returns the parent body.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this BRepVertex object is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly. but is already the native object.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    attributes = property(_get_attributes, None, doc="Returns the collection of attributes associated with this face.")
    tempId = property(_get_tempId, None,
                      doc="Returns the temporary ID of this vertex. This ID is only good while the document remains open and as long as the owning BRepBody is not modified in any way. The findByTempId method of the BRepBody will return the entity in the body with the given ID.")


class BRepVertices(core.Base):
    """
    BRepVertex collection.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepVertices()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified vertex using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return BRepVertex()

    count = property(_get_count, None, doc="The number of vertices in the collection.")


class BRepWire(core.Base):
    """
    Represents a single B-Rep wire body. A wire body consists of one or more edges and their vertices.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepWire()

    def _get_edges(self):
        return BRepEdges()

    def _get_vertices(self):
        return BRepVertices()

    def _get_coEdges(self):
        return BRepCoEdges()

    def _get_isPlanar(self):
        return bool()

    def _get_parent(self):
        return BRepBody()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return BRepWire()

    def offsetPlanarWire(self, planeNormal, distance, cornerType):
        """
        Method that computes the offset for a planar wire. A BRepBody containing the resulting BRepWire object(s) is returned. It's possible that the offset result of a single wire can result in multiple wires.
        planeNormal : Input Vector3D object that defines the positive direction of the plane the plane the wire lies on. This vector must be normal to the plane and is used to determine the side to offset the curves to. A positive offset distance is in the direction of the cross product (wire_tangent x wire_plane_normal). A negative offset is in the opposite direction.
        distance : The offset distance in centimeters. See the description for the Normal argument to see how a positive or negative value for the distance specifies the direction of the offset.
        cornerType : Specifies how the corners are connected when offseting the curves results in gaps in the corners. See the documentation of the enum for a detailed description of each option.
        Returns a new temporary BRepBody that contains one or more wires that represent the offset.
        """
        return BRepBody()

    def createForAssemblyContext(self, occurrence):
        """
        Returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context for the created proxy.
        Returns the new BRepWire proxy or null if this isn't the NativeObject.
        """
        return BRepWire()

    edges = property(_get_edges, None, doc="Returns the B-Rep edges associated with this wire body.")
    vertices = property(_get_vertices, None, doc="Returns the B-Rep vertices associated with this wire body.")
    coEdges = property(_get_coEdges, None,
                       doc="Returns the co-edges associated with this wire body. The co-edges record the connections between the edges in the wire body.")
    isPlanar = property(_get_isPlanar, None,
                        doc="Indicates if this entities making up this wire body are planar and all lie on the same plane.")
    parent = property(_get_parent, None, doc="Returns the parent BRepBody object that contains this wire.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this BRepFace object is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly. but is already the native object.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class BRepWires(core.Base):
    """
    Provides access to B-Rep wire bodies.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BRepWires()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified wire using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return BRepWire()

    count = property(_get_count, None, doc="The number of B-Rep wire bodies in the collection.")


class CalculationAccuracy:
    """
    The different accuracy settings for calculating area and physical property related values. The higher the accuracy setting, the longer it will take to perform the calculations.
    """

    def __init__(self):
        pass

    LowCalculationAccuracy = 0
    MediumCalculationAccuracy = 1
    HighCalculationAccuracy = 2
    VeryHighCalculationAccuracy = 3


class ChainedCurveOptions:
    """
    Controls options used when creating a Path and determing the rules for how curves are considered to be chained or connected.
    """

    def __init__(self):
        pass

    noChainedCurves = 0
    connectedChainedCurves = 1
    tangentChainedCurves = 2
    openEdgesChainedCurves = 3
    tangentAndOpenEdgesChainedCurves = 4


class ChamferFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a chamfer feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ChamferFeatureInput()

    def _set_edges(self, edges):
        pass

    def _get_edges(self):
        return core.ObjectCollection()

    def _set_isTangentChain(self, isTangentChain):
        pass

    def _get_isTangentChain(self):
        return bool()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    def setToEqualDistance(self, distance):
        """
        Adds a set of edges to this input.
        distance : A ValueInput object that defines the size of the chamfer. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '2 in'). If no units are specified it is interpreted using the current default units for length.
        Returns true if the set of edges was successfully added to the ChamferFeatureInput.
        """
        return bool()

    def setToTwoDistances(self, distanceOne, distanceTwo):
        """
        Adds a set of edges to this input.
        distanceOne : A ValueInput object that defines the distanceOne of the chamfer. This distance is along the face which is on the left of the selected edge. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '2 in'). If no units are specified it is interpreted using the current default units for length.
        distanceTwo : A ValueInput object that defines the distanceTwo of the chamfer. This distance is along the face which is on the right of the selected edge. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '2 in'). If no units are specified it is interpreted using the current default units for length.
        Returns true if successful.
        """
        return bool()

    def setToDistanceAndAngle(self, distance, angle):
        """
        Adds a set of edges to this input.
        distance : A ValueInput object that defines the distance of the chamfer. This distance is along the face which is on the right of the selected edge. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '2 in'). If no units are specified it is interpreted using the current default units for length.
        angle : A valueInput object that defines the angle. The direction will be towards to the face which is on the left of the selected edge. This can be a string or a value. If it's a string it is interpreted using the current document units and can include equations. For example all of the following are valid as long as they result in angle units; '45', '45 deg', 'a1 / 2'. If a value is input it is interpreted as radians. It cannot be negative.
        Returns true if successful.
        """
        return bool()

    edges = property(_get_edges, _set_edges,
                     doc="Gets and sets the collection of edges that will be chamfered. In order to access (get) the input edges of a chamfer, you must roll the timeline back to just before the chamfer feature whose edges you want to access.")
    isTangentChain = property(_get_isTangentChain, _set_isTangentChain,
                              doc="Gets and sets if any edges that are tangentially connected to any of chamfered edges will also be included in the chamfer.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class ChamferFeatures(core.Base):
    """
    Collection that provides access to all of the existing chamfer features in a component and supports the ability to create new chamfer features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ChamferFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified chamfer feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return ChamferFeature()

    def createInput(self, edges, isTangentChain):
        """
        Creates a ChamferFeatureInput object. Use properties and methods on this object to define the chamfer you want to create and then use the Add method, passing in the ChamferFeatureInput object.
        edges : The collection of edges that will be chamfered.
        isTangentChain : Boolean indicating if all edges that are tangentially connected to any of the input edges should be included in the chamfer or not.
        Returns the newly created ChamferFeatureInput object or null if the creation failed.
        """
        return ChamferFeatureInput()

    def add(self, input):
        """
        Creates a new chamfer feature.
        input : A ChamferFeatureInput object that defines the desired chamfer. Use the createInput method to create a new ChamferFeatureInput object and then use methods on it (the ChamferFeatureInput object) to define the chamfer.
        Returns the newly created ChamferFeature object or null if the creation failed.
        """
        return ChamferFeature()

    def itemByName(self, name):
        """
        Function that returns the specified chamfer feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return ChamferFeature()

    count = property(_get_count, None, doc="The number of chamfer features in the collection.")


class ChamferTypeDefinition(core.Base):
    """
    The base class for the classes that define how a chamfer can be defined.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ChamferTypeDefinition()

    def _get_parentFeature(self):
        return ChamferFeature()

    parentFeature = property(_get_parentFeature, None, doc="Returns the feature that owns this chamfer type definition")


class ChamferTypes:
    """
    List of the different ways a chamfer can be defined.
    """

    def __init__(self):
        pass

    EqualDistanceChamferType = 0
    TwoDistancesChamferType = 1
    DistanceAndAngleChamferType = 2


class CircularPatternFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a circular pattern feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CircularPatternFeatureInput()

    def _set_inputEntities(self, inputEntities):
        pass

    def _get_inputEntities(self):
        return core.ObjectCollection()

    def _set_axis(self, axis):
        pass

    def _get_axis(self):
        return core.Base()

    def _set_quantity(self, quantity):
        pass

    def _get_quantity(self):
        return core.ValueInput()

    def _set_totalAngle(self, totalAngle):
        pass

    def _get_totalAngle(self):
        return core.ValueInput()

    def _set_isSymmetric(self, isSymmetric):
        pass

    def _get_isSymmetric(self):
        return bool()

    def _set_patternComputeOption(self, patternComputeOption):
        pass

    def _get_patternComputeOption(self):
        return PatternComputeOptions()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    inputEntities = property(_get_inputEntities, _set_inputEntities,
                             doc="Gets and sets the input entities. The collection can contain faces, features, bodies or occurrences. All of the entities must be of a single type. For example, it can't contain features and occurrences but only features or occurrences.")
    axis = property(_get_axis, _set_axis,
                    doc="Gets and sets the axis of circular pattern. This can be a sketch line, linear edge, construction axis, an edge/sketch curve that defines an axis (circle, etc.) or a face that defines an axis (cylinder, cone, torus, etc.).")
    quantity = property(_get_quantity, _set_quantity, doc="Gets and sets quantity of the elements.")
    totalAngle = property(_get_totalAngle, _set_totalAngle,
                          doc="Gets and sets total angle. A negative angle can be used to reverse the direction. An angle of 360 degrees or 2 pi radians will create a full circular pattern.")
    isSymmetric = property(_get_isSymmetric, _set_isSymmetric,
                           doc="Gets and sets if the angle extent is in one direction or symmetric.")
    patternComputeOption = property(_get_patternComputeOption, _set_patternComputeOption,
                                    doc="Gets and sets the compute option when patterning features. The default value for this is AdjustPatternCompute. This property only applies when patterning features and is ignored in the direct modeling environment.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class CircularPatternFeatures(core.Base):
    """
    Collection that provides access to all of the existing circular pattern features in a component and supports the ability to create new circular pattern features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CircularPatternFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified circular pattern feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return CircularPatternFeature()

    def createInput(self, inputEntities, axis):
        """
        Creates a CircularPatternFeatureInput object. Use properties and methods on this object to define the circular pattern you want to create and then use the Add method, passing in the CircularPatternFeatureInput object.
        inputEntities : The collection can contain faces, features, bodies or occurrences. All of the entities must be of a single type. For example, it can't contain features and occurrences but only features or occurrences.
        axis : Input linear entity or the entity has axis that defines axis of circular pattern. This can be a sketch line, linear edge, construction axis, an edge/sketch curve that defines an axis (circle, etc.) or a face that defines an axis (cylinder, cone, torus, etc.).
        Returns the newly created CircularPatternFeatureInput object or null if the creation failed.
        """
        return CircularPatternFeatureInput()

    def add(self, input):
        """
        Creates a new circular pattern feature.
        input : A CircularPatternFeatureInput object that defines the desired circular pattern. Use the createInput method to create a new CircularPatternFeatureInput object and then use methods on it (the CircularPatternFeatureInput object) to define the circular pattern.
        Returns the newly created CircularPatternFeature object or null if the creation failed.
        """
        return CircularPatternFeature()

    def itemByName(self, name):
        """
        Function that returns the specified circular pattern feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return CircularPatternFeature()

    count = property(_get_count, None, doc="The number of circular pattern features in the collection.")


class CoilFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a coil feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CoilFeatureInput()

    def _set_isSolid(self, isSolid):
        pass

    def _get_isSolid(self):
        return bool()

    def _get_revolutions(self):
        return core.ValueInput()

    def _get_height(self):
        return core.ValueInput()

    def _get_pitch(self):
        return core.ValueInput()

    def _get_angle(self):
        return core.ValueInput()

    def _get_coilType(self):
        return CoilFeatureTypes()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return FeatureOperations()

    def _set_basePlane(self, basePlane):
        pass

    def _get_basePlane(self):
        return core.Base()

    def _set_isClockwiseRotation(self, isClockwiseRotation):
        pass

    def _get_isClockwiseRotation(self):
        return bool()

    def _set_diameter(self, diameter):
        pass

    def _get_diameter(self):
        return core.ValueInput()

    def _set_coilSectionType(self, coilSectionType):
        pass

    def _get_coilSectionType(self):
        return CoilFeatureSectionTypes()

    def _set_coilSectionPosition(self, coilSectionPosition):
        pass

    def _get_coilSectionPosition(self):
        return CoilFeatureSectionPositions()

    def _set_sectionSize(self, sectionSize):
        pass

    def _get_sectionSize(self):
        return core.ValueInput()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    def setToRevolutionAndHeight(self, revolutions, height, angle):
        """
        Sets the coil type to RevolutionsAndHeightCoilType.
        revolutions : A ValueInput object that defines the number of revolutions.
        height : A ValueInput object that defines the height.
        angle : A ValueInput object that defines angle.
        Returns true if successful.
        """
        return bool()

    def setToRevolutionsAndPitch(self, revolutions, pitch, angle):
        """
        Sets the coil type to RevolutionsAndPitchCoilType.
        revolutions : A ValueInput object that defines the number of revolutions.
        pitch : A ValueInput object that defines the pitch.
        angle : A ValueInput object that defines angle.
        Returns true if successful.
        """
        return bool()

    def setToHeightAndPitchCoil(self, height, pitch, angle):
        """
        Sets the coil type to HeightAndPitchCoilType.
        height : A ValueInput object that defines the height.
        pitch : A ValueInput object that defines the pitch.
        angle : A ValueInput object that defines angle.
        Returns true if successful.
        """
        return bool()

    def setToSpiral(self, revolutions, pitch):
        """
        Sets the coil type to SpiralCoilType.
        revolutions : A ValueInput object that defines the number of revolutions.
        pitch : A ValueInput object that defines the pitch.
        Returns true if successful.
        """
        return bool()

    isSolid = property(_get_isSolid, _set_isSolid,
                       doc="Specifies if the coil should be created as a solid or surface. This is initialized to true so a solid will be created if it's not changed. It only can be set to false in non-parametric modeling.")
    revolutions = property(_get_revolutions, None,
                           doc="Gets the revolutions number. Returns null in the case where the coilType property returns HeightAndPitchCoilType.")
    height = property(_get_height, None,
                      doc="Gets the height. Returns null in the case where the coilType property returns RevolutionsAndPitchCoilType.")
    pitch = property(_get_pitch, None,
                     doc="Gets the pitch. Returns null in the case where the coilType property returns RevolutionsAndHeightCoilType or SpiralCoilType.")
    angle = property(_get_angle, None,
                     doc="Gets the angle. Returns null in the case where the coilType property returns SpiralCoilType.")
    coilType = property(_get_coilType, None, doc="Gets the type of the coil.")
    operation = property(_get_operation, _set_operation,
                         doc="Gets and sets the type of operation performed by the coil.")
    basePlane = property(_get_basePlane, _set_basePlane, doc="Gets and sets the base plane.")
    isClockwiseRotation = property(_get_isClockwiseRotation, _set_isClockwiseRotation,
                                   doc="Gets and sets whether the rotation is clockwise or counter-clockwise. A value of true indicates clockwise rotation. It defaults to true.")
    diameter = property(_get_diameter, _set_diameter, doc="Gets and sets the diameter.")
    coilSectionType = property(_get_coilSectionType, _set_coilSectionType,
                               doc="Gets the section type of the coil. It defaults to CircularCoilSectionType.")
    coilSectionPosition = property(_get_coilSectionPosition, _set_coilSectionPosition,
                                   doc="Gets the section position of the coil. It defaults to InsideCoilSectionPosition.")
    sectionSize = property(_get_sectionSize, _set_sectionSize, doc="Gets and sets the section size.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class CoilFeatures(core.Base):
    """
    Collection that provides access to all of the existing coil features in a design and supports the ability to create new coil features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CoilFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified coil feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return CoilFeature()

    def itemByName(self, name):
        """
        Function that returns the specified coil feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return CoilFeature()

    count = property(_get_count, None, doc="The number of coil features in the collection.")


class CoilFeatureSectionPositions:
    """
    List of the section positions of coil feature.
    """

    def __init__(self):
        pass

    InsideCoilFeatureSectionPosition = 0
    OnCenterCoilFeatureSectionPosition = 1
    OutsideCoilFeatureSectionPosition = 2


class CoilFeatureSectionTypes:
    """
    List of the section types of coil primitive feature.
    """

    def __init__(self):
        pass

    CircularCoilFeatureSectionType = 0
    SquareCoilFeatureSectionType = 1
    TriangularExternalCoilFeatureSectionType = 2
    TriangularInternalCoilFeatureSectionType = 3


class CoilFeatureTypes:
    """
    List of the coil types.
    """

    def __init__(self):
        pass

    RevolutionsAndHeightCoilFeatureType = 0
    RevolutionsAndPitchCoilFeatureType = 1
    HeightAndPitchCoilFeatureType = 2
    SpiralCoilFeatureType = 3


class CombineFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a combine feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CombineFeatureInput()

    def _set_targetBody(self, targetBody):
        pass

    def _get_targetBody(self):
        return BRepBody()

    def _set_toolBodies(self, toolBodies):
        pass

    def _get_toolBodies(self):
        return core.ObjectCollection()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return FeatureOperations()

    def _set_isNewComponent(self, isNewComponent):
        pass

    def _get_isNewComponent(self):
        return bool()

    def _set_isKeepToolBodies(self, isKeepToolBodies):
        pass

    def _get_isKeepToolBodies(self):
        return bool()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    targetBody = property(_get_targetBody, _set_targetBody,
                          doc="Gets and sets the BRep Body object that represents the blank body.")
    toolBodies = property(_get_toolBodies, _set_toolBodies,
                          doc="Gets and sets the BRep Body objects that represent the tool bodies.")
    operation = property(_get_operation, _set_operation,
                         doc="Gets and sets the type of operation performed by the combine. The valid values are JoinFeatureOperation, CutFeatureOperation and IntersectFeatureOperation. The default value is JoinFeatureOperation.")
    isNewComponent = property(_get_isNewComponent, _set_isNewComponent,
                              doc="Gets and sets a boolean value for whether or not a new component will be created with the results. The default value is false. In Base feature environment NewComponent does not work.")
    isKeepToolBodies = property(_get_isKeepToolBodies, _set_isKeepToolBodies,
                                doc="Gets and sets a boolean value for whether or not the tool bodies are retrained after the combine results. The default value is false.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class CombineFeatures(core.Base):
    """
    Collection that provides access to all of the existing Combine features in a component and supports the ability to create new Combine features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CombineFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified combine feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified. This property returns nothing in the case where the feature is non-parametric.
        """
        return CombineFeature()

    def createInput(self, targetBody, toolBodies):
        """
        Creates a CombineFeatureInput object. Use properties and methods on this object to define the combine you want to create and then use the Add method, passing in the CombineFeatureInput object.
        targetBody : A BRep body that represents the blank body.
        toolBodies : An ObjectCollection containing one or more BRep bodies that represent tool bodies.
        Returns the newly created CombineFeatureInput object or null if the creation failed.
        """
        return CombineFeatureInput()

    def add(self, input):
        """
        Creates a new combine feature.
        input : A CombineFeatureInput object that defines the desired combine. Use the createInput method to create a new CombineFeatureInput object and then use methods on it (the CombineFeatureInput object) to define the combine.
        Returns the newly created CombineFeature object or null if the creation failed. This function returns nothing in the case where the feature is non-parametric.
        """
        return CombineFeature()

    def itemByName(self, name):
        """
        Function that returns the specified combine feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return CombineFeature()

    count = property(_get_count, None,
                     doc="The number of combine features in the collection. This property returns nothing in the case where the feature is non-parametric.")


class ComponentList(core.Base):
    """
    Provides a list of components.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ComponentList()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified component using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return Component()

    count = property(_get_count, None, doc="Returns the number of components in the collection.")


class Components(core.Base):
    """
    The Components collection object provides access to existing components in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return Components()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified component using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return Component()

    def itemByName(self, name):
        """
        Function that returns the specified component by name.
        name : The name of the component within the collection to return.
        Returns the specified component or null if the name is not found.
        """
        return Component()

    count = property(_get_count, None, doc="The number of components in the collection.")


class ConstructionAxes(core.Base):
    """
    Provides access to the construction axes within a component and provides methods to create new construction axes.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionAxes()

    def _get_count(self):
        return int()

    def _get_component(self):
        return Component()

    def item(self, index):
        """
        Function that returns the specified construction axis using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return ConstructionAxis()

    def itemByName(self, name):
        """
        Returns the specified construction axis using the name of the construction axis as it is displayed in the browser.
        name : The name of the axis as it is displayed in the browser
        Returns the specified item or null if an invalid name was specified.
        """
        return ConstructionAxis()

    def createInput(self, occurrenceForCreation):
        """
        Create a ConstructionAxisInput object that is in turn used to create a ConstructionAxis.
        occurrenceForCreation : A creation occurrence is needed if the input is in another component AND the construction axis is not in the root component. The occurrenceForCreation is analogous to the active occurrence in the UI.
        Returns a ConstructionAxisInput object
        """
        return ConstructionAxisInput()

    def add(self, input):
        """
        Creates and adds a new ConstructionAxis using the creation parameters in the ConstructionAxisInput. If the ConstructionAxisInput was defined using the setByLine method then the add will only work in a direct edit model (do not capture design history) and will fail in a parametric model.
        input : A ConstructionAxisInput object
        Returns the newly created construction axis or null if the creation failed.
        """
        return ConstructionAxis()

    count = property(_get_count, None, doc="The number of construction axes in the collection.")
    component = property(_get_component, None, doc="The component that owns this collection.")


class ConstructionAxis(core.Base):
    """
    ConstructionAxis Object
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionAxis()

    def _get_geometry(self):
        return core.InfiniteLine3D()

    def _set_name(self, name):
        pass

    def _get_name(self):
        return str()

    def _get_definition(self):
        return ConstructionAxisDefinition()

    def _get_isParametric(self):
        return bool()

    def _get_isDeletable(self):
        return bool()

    def _set_isLightBulbOn(self, isLightBulbOn):
        pass

    def _get_isLightBulbOn(self):
        return bool()

    def _get_isVisible(self):
        return bool()

    def _get_parent(self):
        return core.Base()

    def _get_component(self):
        return Component()

    def _get_timelineObject(self):
        return TimelineObject()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return ConstructionAxis()

    def _get_baseFeature(self):
        return BaseFeature()

    def _get_attributes(self):
        return core.Attributes()

    def _get_healthState(self):
        return FeatureHealthStates()

    def _get_errorOrWarningMessage(self):
        return str()

    def deleteMe(self):
        """
        Deletes the construction axis.
        Returns a bool indicating if the delete was successful or not.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return ConstructionAxis()

    geometry = property(_get_geometry, None,
                        doc="Returns an infinite line that represents the position and orientation of the construction axis. This geometry is defined in the AssemblyContext of this ConstructionAxis.")
    name = property(_get_name, _set_name, doc="The name of the construction axis as it is shown in the browser.")
    definition = property(_get_definition, None,
                          doc="Returns the construction axis definition object which provides access to the information defining the construction axis.")
    isParametric = property(_get_isParametric, None, doc="Indicates if this construction axis is parametric or not.")
    isDeletable = property(_get_isDeletable, None,
                           doc="Indicates if this construction axis can be deleted. Base construction axes can not be deleted.")
    isLightBulbOn = property(_get_isLightBulbOn, _set_isLightBulbOn,
                             doc="Indicates if the light bulb (as displayed in the browser) is on. A construction axis will only be visible if it's light bulb, and that of it's containing folder and parent component/s are also on.")
    isVisible = property(_get_isVisible, None,
                         doc="Gets if the construction plane is visible. This property is affected by the AssemblyContext of the construction axis.")
    parent = property(_get_parent, None,
                      doc="Returns the parent component or base feature. If both the design and the construction axis are parametric, the parent will be a component. If the design is parametric and the construction axis is not, the parent will be a base feature. If the design is not parametric the parent will be a component.")
    component = property(_get_component, None, doc="Returns the component this construction plane belongs to.")
    timelineObject = property(_get_timelineObject, None,
                              doc="Returns the timeline object associated with this construction axis.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly but is already the native object.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    baseFeature = property(_get_baseFeature, None,
                           doc="If this construction axis is associated with a base feature, this property will return that base feature. If it's not associated with a base feature, this property will return null.")
    attributes = property(_get_attributes, None,
                          doc="Returns the collection of attributes associated with this construction axis.")
    healthState = property(_get_healthState, None, doc="Returns the current health state of this construction axis.")
    errorOrWarningMessage = property(_get_errorOrWarningMessage, None,
                                     doc="Returns the error or warning message in the case where the healthState property returns either WarningFeatureHealthState or ErrorFeatureHealthState. Otherwise this property returns an empty string.")


class ConstructionAxisDefinition(core.Base):
    """
    A Base class to return the information (possibly parametric) used to define a ConstructionAxis.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionAxisDefinition()

    def _get_parentConstructionAxis(self):
        return ConstructionAxis()

    parentConstructionAxis = property(_get_parentConstructionAxis, None, doc="Returns the ConstructionAxis object")


class ConstructionAxisInput(core.Base):
    """
    A ConstructionAxisInput is a throwaway object used to create a ConstructionAxis The usage pattern is: a. create a ConstructionAxisInput (ConstructionAxes.CreateInput) b. call one of the member functions to specify how the ConstructionAxis is created c. create the ConstructionAxis (call ConstructionAxes.Add) d. stop referencing the ConstructionAxisInput (so it gets deleted).
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionAxisInput()

    def _set_creationOccurrence(self, creationOccurrence):
        pass

    def _get_creationOccurrence(self):
        return Occurrence()

    def _set_targetBaseOrFormFeature(self, targetBaseOrFormFeature):
        pass

    def _get_targetBaseOrFormFeature(self):
        return core.Base()

    def setByLine(self, line):
        """
        This input method is for creating a non-parametric construction axis whose position in space is defined by an InfiniteLine3D object. This method of defining a construction axis is only valid when working in a direct edit model (do not capture design history). This is not valid when working in a parametric model and will fail.
        line : An InFiniteLine3D object
        Returns true if the creation of the ConstructionAxisInput is successful.
        """
        return bool()

    def setByCircularFace(self, circularFace):
        """
        This input method is for creating an axis coincident with the axis of a cylindrical, conical or torus face. This can result in a parametric or non-parametric construction axis depending on whether the parent component is parametric or is a direct edit component.
        circularFace : The face from a cylinder, cone, or torus.
        Returns true if the creation of the ConstructionAxisInput is successful.
        """
        return bool()

    def setByPerpendicularAtPoint(self, face, pointEntity):
        """
        This input method is for creating an axis that is normal to a face at a specified point.
        face : A face (BRepFace object) to create the axis normal to.
        pointEntity : A construction point, sketch point or vertex the axis is to pass thru
        Returns true if the creation of the ConstructionAxisInput is successful.
        """
        return bool()

    def setByTwoPlanes(self, planarEntityOne, planarEntityTwo):
        """
        This input method is for creating a construction axis coincident with the intersection of two planes or planar faces. This will fail if the the two planes are parallel. This can result in a parametric or non-parametric construction axis depending on whether the parent component is parametric or is a direct edit component.
        planarEntityOne : The first planar face or construction plane to intersect
        planarEntityTwo : The second planar face or construction plane to intersect
        Returns true if the creation of the ConstructionAxisInput is successful.
        """
        return bool()

    def setByTwoPoints(self, pointEntityOne, pointEntityTwo):
        """
        This input method is for creating a construction axis that passes through the two points (work points, sketch points or vertices). This will fail if the the two points are coincident. This can result in a parametric or non-parametric construction axis depending on whether the parent component is parametric or is a direct edit component.
        pointEntityOne : The first construction point, sketch point or vertex the axis passes through
        pointEntityTwo : The second construction point, sketch point or vertex the axis passes through
        Returns true if the creation of the ConstructionAxisInput is successful.
        """
        return bool()

    def setByEdge(self, edgeEntity):
        """
        This input method is for creating a construction axis from a specified linear/circular edge or sketch curve. This can result in a parametric or non-parametric construction axis depending on whether the parent component is parametric or is a direct edit component.
        edgeEntity : A linear/circular edge, construction line, or sketch line
        Returns true if the creation of the ConstructionAxisInput is successful.
        """
        return bool()

    def setByNormalToFaceAtPoint(self, face, pointEntity):
        """
        This input method if for creating a construction axis normal to a specified face or sketch profile and that passes through a specified point. This can result in a parametric or non-parametric construction axis depending on whether the parent component is parametric or is a direct edit component.
        face : The face (BRepFace object) to create the axis normal to.
        pointEntity : A construction point, sketch point or vertex the axis passes through. This point does not have to lie on the face.
        Returns true if the creation of the ConstructionAxisInput is successful.
        """
        return bool()

    creationOccurrence = property(_get_creationOccurrence, _set_creationOccurrence,
                                  doc="In order for geometry to be transformed correctly, an Occurrence for creation needs to be specified when the ConstructionAxis is created based on geometry (e.g. a straight edge) in another component AND (the ConstructionAxis) is not in the root component. The CreationOccurrence is analogous to the active occurrence in the UI")
    targetBaseOrFormFeature = property(_get_targetBaseOrFormFeature, _set_targetBaseOrFormFeature,
                                       doc="When creating a construction axis that is owned by a base or form feature, set this property to the base or form feature you want to associate the new construction plane with. By default, this is null, meaning it will not be associated with a base or form feature. Because of a current limitation, if you want to create a construction axis associated with a base or form feature, you must set this property AND call the edit method of the base or form feature, create the feature, and then call the finishEdit method of the base or form feature. The base or form feature must be in an 'edit' state to be able to add any additional items to it.")


class ConstructionPlane(core.Base):
    """
    ConstructionPlane Object
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPlane()

    def _get_geometry(self):
        return core.Plane()

    def _set_name(self, name):
        pass

    def _get_name(self):
        return str()

    def _get_definition(self):
        return ConstructionPlaneDefinition()

    def _get_isDeletable(self):
        return bool()

    def _get_isParametric(self):
        return bool()

    def _set_isLightBulbOn(self, isLightBulbOn):
        pass

    def _get_isLightBulbOn(self):
        return bool()

    def _get_isVisible(self):
        return bool()

    def _set_displayBounds(self, displayBounds):
        pass

    def _get_displayBounds(self):
        return core.BoundingBox2D()

    def _get_parent(self):
        return core.Base()

    def _get_component(self):
        return Component()

    def _get_timelineObject(self):
        return TimelineObject()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return ConstructionPlane()

    def _get_baseFeature(self):
        return BaseFeature()

    def _get_attributes(self):
        return core.Attributes()

    def _get_healthState(self):
        return FeatureHealthStates()

    def _get_errorOrWarningMessage(self):
        return str()

    def _set_transform(self, transform):
        pass

    def _get_transform(self):
        return core.Matrix3D()

    def deleteMe(self):
        """
        Deletes the construction plane.
        Returns a bool indicating if the delete was successful or not.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return ConstructionPlane()

    geometry = property(_get_geometry, None,
                        doc="Returns a plane that represents the position and orientation of the construction plane. This geometry is defined in the AssemblyContext of this ConstructionPlane.")
    name = property(_get_name, _set_name,
                    doc="Returns the name of the construction plane as it is shown in the browser.")
    definition = property(_get_definition, None,
                          doc="Returns the ConstructionPlaneDefinition object which provides access to the information defining this ConstructionPlane.")
    isDeletable = property(_get_isDeletable, None,
                           doc="Indicates if this construction plane can be deleted. Base construction planes can not be deleted.")
    isParametric = property(_get_isParametric, None, doc="Indicates if this construction plane is parametric or not.")
    isLightBulbOn = property(_get_isLightBulbOn, _set_isLightBulbOn,
                             doc="Indicates if the light bulb (as displayed in the browser) is on. A construction plane will only be visible if it's light bulb, and that of it's containing folder and parent component/s are also on.")
    isVisible = property(_get_isVisible, None,
                         doc="Indicates if the construction plane is visible. This property is affected by the AssemblyContext of the construction plane.")
    displayBounds = property(_get_displayBounds, _set_displayBounds,
                             doc="Gets and sets the display size of the construction plane. The bounding box defines the min and max corners of the plane as defined in the 2D space of the construction plane.")
    parent = property(_get_parent, None,
                      doc="Returns the parent component or base feature. If both the design and the construction plane are parametric, the parent will be a component. If the design is parametric and the construction plane is not, the parent will be a base feature. If the design is not parametric the parent will be a component.")
    component = property(_get_component, None, doc="Returns the component this construction plane belongs to.")
    timelineObject = property(_get_timelineObject, None,
                              doc="Returns the timeline object associated with this construction plane.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly but is already the native object.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    baseFeature = property(_get_baseFeature, None,
                           doc="If this construction plane is associated with a base feature, this property will return that base feature. If it's not associated with a base feature, this property will return null.")
    attributes = property(_get_attributes, None,
                          doc="Returns the collection of attributes associated with this construction plane.")
    healthState = property(_get_healthState, None, doc="Returns the current health state of this construction plane.")
    errorOrWarningMessage = property(_get_errorOrWarningMessage, None,
                                     doc="Returns the error or warning message in the case where the healthState property returns either WarningFeatureHealthState or ErrorFeatureHealthState. Otherwise this property returns an empty string.")
    transform = property(_get_transform, _set_transform,
                         doc="Returns the current position and orientation of the construction plane as a matrix. For a parametric construction plane, this property is read-only. For a construction plane in a direct modeling model or in a base feature, this is read-write and can be used to reposition the constructions plane.")


class ConstructionPlaneDefinition(core.Base):
    """
    A Base class to return the information, possibly parametric, used to define the ConstructionPlane.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPlaneDefinition()

    def _get_parentConstructionPlane(self):
        return ConstructionPlane()

    parentConstructionPlane = property(_get_parentConstructionPlane, None, doc="Returns the ConstructionPlane object")


class ConstructionPlaneInput(core.Base):
    """
    A ConstructionPlaneInput is a throwaway object used to create a ConstructionPlane The usage pattern is: a. create a ConstructionPlaneInput (ConstructionPlanes.CreateInput) b. call one of the member functions to specify how the ConstructionPlane is created c. create the ConstructionPlane (call ConstructionPlanes.Add) d. stop referencing the ConstructionPlaneInput (so it gets deleted).
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPlaneInput()

    def _set_creationOccurrence(self, creationOccurrence):
        pass

    def _get_creationOccurrence(self):
        return Occurrence()

    def _set_targetBaseOrFormFeature(self, targetBaseOrFormFeature):
        pass

    def _get_targetBaseOrFormFeature(self):
        return core.Base()

    def setByPlane(self, plane):
        """
        This input method is for creating a non-parametric construction plane positioned in space as defined by the input Plane object. This method of defining a construction plane is only valid when working in a direct edit model (do not capture design history). This is not valid when working in a parametric model and will fail.
        plane : A transient plane object
        Returns true if the creation of the ConstructionPlaneInput is successful.
        """
        return bool()

    def setByOffset(self, planarEntity, offset):
        """
        This input method is for creating a construction plane that is offset from a planar face or construction plane at a specified distance. This can result in a parametric or non-parametric construction plane depending on whether the parent component is parametric or is a direct edit component.
        planarEntity : A plane, planar face or construction plane from which to create the offset plane
        offset : ValueInput object that specifies the offset distance for the plane
        Returns true if the creation of the ConstructionPlaneInput is successful.
        """
        return bool()

    def setByAngle(self, linearEntity, angle, planarEntity):
        """
        This input method is for creating a construction plane through an edge, axis or line at a specified angle. This can result in a parametric or non-parametric construction plane depending on whether the parent component is parametric or is a direct edit component.
        linearEntity : The axis about which to rotate the plane
        angle : The angle at which to create the plane
        planarEntity : The planar face or construction plane the angle is measured from.
        Returns true if the creation of the ConstructionPlaneInput is successful
        """
        return bool()

    def setByTangent(self, tangentFace, angle, planarEntity):
        """
        This input method is for creating a construction plane tangent to a cylindrical or conical face at a specified point. This can result in a parametric or non-parametric construction plane depending on whether the parent component is parametric or is a direct edit component.
        tangentFace : A cylindrical or conical face to create the plane tangent to
        angle : The angle relative to the planarEntity input at which to create the tangent plane
        planarEntity : The planar face or construction plane the tangent is measured from.
        Returns true if the creation of the ConstructionPlaneInput is successful
        """
        return bool()

    def setByTwoPlanes(self, planarEntityOne, planarEntityTwo):
        """
        This input method is for creating a construction plane at the midpoint between two planar faces or construction planes. This can result in a parametric or non-parametric construction plane depending on whether the parent component is parametric or is a direct edit component.
        planarEntityOne : The first planar face or construction plane to create a bisecting plane between
        planarEntityTwo : The second planar face or construction plane to create a bisecting plane between
        Returns true if the creation of the ConstructionPlaneInput is successful. This will fail if the two planes are co-planar.
        """
        return bool()

    def setByTwoEdges(self, linearEntityOne, linearEntityTwo):
        """
        This input method is for creating a construction plane that passes through two coplanar linear entities or axes. Defines a plane by specifying two coplanar linear entities. This can result in a parametric or non-parametric construction plane depending on whether the parent component is parametric or is a direct edit component.
        linearEntityOne : The first of two coplanar linear entities to define the plane
        linearEntityTwo : The second of two coplanar linear entities to define the plane
        Returns true if the creation of the ConstructionPlaneInput is successful. This will fail if the two linear entities are not coplanar.
        """
        return bool()

    def setByThreePoints(self, pointEntityOne, pointEntityTwo, pointEntityThree):
        """
        This input method is for creating a construction plane through three points that define a triangle. This can result in a parametric or non-parametric construction plane depending on whether the parent component is parametric or is a direct edit component.
        pointEntityOne : The first construction point, sketch point or vertex in the triangle
        pointEntityTwo : The second construction point, sketch point or vertex in the triangle
        pointEntityThree : The third construction point, sketch point or vertex in the triangle
        Returns true if the creation of the ConstructionPlaneInput is successful. This will fail if the points do not form a triangle (no two points can be coincident and all three cannot be colinear).
        """
        return bool()

    def setByTangentAtPoint(self, tangentFace, pointEntity):
        """
        This input method is for creating a construction plane tangent to a face and aligned to a point. This can result in a parametric or non-parametric construction plane depending on whether the parent component is parametric or is a direct edit component.
        tangentFace : A face to create the plane tangent to
        pointEntity : A construction point, sketch point or vertex the tangent plane aligns to. This point need not lie on the tangent face.
        Returns true if the creation of the ConstructionPlaneInput is successful.
        """
        return bool()

    def setByDistanceOnPath(self, pathEntity, distance):
        """
        This input method is for creating a construction plane normal to, and at specified distance along, a path defined by an edge or sketch profile. This can result in a parametric or non-parametric construction plane depending on whether the parent component is parametric or is a direct edit component.
        pathEntity : The path can be an edge, sketch curve, or a path of multiple entities.
        distance : The distance is a value from 0 to 1 indicating the position along the path where 0 is at the start and 1 is at the end.
        Returns true if the creation of the ConstructionPlaneInput is successful.
        """
        return bool()

    creationOccurrence = property(_get_creationOccurrence, _set_creationOccurrence,
                                  doc="In order for geometry to be transformed correctly, an Occurrence for creation needs to be specified when the ConstructionPlane is created based on geometry (e.g. a planarEntity) in another component AND (the ConstructionPlane) is not in the root component. The CreationOccurrence is analogous to the active occurrence in the UI")
    targetBaseOrFormFeature = property(_get_targetBaseOrFormFeature, _set_targetBaseOrFormFeature,
                                       doc="When creating a construction plane that is owned by a base or form feature, set this property to the base or form feature you want to associate the new construction plane with. By default, this is null, meaning it will not be associated with a base or form feature. Because of a current limitation, if you want to create a construction plane associated with a base or form feature, you must set this property AND call the edit method of the base or form feature, create the feature, and then call the finishEdit method of the base or form feature. The base or form feature must be in an 'edit' state to be able to add any additional items to it.")


class ConstructionPlanes(core.Base):
    """
    Provides access to the construction planes within a component and provides methods to create new construction planes.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPlanes()

    def _get_count(self):
        return int()

    def _get_component(self):
        return Component()

    def item(self, index):
        """
        Function that returns the specified construction plane using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return ConstructionPlane()

    def itemByName(self, name):
        """
        Returns the specified construction plane using the name of the construction plane as it is displayed in the browser.
        name : The name of the construction plane as it is displayed in the browser
        Returns the specified item or null if an invalid name was specified.
        """
        return ConstructionPlane()

    def createInput(self, occurrenceForCreation):
        """
        Create a ConstructionPlaneInput object that is in turn used to create a ConstructionPlane.
        occurrenceForCreation : A creation occurrence is needed if the input is in another component AND the construction plane is not in the root component. The occurrenceForCreation is analogous to the active occurrence in the UI.
        Returns a ConstructionPlaneInput object
        """
        return ConstructionPlaneInput()

    def add(self, input):
        """
        Creates and adds a new ConstructionPlane using the creation parameters in the ConstructionPlaneInput. If the ConstructionPlaneInput was defined using the setByPlane method then the add will only work in a direct edit model (do not capture design history) and will fail in a parametric model.
        input : A ConstructionPlaneInput object
        Returns the newly created construction plane or null if the creation failed.
        """
        return ConstructionPlane()

    count = property(_get_count, None, doc="Returns the number of construction planes in the collection.")
    component = property(_get_component, None, doc="Returns the component that owns this collection.")


class ConstructionPoint(core.Base):
    """
    ConstructionPoint Object
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPoint()

    def _get_geometry(self):
        return core.Point3D()

    def _set_name(self, name):
        pass

    def _get_name(self):
        return str()

    def _get_definition(self):
        return ConstructionPointDefinition()

    def _get_isDeletable(self):
        return bool()

    def _set_isLightBulbOn(self, isLightBulbOn):
        pass

    def _get_isLightBulbOn(self):
        return bool()

    def _get_isVisible(self):
        return bool()

    def _get_parent(self):
        return core.Base()

    def _get_component(self):
        return Component()

    def _get_isParametric(self):
        return bool()

    def _get_timelineObject(self):
        return TimelineObject()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return ConstructionPoint()

    def _get_baseFeature(self):
        return BaseFeature()

    def _get_attributes(self):
        return core.Attributes()

    def _get_healthState(self):
        return FeatureHealthStates()

    def _get_errorOrWarningMessage(self):
        return str()

    def deleteMe(self):
        """
        Deletes the construction point.
        Returns a bool indicating if the delete was successful or not.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return ConstructionPoint()

    geometry = property(_get_geometry, None,
                        doc="Returns a Point3D object that represents the position of the construction point. The returned geometry is in the AssemblyContext of this ConstructionPoint.")
    name = property(_get_name, _set_name, doc="The name of the construction point as it is displayed in the browser.")
    definition = property(_get_definition, None,
                          doc="Returns the construction point definition object which provides access to the information defining the construction point.")
    isDeletable = property(_get_isDeletable, None,
                           doc="Indicates if this construction point can be deleted. The base construction point cannot be deleted.")
    isLightBulbOn = property(_get_isLightBulbOn, _set_isLightBulbOn,
                             doc="Indicates if the light bulb (as displayed in the browser) is on. A construction point will only be visible if it's light bulb, and that of it's containing folder and parent component/s are also on.")
    isVisible = property(_get_isVisible, None,
                         doc="Gets if the construction point is visible. This property is affected by the AssemblyContext of the construction point.")
    parent = property(_get_parent, None,
                      doc="Returns the parent component or base feature. If both the design and the construction point are parametric, the parent will be a component. If the design is parametric and the construction point is not, the parent will be a base feature. If the design is not parametric the parent will be a component.")
    component = property(_get_component, None, doc="Returns the component this construction point belongs to.")
    isParametric = property(_get_isParametric, None, doc="Indicates if the construction point is parametric.")
    timelineObject = property(_get_timelineObject, None,
                              doc="Returns the timeline object associated with this construction point.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly but is already the native object.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    baseFeature = property(_get_baseFeature, None,
                           doc="If this construction point is associated with a base feature, this property will return that base feature. If it's not associated with a base feature, this property will return null.")
    attributes = property(_get_attributes, None,
                          doc="Returns the collection of attributes associated with this construction point.")
    healthState = property(_get_healthState, None, doc="Returns the current health state of this construction point.")
    errorOrWarningMessage = property(_get_errorOrWarningMessage, None,
                                     doc="Returns the error or warning message in the case where the healthState property returns either WarningFeatureHealthState or ErrorFeatureHealthState. Otherwise this property returns an empty string.")


class ConstructionPointDefinition(core.Base):
    """
    A Base class to return the information (possibly parametric) used to define a ConstructionPoint.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPointDefinition()

    def _get_parentConstructionPoint(self):
        return ConstructionPoint()

    parentConstructionPoint = property(_get_parentConstructionPoint, None, doc="Returns the ConstructionPoint object")


class ConstructionPointInput(core.Base):
    """
    A ConstructionPointInput is a throwaway object used to create a ConstructionPoint The usage pattern is a. create a ConstructionPointInput (ConstructionPoints.CreateInput) b. call one of the member functions to specify how the ConstructionPoint is created c. create the ConstructionPoint (call ConstructionPoints.Add) d. stop referencing the ConstructionPointInput (so it gets deleted).
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPointInput()

    def _set_creationOccurrence(self, creationOccurrence):
        pass

    def _get_creationOccurrence(self):
        return Occurrence()

    def _set_targetBaseOrFormFeature(self, targetBaseOrFormFeature):
        pass

    def _get_targetBaseOrFormFeature(self):
        return core.Base()

    def setByTwoEdges(self, edgeOne, edgeTwo):
        """
        This input method is for creating a construction point at the intersection of the two linear edges or sketch lines. The edges can be B-Rep edges or sketch lines. This can result in a parametric or non-parametric construction point depending on whether the parent component is parametric or is a direct edit component.
        edgeOne : The first B-Rep edge or sketch line
        edgeTwo : The second B-Rep edge or sketch line
        Returns true if the creation of the ConstructionPointInput is successful.
        """
        return bool()

    def setByThreePlanes(self, planeOne, planeTwo, planeThree):
        """
        This input method is for creating a construction point at the intersection of the three planes or planar faces. This can result in a parametric or non-parametric construction point depending on whether the parent component is parametric or is a direct edit component.
        planeOne : The first plane or planar face to intersect
        planeTwo : The second plane or planar face to intersect
        planeThree : The third plane or planar face to intersect
        Returns true if the creation of the ConstructionPointInput is successful.
        """
        return bool()

    def setByEdgePlane(self, edge, plane):
        """
        This input method is for creating a construction point at the intersection of a construction plane, planar face or sketch profile and a linear edge, construction axis or sketch line. This can result in a parametric or non-parametric construction point depending on whether the parent component is parametric or is a direct edit component.
        edge : A linear B-Rep edge, construction axis or sketch line.
        plane : A plane, planar B-Rep face or construction plane.
        Returns true if the creation of the ConstructionPointInput is successful.
        """
        return bool()

    def setByCenter(self, circularEntity):
        """
        This input method is for creating a construction point at the center of a spherical face (sphere or torus), circular edge or sketch arc/circle This can result in a parametric or non-parametric construction point depending on whether the parent component is parametric or is a direct edit component.
        circularEntity : A spherical face (sphere or torus), circular edge or sketch arc/circle
        Returns true if the creation of the ConstructionPointInput is successful.
        """
        return bool()

    def setByPoint(self, point):
        """
        This input method is for creating a construction point on the specified point or vertex. The point can be either a B-Rep vertex, SketchPoint, or a Point3D object. Providing a Point3D object is only valid when working in a direct edit model (do not capture design history). This is not valid when working in a parametric model and will fail. Even when providing a B-Rep vertex, or SketchPoint the result will be non-parametric if the parent component is a direct edit component.
        point : A B-Rep vertex, SketchPoint, or Point object
        Returns true if the creation of the ConstructionPointInput is successful.
        """
        return bool()

    creationOccurrence = property(_get_creationOccurrence, _set_creationOccurrence,
                                  doc="In order for geometry to be transformed correctly, an occurrence for creation needs to be specified when the ConstructionPoint is created based on geometry (e.g. a sketch point) in another component AND (the ConstructionPoint) is not in the root component. The CreationOccurrence is analogous to the active occurrence in the UI")
    targetBaseOrFormFeature = property(_get_targetBaseOrFormFeature, _set_targetBaseOrFormFeature,
                                       doc="When creating a construction point that is owned by a base or form feature, set this property to the base or form feature you want to associate the new construction point with. By default, this is null, meaning it will not be associated with a base or form feature. Because of a current limitation, if you want to create a construction point associated with a base or form feature, you must set this property AND call the edit method of the base or form feature, create the feature, and then call the finishEdit method of the base or form feature. The base or form feature must be in an 'edit' state to be able to add any additional items to it.")


class ConstructionPoints(core.Base):
    """
    Provides access to the construction points within a component and provides methods to create new construction points.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPoints()

    def _get_count(self):
        return int()

    def _get_component(self):
        return Component()

    def item(self, index):
        """
        Function that returns the specified construction point using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return ConstructionPoint()

    def itemByName(self, name):
        """
        Returns the specified construction point using the name of the construction point as it is displayed in the browser.
        name : The name of the construction point as it is displayed in the browser.
        Returns the specified item or null if an invalid name was specified.
        """
        return ConstructionPoint()

    def createInput(self, occurrenceForCreation):
        """
        Create a ConstructionPointInput object that is in turn used to create a ConstructionPoint.
        occurrenceForCreation : A creation occurrence is needed if the input is in another component AND the construction point is not in the root component. The occurrenceForCreation is analogous to the active occurrence in the UI.
        Returns a ConstructionPointInput object
        """
        return ConstructionPointInput()

    def add(self, input):
        """
        Creates a new construction point. If the ConstructionPointInput was defined using the setByPoint method using a Point3D object then the add will only work in a direct edit model (do not capture design history) and will fail in a parametric model.
        input : A ConstructionPointInput object
        Returns the newly created construction point or null if the creation failed.
        """
        return ConstructionPoint()

    count = property(_get_count, None, doc="The number of construction points in the collection.")
    component = property(_get_component, None, doc="The component that owns this collection.")


class ContactSet(core.Base):
    """
    Represents a contact set in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ContactSet()

    def _set_name(self, name):
        pass

    def _get_name(self):
        return str()

    def _set_occurencesAndBodies(self, occurencesAndBodies):
        pass

    def _get_occurencesAndBodies(self):
        return core.Base()

    def _set_isSuppressed(self, isSuppressed):
        pass

    def _get_isSuppressed(self):
        return bool()

    def deleteMe(self):
        """
        Deletes this contact set from the design.
        Returns true if the delete was succcessful.
        """
        return bool()

    name = property(_get_name, _set_name, doc="Gets and sets the name of the contact set.")
    occurencesAndBodies = property(_get_occurencesAndBodies, _set_occurencesAndBodies,
                                   doc="Gets and sets the group of Occurrence and/or BRepBody objects that are part of this contact set.")
    isSuppressed = property(_get_isSuppressed, _set_isSuppressed,
                            doc="Gets and sets if this contact set is currently suppressed.")


class ContactSets(core.Base):
    """
    Provides access to the existing contact sets in a design and supports creating new contact sets.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ContactSets()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Returns the specified contact set using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return ContactSet()

    def itemByName(self, name):
        """
        name :
        """
        return ContactSet()

    def add(self, occurrencesAndBodies):
        """
        Creates a new contact set for the provided occurrences and/or bodies.
        occurrencesAndBodies : An array of Occurrence or BRepBody objects that will be included in the contact set. All occurrences and bodies must be in the context of the root component.
        Returns the newly created ContactSet or null in the case of failure.
        """
        return ContactSet()

    count = property(_get_count, None, doc="Returns the number of contacts sets in the design.")


class CopyPasteBodies(core.Base):
    """
    Collection that provides access to all of the existing copy-paste features in a design. These are created in the UI by copying and then pasting a B-Rep body.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CopyPasteBodies()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified Copy/Paste Body feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return CopyPasteBody()

    def itemByName(self, name):
        """
        Function that returns the specified Copy/Paste Body feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return CopyPasteBody()

    def add(self, sourceBody):
        """
        Copies the specified body into the component that owns this CopyPasteBodies collection.
        sourceBody : Either an ObjectCollection of BRepBodies or a single BRepBody object to copy.
        Returns the newly created BRepBody object or null in the case of failure.
        """
        return CopyPasteBody()

    count = property(_get_count, None, doc="The number of Copy/Paste Body features in the collection.")


class CustomGraphicsBillBoard(core.Base):
    """
    Used to specify if the orientation of custom graphics are defined relative to the screen instead of model space. This is commonly used for legends and symbols that you want to always face the user, even as the camera is rotated.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsBillBoard()

    @staticmethod
    def create(anchorPoint):
        """
        Creates a new CustomGraphicsBillBoard object that can be used when calling the billBoarding property of the CustomGraphicsEntity object to specify the billboarding behavior of some custom graphics. Once created you can assign it to a custom graphics entity using its billBoarding property.
        anchorPoint : Specifies the coordinate that the graphics will anchor to. The anchor point is the point where the custom graphics are anchored in world space. As the user manipulates the camera and rotates around the model, making it appear that world space is rotating, the graphics remain facing the camera and the anchor point defines the common location between world space and the graphics. For graphics where the If the isViewDependent property of the graphics entity is true, then the anchor point is defined in pixels relative to the upper-left corner of the view and the z component of the input point is ignored.
        Returns the newly created CustomGraphicsBillBoard object or null in the case of failure. This can be assigned to a custom graphics entity using its billBoarding property.
        """
        return CustomGraphicsBillBoard()

    def _set_anchorPoint(self, anchorPoint):
        pass

    def _get_anchorPoint(self):
        return core.Point3D()

    def _set_billBoardStyle(self, billBoardStyle):
        pass

    def _get_billBoardStyle(self):
        return CustomGraphicsBillBoardStyles()

    def _set_axis(self, axis):
        pass

    def _get_axis(self):
        return core.Vector3D()

    anchorPoint = property(_get_anchorPoint, _set_anchorPoint,
                           doc="Specifies the coordinate in model or view space that the graphics will anchor to. For graphics that represent a label, this will typically be the point where the label attaches to the model. A CustomGraphicsAnchorPoint can be created using the static create method on the CustomGraphicsAnchorPoint object.")
    billBoardStyle = property(_get_billBoardStyle, _set_billBoardStyle,
                              doc="Specifies the type of billboarding to use. When a new CustomGraphicsBillBoard object is created this defaults to ScreenBillBoardStyle so the graphics will all be facing the view plane. It can also be set to an arbitrary plane by setting this to AxialBillBoardStyle and can be defined so that it never appear backwards by setting it to RightReadingBillBoardStyle.")
    axis = property(_get_axis, _set_axis,
                    doc="When the billBoardStyle property is set to AxialBillBoardStyle, this is used to control the direction of the graphics. Otherwise it uses the x axis of the view.")


class CustomGraphicsBillBoardStyles:
    """
    Specifies the different styles that can be used to control billboarding.
    """

    def __init__(self):
        pass

    ScreenBillBoardStyle = 0
    AxialBillBoardStyle = 1
    RightReadingBillBoardStyle = 2


class CustomGraphicsBRepEdges(core.Base):
    """
    A collection of CustomGraphicsBRepEdge objects associated with a specific CustomGraphics body object.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsBRepEdges()


class CustomGraphicsBRepFaces(core.Base):
    """
    A collection of CustomGraphicsBRepFace objects associated with a specific CustomGraphicsBRepBody object.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsBRepFaces()


class CustomGraphicsBRepVertices(core.Base):
    """
    A collection of CustomGraphicsBRepVertex objects associated with a specific CustomGraphics body object.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsBRepVertices()


class CustomGraphicsColorEffect(core.Base):
    """
    The base class for all custom graphics color effects.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsColorEffect()


class CustomGraphicsCoordinates(core.Base):
    """
    Represents coordinates that are used to define vertices in custom graphics.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsCoordinates()

    @staticmethod
    def create(coordinates):
        """
        Static method that creates a CustomGraphicsCoordinates object which can be used as input to various custom graphics methods.
        coordinates : An array of doubles where the values are the x, y, z components of each coordinate where the unit of measure is centimeters.
        Returns the created CustomGraphicsCoordinates object or null in the case of failure.
        """
        return CustomGraphicsCoordinates()

    def _set_coordinates(self, coordinates):
        pass

    def _get_coordinates(self):
        return float()

    def _get_coordinateCount(self):
        return int()

    def _set_colors(self, colors):
        pass

    def _get_colors(self):
        return int

    def getCoordinate(self, index):
        """
        Gets the coordinate at the specified index.
        index : The index of the coordinate to return. The first coordinate has an index of 0.
        Returns the coordinate as a Point3D object.
        """
        return core.Point3D()

    def setCoordinate(self, index, coordinate):
        """
        Sets the coordinate at the specified index.
        index : The index of the coordinate to set. The first coordinate has an index of 0.
        coordinate : The coordinate value as a Point3D object.
        Returns true if setting the coordinate was successful.
        """
        return bool()

    def getColor(self, index):
        """
        Gets the color assigned to the coordinate at the specified index.
        index : The index of the color to return. The first color has an index of 0.
        Returns the color associated with the index. Can also return null in the case where there is no color assigned.
        """
        return core.Color()

    def setColor(self, index, color):
        """
        Sets the color of the coordinate at the specified index.
        index : The index of the coordinate to set. The first coordinate has an index of 0.
        color : The color value as a Color object.
        Returns true if setting the color was successful.
        """
        return bool()

    coordinates = property(_get_coordinates, _set_coordinates,
                           doc="Gets and sets the coordinate data associated with this CustomGraphicsCoordinates object. This data represents the x, y, z components of the coordinates where the unit of measure is centimeters.")
    coordinateCount = property(_get_coordinateCount, None,
                               doc="Returns the number of coordinates defined in the CustomGraphicsCoordinates object.")
    colors = property(_get_colors, _set_colors,
                      doc="Gets and sets the colors assoicated with the coordinate data. This is used when a mesh is displayed using per-vertex coloring. The color at each vertex is represented by four values where they are the red, green, blue, and alpha values. This should contain the same number of colors as vertices.")


class CustomGraphicsCullModes:
    """
    The various culling modes supported by custom graphics.
    """

    def __init__(self):
        pass

    CustomGraphicsCullFront = 0
    CustomGraphicsCullBack = 1
    CustomGraphicsCullNone = 2


class CustomGraphicsEntity(core.Base):
    """
    The base class for all visible and selectable custom graphics objects.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsEntity()

    def _set_isVisible(self, isVisible):
        pass

    def _get_isVisible(self):
        return bool()

    def _set_isSelectable(self, isSelectable):
        pass

    def _get_isSelectable(self):
        return bool()

    def _set_transform(self, transform):
        pass

    def _get_transform(self):
        return core.Matrix3D()

    def _set_depthPriority(self, depthPriority):
        pass

    def _get_depthPriority(self):
        return int()

    def _set_cullMode(self, cullMode):
        pass

    def _get_cullMode(self):
        return CustomGraphicsCullModes()

    def _set_color(self, color):
        pass

    def _get_color(self):
        return CustomGraphicsColorEffect()

    def _get_parent(self):
        return core.Base()

    def _set_id(self, id):
        pass

    def _get_id(self):
        return str()

    def _get_boundingBox(self):
        return core.BoundingBox3D()

    def _set_billBoarding(self, billBoarding):
        pass

    def _get_billBoarding(self):
        return CustomGraphicsBillBoard()

    def _set_viewPlacement(self, viewPlacement):
        pass

    def _get_viewPlacement(self):
        return CustomGraphicsViewPlacement()

    def _set_viewScale(self, viewScale):
        pass

    def _get_viewScale(self):
        return CustomGraphicsViewScale()

    def deleteMe(self):
        """
        Deletes the entity from the custom graphics group.
        Returns true if the deletion was successful.
        """
        return bool()

    def setOpacity(self, opacity, isOverride):
        """
        Sets the opacity of the graphics entity. By default, when a new entity is it is completely opaque and does not override the opacity defined by the material.
        opacity : The opacity value where 1.0 is completely opaque and 0.0 is completely transparent.
        isOverride : Indicates if this entities opacity will override the opacity defined by the material. If true, it will override the material opacity and if false the opacity values will accumulate.
        Returns true if setting the opacity information was successful.
        """
        return bool()

    def getOpacity(self):
        """
        Gets the opacity of the graphics entity.
        opacity : The opacity value where 1.0 is completely opaque and 0.0 is completely transparent.
        isOverride : Indicates if this entities opacity will override the opacity defined by the material. If true, it will override the material opacity and if false the opacity values will accumulate.
        Returns true if getting the opacity information was successful.
        """
        return bool(), float(), bool()

    isVisible = property(_get_isVisible, _set_isVisible,
                         doc="Gets and sets if the graphics entity is visible in the graphics window. By default, when a new entity is created it is visible.")
    isSelectable = property(_get_isSelectable, _set_isSelectable,
                            doc="Gets and sets if the graphics entity is selectable within the graphics window. By default, when a new entity is created it is selectable.")
    transform = property(_get_transform, _set_transform,
                         doc="Gets and sets the transform associated with the graphics entity. When a new graphics entity is created its default transform is an identity matrix which results in the graphics entity being displayed in model space using the original coordinate data used to define the entity.")
    depthPriority = property(_get_depthPriority, _set_depthPriority,
                             doc="Gets and sets the depth priority associated with the graphics entity. The depth priority defines how one graphics entity will be drawn with respect to another entity. This is useful when there are entities that lie in the same space so it's ambiguous which should be drawn on the other. For example, if you draw a curve on a planar mesh and want the curve to be completely visible. You can set the depth priority of the curve to be greater than the mesh so it will be drawn after the mesh and will remain visible. When a new graphics entity is created it's default depth priority is 0.")
    cullMode = property(_get_cullMode, _set_cullMode,
                        doc="Gets and sets the culling model to use when rendering the entity. Culling is used when the entity contains a mesh or B-Rep faces and defines which sides of the mesh or face are rendered. This is primarily used for a watertight mesh or solid B-Rep so that the 'inside' of the faces is not rendered since it's never visible to the user. When a new graphics entity is created its default cull mode is CustomGraphicsCullBack which will optimize the rendering of 'solid' meshes so the inside is not rendered.")
    color = property(_get_color, _set_color,
                     doc="Gets and sets the current color definition for this entity. The color of custom graphics can be defined in many ways; solid color, simple material, and appearance.")
    parent = property(_get_parent, None,
                      doc="Returns the parent Component for a top-level group or the CustomGraphicsGroup object for graphics entities and child groups.")
    id = property(_get_id, _set_id,
                  doc="An id you can specify for the entity. By default, all new graphics entities do not have an id and this property will return an empty string. But in cases where entities will be selected, assigning an id can make understanding what was selected much easier.")
    boundingBox = property(_get_boundingBox, None,
                           doc="Returns a box oriented parallel to the world x-y-x axes that contains the graphics entity. Depending on whether the graphics are drawn in model space or screen space this will return the bounding box in either centimeters (model) or pixels (screen). In the case where it returns the bounding box in pixel space, the Z coordinates of the box will be 0 and can be ignored.")
    billBoarding = property(_get_billBoarding, _set_billBoarding,
                            doc="Gets and sets the billboarding behavior of this custom graphics entity. To define billboarding you can set this property using a CustomGraphicsBillBoard objects that you statically create using the create method of the CustomGraphicsBillBoard class. To remove billboarding from this entity you can set this property to null. Billboarding is used to specify that the orientation of custom graphics is defined relative to the screen instead of model space. This is commonly used for legends and symbols that you want to always face the user, even as the camera is rotated.")
    viewPlacement = property(_get_viewPlacement, _set_viewPlacement,
                             doc="Gets and sets the graphics view placement being applied to this graphics entity. A CustomGraphicsViewPlacement object can be created using the static create method of the class. When assigned to a graphics entity the position of the graphics is defined relative to the view in 2D view space (pixels) rather than in 3D model space (centimeters).")
    viewScale = property(_get_viewScale, _set_viewScale,
                         doc="Gets and sets the graphics view scale being applied to this graphics entity. A CustomGraphicsViewScale object can be created using the static create method of the class. When assigned to a graphics entity the size of the graphics entity is defined in view space (pixels) instead of model space (centimeters).")


class CustomGraphicsGroups(core.Base):
    """
    Provides access to a set of graphics groups that are either associated with a component or owned by another CustomGraphicsGroup object. This object also supports the creation of new custom graphics groups.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsGroups()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified graphics group using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return CustomGraphicsGroup()

    def add(self):
        """
        Creates a new, empty CustomGraphicsGroup.
        Returns the new CustomGraphicsGroup object or null in the case of a failure.
        """
        return CustomGraphicsGroup()

    count = property(_get_count, None, doc="Returns the number of graphics groups in the collection.")


class CustomGraphicsPointTypes:
    """
    A list of predefined point images that you can use for a CustomGraphicsPointSet.
    """

    def __init__(self):
        pass

    UserDefinedCustomGraphicsPointType = 0
    PointCloudCustomGraphicsPointType = 1


class CustomGraphicsViewPlacement(core.Base):
    """
    Positions custom graphics relative to one of the four corners of the view. Graphics positioned this way will always appear on top of the model graphics. This is typically used to display legends are small interactive tools.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsViewPlacement()

    @staticmethod
    def create(anchorPoint, viewCorner, viewPoint):
        """
        Creates a new CustomGraphicsViewPlacement object that can be used when setting the viewPlacement property of a custom graphics entity to specify the billboarding behavior.
        anchorPoint : The position within the defined graphics that will serve as the anchor. This is the location on the graphics that will be positioned at the specified view point.
        viewCorner : Defines which of the four corners of the view the graphics are drawn relative to.
        viewPoint : A 2D point in the view that defines the position of the graphics. This is relative to the corner and is in pixels. The x and y directions vary for each of the corners. These directions are only used to position the 2D point and do not affect the standard coordinate system the graphics were drawn in. upperLeftViewCorner - The x direction is to the right and y is down. upperRightViewCorner - The x direction is to the left and y is down. lowerLeftViewCorner - The x direction is to the right and y is up. lowerRightViewCorner - The x direction is to the left and y is up.
        Returns the newly created CustomGraphicsViewPlacement object or null in the case of failure. This can then be assigned to any custom graphics entity using its viewPlacement property.
        """
        return CustomGraphicsViewPlacement()

    def _set_anchorPoint(self, anchorPoint):
        pass

    def _get_anchorPoint(self):
        return core.Point3D()

    def _set_viewPoint(self, viewPoint):
        pass

    def _get_viewPoint(self):
        return core.Point2D()

    def _set_viewCorner(self, viewCorner):
        pass

    def _get_viewCorner(self):
        return ViewCorners()

    anchorPoint = property(_get_anchorPoint, _set_anchorPoint,
                           doc="Gets and sets the position within the defined graphics that serves as the anchor. This is the location on the graphics that is positioned at the specified view point.")
    viewPoint = property(_get_viewPoint, _set_viewPoint,
                         doc="A 2D point in the view that defines the position of the graphics. This is relative to the corner and is in pixels. The x and y directions vary for each of the corners. These directions are only used to position the 2D point and do not affect the standard coordinate system the graphics were drawn in. upperLeftViewCorner - The x direction is to the right and y is down. upperRightViewCorner - The x direction is to the left and y is down. lowerLeftViewCorner - The x direction is to the right and y is up. lowerRightViewCorner - The x direction is to the left and y is up.")
    viewCorner = property(_get_viewCorner, _set_viewCorner,
                          doc="Gets and sets which corner the graphics are positioned relative to.")


class CustomGraphicsViewScale(core.Base):
    """
    Specifies that custom graphics are to be scaled relative to the view (pixels) and not model space. If this is applied to some custom graphics then they will stat the same size on the screen regardless of the user zooming in or out. This is commonly used for glyphs and other interactive widgets so they don't don't get too large or too small.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsViewScale()

    @staticmethod
    def create(pixelScale, anchorPoint):
        """
        Creates a new CustomGraphicsViewScale object that can be used when setting the viewScale property of a custom graphics entity to specify the scaling behavior.
        pixelScale : Defines the scale of the custom graphics relative to the view. If a custom graphics line is defined to be 100 units long it would usually display as 100 cm long. When it is view scaled with a pixel scale of 1 it will display as 100 pixels long.
        anchorPoint : Defines the point in the graphics that defines the origin of the scaling. The graphics will be scaled up or down relative to that point.
        Returns the newly created CustomGraphicsViewScale object or null in the case of failure. This can then be assigned to any custom graphics entity using its viewScale property.
        """
        return CustomGraphicsViewScale()

    def _set_pixelScale(self, pixelScale):
        pass

    def _get_pixelScale(self):
        return float()

    def _set_anchorPoint(self, anchorPoint):
        pass

    def _get_anchorPoint(self):
        return core.Point3D()

    pixelScale = property(_get_pixelScale, _set_pixelScale,
                          doc="Gets and sets the scale of the custom graphics relative to the view. If a custom graphics line is defined to be 100 units long it would usually display as 100 cm long. When it is view scaled with a pixel scale of 1 it will display as 100 pixels long.")
    anchorPoint = property(_get_anchorPoint, _set_anchorPoint,
                           doc="Gets and sets the point in the graphics that defines the origin of the scaling. The graphics will be scaled up or down relative to that point.")


class CutPasteBodies(core.Base):
    """
    Collection that provides access to all of the existing cut-paste features in a design. These are created in the UI by cutting and then pasting a B-Rep body.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CutPasteBodies()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified Cut/Paste Body feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return CutPasteBody()

    def itemByName(self, name):
        """
        Function that returns the specified Cut/Paste Body feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return CutPasteBody()

    def add(self, sourceBody):
        """
        Cuts and copies the specififed body into the component that owns this CutPasteBodies collection. This is effectively the equivalent of moving a body.
        sourceBody : Either an ObjectCollection of BRepBodies or a single BRepBody object to cut.
        Returns the newly created BRepBody object or null in the case of failure.
        """
        return CutPasteBody()

    count = property(_get_count, None, doc="The number of Cut/Paste Body features in the collection.")


class CylinderFeatures(core.Base):
    """
    Collection that provides access to all of the existing cylinder features in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CylinderFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified cylinder feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return CylinderFeature()

    def itemByName(self, name):
        """
        Function that returns the specified cylinder feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return CylinderFeature()

    count = property(_get_count, None, doc="The number of cylinder features in the collection.")


class DefaultDesignTypeOptions:
    """
    The valid options for the Design History (default design type) setting.
    """

    def __init__(self):
        pass

    PromptForDesignTypeOption = 0
    DirectDesignTypeOption = 1
    ParametricDesignTypeOption = 2


class DefaultWorkspaces:
    """
    The valid options for the Default workspaces setting.
    """

    def __init__(self):
        pass

    ModelWorkspace = 0
    SculptWorkspace = 1
    PatchWorkspace = 2


class DeleteFaceFeatures(core.Base):
    """
    Collection that provides access to all of the existing DeleteFaceFeature features in a component and supports the ability to create new DeleteFaceFeature features. The SurfaceDeleteFaceFeature and DeleteFaceFeature differ in that the SurfaceDeleteFaceFeature can delete any face without any restrictions. If the body is a solid, it will become a surface when the first face is deleted. The specified face is deleted without any other changes being made to the body. The DeleteFaceFeature deletes the specified face and also modifies the other faces in the body to heal or fill in the area of the deleted face. This means that a solid body will remain solid.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return DeleteFaceFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified DeleteFaceFeature object using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return DeleteFaceFeature()

    def itemByName(self, name):
        """
        Function that returns the specified DeleteFaceFeature object using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return DeleteFaceFeature()

    def add(self, facesToDelete):
        """
        Creates a new SurfaceDeleteFace feature. This deletes the specified faces from their bodies and attempts to heal the body. The method will fail if the body cannot be healed. This is equivalent to selecting and deleting faces when in the Patch workspace.
        facesToDelete : A single BRepFace or an ObjectCollection containing multiple BRepFace objects.
        Returns the newly created DeleteFaceFeature object or null if the creation failed.
        """
        return DeleteFaceFeature()

    count = property(_get_count, None, doc="The number of DeleteFaceFeature objects in the collection.")


class DeleteMeError:
    """
    Specific error types for DeleteMe methods.
    """

    def __init__(self):
        pass

    ParameterReferencedByOtherParameterError = 0


class Design(core.Product):
    """
    Object that represents an open Fusion 360 design. This derives from the Design base class and adds the Fusion 360 specific functionality.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return Design()

    def _set_designType(self, designType):
        pass

    def _get_designType(self):
        return DesignTypes()

    def _get_rootComponent(self):
        return Component()

    def _get_allComponents(self):
        return Components()

    def _get_activeEditObject(self):
        return core.Base()

    def _get_activeComponent(self):
        return Component()

    def _get_snapshots(self):
        return Snapshots()

    def _get_timeline(self):
        return Timeline()

    def _get_userParameters(self):
        return UserParameters()

    def _get_allParameters(self):
        return ParameterList()

    def _get_fusionUnitsManager(self):
        return FusionUnitsManager()

    def _get_exportManager(self):
        return ExportManager()

    def _get_isRootComponentActive(self):
        return bool()

    def _get_materials(self):
        return core.Materials()

    def _get_appearances(self):
        return core.Appearances()

    def _get_activeOccurrence(self):
        return Occurrence()

    def _get_contactSets(self):
        return ContactSets()

    def _set_isContactAnalysisEnabled(self, isContactAnalysisEnabled):
        pass

    def _get_isContactAnalysisEnabled(self):
        return bool()

    def _set_isContactSetAnalysis(self, isContactSetAnalysis):
        pass

    def _get_isContactSetAnalysis(self):
        return bool()

    def activateRootComponent(self):
        """
        Makes the root component the active component in the user interface. This is the same as enabling the radio button next to the root component in the browser.
        Returns true if the activation was successful.
        """
        return bool()

    def createInterferenceInput(self, entities):
        """
        Creates an InterferenceInput object. This object collects the entities and options that are used when calculating interference. To analyze interference you first create an InterferenceInput supplying the entities and set any other settings and then provide this object as input to the analyzeInterference method.
        entities : An ObjectCollection containing the BRepBody and/or Occurrence entities that will be used in the interference calculation. All entities must be in the context of the root component of the top-level design.
        Returns an InterferenceInput object which you can use to set any other interference settings and then use as input to the analyzeInterference method to calculate the interference. Returns null if the creation failed.
        """
        return InterferenceInput()

    def analyzeInterference(self, input):
        """
        Calculates the interference between the input bodies and/or occurrences.
        input : An InterferenceInput that defines all of the necessary input needed to calculate the interference. An InterferenceInput object is created using the createInterferenceInput method.
        Returns an InterferenceResults object that can be used to examine the interference results.
        """
        return InterferenceResults()

    def areaProperties(self, inputs, accuracy):
        """
        Returns the AreaProperties object that has properties for getting the area, perimeter, centroid, etc for a collection of 2D sketch profiles and/or planar surfaces that all lie on the same plane.
        inputs : A collection of one or more 2D sketch profile and/or planar surface input objects to perform the calculations on. Supported input object types are 2D closed sketch profiles and planar surfaces. Object must all lie on the same plane. Calculation results reflect the sums of the input objects (i.e. total area of multiple sketch profiles)
        accuracy : Specifies the desired level of computational accuracy of the property calculations. The default value of 'LowCalculationAccuracy' returns results within a +/- 1% error margin.
        Returns an AreaProperties object that can be used to examine the area results.
        """
        return AreaProperties()

    def physicalProperties(self, inputs, accuracy):
        """
        Returns the PhysicalProperties object that has properties for getting the area, density, mass, volume, moments, etc for a collection of 3D solid objects.
        inputs : A collection of one or more 3D solid input objects to perform the calculations on. Supported input object types are Components, Occurrences and BRepBodies. Calculation results reflect the sums of the input objects (i.e. total volume of multiple bodies)
        accuracy : Specifies the desired level of computational accuracy of the property calculations. The default value of 'LowCalculationAccuracy' returns results within a +/- 1% error margin.
        """
        return PhysicalProperties()

    designType = property(_get_designType, _set_designType,
                          doc="Gets and sets the current design type (DirectDesignType or ParametricDesignType) Changing an exising design from ParametricDesignType to DirectDesignType will result in the timeline and all design history being removed and further operations will not be captured in the timeline.")
    rootComponent = property(_get_rootComponent, None, doc="Returns the root Component")
    allComponents = property(_get_allComponents, None,
                             doc="Returns the Components collection that provides access to existing components in a design")
    activeEditObject = property(_get_activeEditObject, None,
                                doc="Returns the current edit target as seen in the user interface. This edit target is defined as the container object that will be added to if something is created. For example, a component can be an edit target so that when new bodies are created they are added to that component. A sketch can also be an edit target.")
    activeComponent = property(_get_activeComponent, None,
                               doc="Returns the component that is current being edited. This can return the root component or another component within the design.")
    snapshots = property(_get_snapshots, None,
                         doc="Returns the Snapshots object associated with this design which provides access to the existing snapshots and the creation of new snapshots.")
    timeline = property(_get_timeline, None, doc="Returns the timeline associated with this design.")
    userParameters = property(_get_userParameters, None, doc="Returns the collection of User Parameters in a design")
    allParameters = property(_get_allParameters, None,
                             doc="Returns a read only list of all parameters in the design. This includes the user parameters and model parameters from all components in this design. The parameters from Externally Referenced components are NOT included because they are in actuality, separate designs.")
    fusionUnitsManager = property(_get_fusionUnitsManager, None,
                                  doc="Returns a specialized UnitsManager that can set the default length units and work with parameters.")
    exportManager = property(_get_exportManager, None,
                             doc="Returns the ExportManager for this design. You use the ExportManager to export the current design in various formats.")
    isRootComponentActive = property(_get_isRootComponentActive, None,
                                     doc="Gets whether the root component is the active edit target in the user interface. This is the same as checking the state of the radio button next to the root compoonent in the browser. To activate the root component use the ActivateRootComponent method.")
    materials = property(_get_materials, None, doc="Returns the materials contained in this document.")
    appearances = property(_get_appearances, None, doc="Returns the appearances contained in this document.")
    activeOccurrence = property(_get_activeOccurrence, None,
                                doc="Returns the occurrence that is currently activated, if any. This can return null in the case where no occurrence is activated and the root component is active.")
    contactSets = property(_get_contactSets, None, doc="Returns the contact sets associated with this design.")
    isContactAnalysisEnabled = property(_get_isContactAnalysisEnabled, _set_isContactAnalysisEnabled,
                                        doc="Gets and sets whether contact analysis is enabled for all components. This is the equivalent of the 'Disable Contact / Enable Contact' command. If this if True then any contact analysis defined (either all or contact sets) is enabled. if False, then no contact analysis is performed.")
    isContactSetAnalysis = property(_get_isContactSetAnalysis, _set_isContactSetAnalysis,
                                    doc="Gets and sets whether contact analysis is done using contact sets or between all bodies, independent of any contact sets. If True and the isContactAnalysisEnabled property is True then contact analysis is performed using contact sets. If False and isContactAnalysisEnabled is True, then contact analysis is performed between all bodies. If isContactAnalysisEnabled is False then no contact analysis is performed.")


class DesignTypes:
    """
    Fusion 360 design types
    """

    def __init__(self):
        pass

    DirectDesignType = 0
    ParametricDesignType = 1


class DimensionOrientations:
    """
    The different dimension orientations.
    """

    def __init__(self):
        pass

    AlignedDimensionOrientation = 0
    HorizontalDimensionOrientation = 1
    VerticalDimensionOrientation = 2


class DistanceUnits:
    """
    Valid unit types for distance
    """

    def __init__(self):
        pass

    MillimeterDistanceUnits = 0
    CentimeterDistanceUnits = 1
    MeterDistanceUnits = 2
    InchDistanceUnits = 3
    FootDistanceUnits = 4


class DraftFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a draft feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return DraftFeatureInput()

    def _set_inputFaces(self, inputFaces):
        pass

    def _get_inputFaces(self):
        return BRepFace()

    def _set_plane(self, plane):
        pass

    def _get_plane(self):
        return core.Base()

    def _set_isTangentChain(self, isTangentChain):
        pass

    def _get_isTangentChain(self):
        return bool()

    def _set_isDirectionFlipped(self, isDirectionFlipped):
        pass

    def _get_isDirectionFlipped(self):
        return bool()

    def _get_angleOne(self):
        return core.ValueInput()

    def _get_angleTwo(self):
        return core.ValueInput()

    def _get_isSymmetric(self):
        return bool()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    def setSingleAngle(self, isSymmetric, angle):
        """
        Defines the draft to be defined so that a single angle is used for all drafts. If the isSymmetric is true then the faces are split along the parting plane and drafted independently using the same angle.
        isSymmetric : Set to 'true' if the faces are to be split along the plane and drafted symmetrically. This will have the side effect of setting the isSymmetric property to the same value.
        angle : The ValueInput object that defines the angle of the draft. This can be a positive or negative value which will affect the direction of the draft along with the isDirectionFlipped property.
        Returns true if successful
        """
        return bool()

    def setTwoAngles(self, angleOne, angleTwo):
        """
        Defines both angles to use when the surfaces are split along the draft plane and the faces on each side of the plane are drafted independently from the other side.
        angleOne : The ValueInput object that defines the angle for the faces on the first side of the draft plane.
        angleTwo : The ValueInput object that defines the angle for the faces on the second side of the draft plane.
        Returns true if successful
        """
        return bool()

    inputFaces = property(_get_inputFaces, _set_inputFaces,
                          doc="Gets and sets the input faces. If IsTangentChain is true, all the faces that are tangentially connected to the input faces (if any) will also be included.")
    plane = property(_get_plane, _set_plane,
                     doc="Gets and sets the plane that defines the direction in which the draft is applied. This can be a planar BrepFace, or a ConstructionPlane.")
    isTangentChain = property(_get_isTangentChain, _set_isTangentChain,
                              doc="Gets and sets if any faces that are tangentially connected to any of the input faces will also be included in setting InputEntities. It defaults to true.")
    isDirectionFlipped = property(_get_isDirectionFlipped, _set_isDirectionFlipped,
                                  doc="Gets and sets if the direction of the draft is flipped.")
    angleOne = property(_get_angleOne, None,
                        doc="Gets the first, or the only angle in the case of a single angle definition.")
    angleTwo = property(_get_angleTwo, None,
                        doc="Gets the second angle. This can be null in the case where a single angle definition is used.")
    isSymmetric = property(_get_isSymmetric, None,
                           doc="Gets if the draft is symmetric from the draft plane. This only applies in the case where two angles have been specified and should be ignored otherwise.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class DraftFeatures(core.Base):
    """
    Collection that provides access to all of the existing draft features in a component and supports the ability to create new draft features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return DraftFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified draft feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return DraftFeature()

    def createInput(self, inputFaces, plane, isTangentChain):
        """
        Creates a DraftFeatureInput object. Use properties and methods on this object to define the draft you want to create and then use the Add method, passing in the DraftFeatureInput object.
        inputFaces : BRepFace array that contains the faces to which draft will be applied. The picked point on face is always the point returned from pointOnFace property of the first BRepFace in this collection.
        plane : Input object that defines the direction in which the draft is applied. This can be a planar BrepFace, or a ConstructionPlane.
        isTangentChain : A boolean value for setting whether or not faces that are tangentially connected to any of the input faces (if any) will also be included. It defaults to true.
        Returns the newly created DraftFeatureInput object or null if the creation failed.
        """
        return DraftFeatureInput()

    def add(self, input):
        """
        Creates a new draft feature.
        input : A DraftFeatureInput object that defines the desired draft. Use the createInput method to create a new DraftFeatureInput object and then use methods on it (the DraftFeatureInput object) to define the draft.
        Returns the newly created DraftFeature object or null if the creation failed.
        """
        return DraftFeature()

    def itemByName(self, name):
        """
        Function that returns the specified draft feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return DraftFeature()

    count = property(_get_count, None, doc="The number of draft features in the collection.")


class ExportManager(core.Base):
    """
    Provides support for exporting model data to various formats.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ExportManager()

    def createIGESExportOptions(self, filename, geometry):
        """
        Creates an IGESExportOptions object that's used to export a design in IGES format. Creation of the IGESExportOptions object does not perform the export. You must pass this object to the ExportManager.execute method to perform the export. The IGESExportOptions supports any available options when exporting to IGES format.
        filename : The filename of the IGES file to be created.
        geometry : The geometry to export. Valid geometry for this is currently a Component object. This argument is optional and if not specified, it results in the root component and it entire contents being exported.
        The created IGESExportOptions object or null if the creation failed.
        """
        return IGESExportOptions()

    def createSTEPExportOptions(self, filename, geometry):
        """
        Creates an STEPExportOptions object that's used to export a design in STEP format. Creation of the STEPExportOptions object does not perform the export. You must pass this object to the ExportManager.execute method to perform the export. The STEPExportOptions supports any available options when exporting to STEP format.
        filename : The filename of the STEP file to be created.
        geometry : The geometry to export. Valid geometry for this is currently a Component object. This argument is optional and if not specified, it results in the root component and it entire contents being exported.
        The created STEPExportOptions object or null if the creation failed.
        """
        return STEPExportOptions()

    def createSATExportOptions(self, filename, geometry):
        """
        Creates an SATExportOptions object that's used to export a design in SAT format. Creation of the SATExportOptions object does not perform the export. You must pass this object to the ExportManager.execute method to perform the export. The SATExportOptions supports any available options when exporting to SAT format.
        filename : The filename of the SAT file to be created.
        geometry : The geometry to export. Valid geometry for this is currently a Component object. This argument is optional and if not specified, it results in the root component and it entire contents being exported.
        The created SATExportOptions object or null if the creation failed.
        """
        return SATExportOptions()

    def createSMTExportOptions(self, filename, geometry):
        """
        Creates an SMTExportOptions object that's used to export a design in SMT format. Creation of the SMTExportOptions object does not perform the export. You must pass this object to the ExportManager.execute method to perform the export. The SMTExportOptions supports any available options when exporting to SMT format.
        filename : The filename of the SMT file to be created.
        geometry : The geometry to export. Valid geometry for this is currently a Component object. This argument is optional and if not specified, it results in the root component and it entire contents being exported.
        The created SMTExportOptions object or null if the creation failed.
        """
        return SMTExportOptions()

    def createFusionArchiveExportOptions(self, filename, geometry):
        """
        Creates an FusionArchiveExportOptions object that's used to export a design in Fusion 360 archive format. Creation of the FusionArchiveExportOptions object does not perform the export. You must pass this object to the ExportManager.execute method to perform the export. The FusionArchiveExportOptions supports any available options when exporting to Fusion 360 archive format.
        filename : The filename of the Fusion 360 archive file to be created.
        geometry : The geometry to export. Valid geometry for this is currently a Component object. This argument is optional and if not specified, it results in the root component and it entire contents being exported.
        The created FusionArchiveExportOptions object or null if the creation failed.
        """
        return FusionArchiveExportOptions()

    def createSTLExportOptions(self, geometry, filename):
        """
        Creates an STLExportOptions object that's used to export a design in STL format. Creation of the STLExportOptions object does not perform the export. You must pass this object to the ExportManager.execute method to perform the export.
        geometry : The geometry to export. This can be a BRepBody, Occurrence, or the root Component object.
        filename : The filename of the STL file to be created. This is optional and can be left out if the mesh will be opened in a mesh editor.
        The created createSTLExportOptions object or null if the creation failed.
        """
        return STLExportOptions()

    def execute(self, exportOptions):
        """
        Executes the export operation to create the file in the format specified by the input ExportOptions object.
        exportOptions : An ExportOptions object that is created using one of the create methods on the ExportManager object. This defines the type of file and any available options supported for that file type.
        Returns true if the export was successful.
        """
        return bool()


class ExportOptions(core.Base):
    """
    The base class for the different export types. This class is never directly used in an export because you need the specific export type to specify the type of export to be performed.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ExportOptions()

    def _set_filename(self, filename):
        pass

    def _get_filename(self):
        return str()

    def _set_geometry(self, geometry):
        pass

    def _get_geometry(self):
        return core.Base()

    filename = property(_get_filename, _set_filename,
                        doc="Gets and sets the filename that the exported file will be written to. This can be empty in the case of STL export and sending the result to the mesh editor.")
    geometry = property(_get_geometry, _set_geometry,
                        doc="Specifies the geometry to export. This can be Occurrence, or the root Component. For STLExport, we also support BRepBody.")


class ExpressionError:
    """
    The expression of the parameter. Setting this can fail because of an invalid expression or because a cyclic reference is created between parameters.
    """

    def __init__(self):
        pass

    CyclicParameterReferenceError = 0


class ExtendFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a extend feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ExtendFeatureInput()

    def _set_edges(self, edges):
        pass

    def _get_edges(self):
        return core.ObjectCollection()

    def _set_distance(self, distance):
        pass

    def _get_distance(self):
        return core.ValueInput()

    def _set_extendType(self, extendType):
        pass

    def _get_extendType(self):
        return SurfaceExtendTypes()

    def _set_isChainingEnabled(self, isChainingEnabled):
        pass

    def _get_isChainingEnabled(self):
        return bool()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    edges = property(_get_edges, _set_edges, doc="Gets and sets the edges to extend")
    distance = property(_get_distance, _set_distance,
                        doc="Gets and sets the ValueInput object that defines the extend distance")
    extendType = property(_get_extendType, _set_extendType, doc="Gets and sets surface extend type to use")
    isChainingEnabled = property(_get_isChainingEnabled, _set_isChainingEnabled,
                                 doc="Gets and sets if all edges that are tangent or curvature continuous, and end point connected, will be found automatically and extended.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class ExtendFeatures(core.Base):
    """
    Collection that provides access to all of the existing Extend features in a component and supports the ability to create new Extend features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ExtendFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified extend feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return ExtendFeature()

    def createInput(self, edges, distance, extendType, isChainingEnabled):
        """
        Creates a ExtendFeatureInput object. Use properties and methods on this object to define the extend feature you want to create and then use the Add method, passing in the ExtendFeatureInput object.
        edges : The surface edges to extend. Only the outer edges from an open body can be extended. The edges must all be from the same body. Depending on the extend type there can also be some limitations on the edges being input as described below for the extendType argument.
        distance : ValueInput object that defines the distance to extend the face/s. Natural and Tangent Extend types require a positive distance value. Perpendicular Extend Type supports either a positive or negative value to control the direction of the extend. A positive number results in the perpendicular extension being in the same direction as the positive normal of the connected faces.
        extendType : The extension type to use when extending the face(s). Input edges must be connected at endpoints when Tangent or Perpendicular Extend Types are used. Input edges need not be connected when Natural Extend type is used.
        isChainingEnabled : An optional boolean argument whose default is true. If this argument is true, all edges that are tangent or curvature continuous, and end point connected, will be found automatically and include in the set of edges to extend.
        Returns the newly created ExtendFeatureInput object or null if the creation failed.
        """
        return ExtendFeatureInput()

    def add(self, input):
        """
        Creates a new extend feature.
        input : An ExtendFeatureInput object that defines the desired extend feature. Use the createInput method to create a new ExtendFeatureInput object and then use methods on it (the ExtendFeatureInput object) to define the desired options for the extent feature.
        Returns the newly created ExtendFeature object or null if the creation failed.
        """
        return ExtendFeature()

    def itemByName(self, name):
        """
        Function that returns the specified extend feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return ExtendFeature()

    count = property(_get_count, None, doc="The number of Extend features in the collection.")


class ExtentDefinition(core.Base):
    """
    The base class for the various definition objects used to define the extent of a feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ExtentDefinition()

    def _get_parentFeature(self):
        return Feature()

    parentFeature = property(_get_parentFeature, None,
                             doc="Returns the parent feature that this definition is associated with. If this definition has been created statically and is not associated with a feature this property will return null.")


class ExtentDirections:
    """
    List of the valid extent directions.
    """

    def __init__(self):
        pass

    PositiveExtentDirection = 0
    NegativeExtentDirection = 1
    SymmetricExtentDirection = 2


class ExtrudeFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of an extrude feature. This class also provides properties for setting/getting the Profile and Operation of the extrude. The Profile and Operation are defined when the ExtrudeFeatures.createInput method is called so they do not exist as properties on this class.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ExtrudeFeatureInput()

    def _set_profile(self, profile):
        pass

    def _get_profile(self):
        return core.Base()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return FeatureOperations()

    def _set_taperAngle(self, taperAngle):
        pass

    def _get_taperAngle(self):
        return core.ValueInput()

    def _set_creationOccurrence(self, creationOccurrence):
        pass

    def _get_creationOccurrence(self):
        return Occurrence()

    def _set_isSolid(self, isSolid):
        pass

    def _get_isSolid(self):
        return bool()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    def _set_startExtent(self, startExtent):
        pass

    def _get_startExtent(self):
        return ExtentDefinition()

    def _get_extentOne(self):
        return ExtentDefinition()

    def _get_extentTwo(self):
        return ExtentDefinition()

    def _get_taperAngleOne(self):
        return core.ValueInput()

    def _get_taperAngleTwo(self):
        return core.ValueInput()

    def _get_hasTwoExtents(self):
        return bool()

    def _set_participantBodies(self, participantBodies):
        pass

    def _get_participantBodies(self):
        return BRepBody()

    def setDistanceExtent(self, isSymmetric, distance):
        """
        Sets the extrusion extents option to 'Distance'.
        isSymmetric : Set to 'true' for an extrusion symmetrical about the profile plane
        distance : ValueInput object that defines the extrude distance. If the isSymmetric argument is 'false', a positive or negative distance can be used to control the direction.
        Returns true if successful
        """
        return bool()

    def setTwoSidesDistanceExtent(self, distanceOne, distanceTwo):
        """
        Sets the extrusion extents option to 'Two Side'. This method will fail in the case of a non-parametric extrusion.
        distanceOne : ValueInput object that defines the extrude distance for the first side.
        distanceTwo : ValueInput object that defines the extrude distance for the second side.
        Returns true if successful
        """
        return bool()

    def setAllExtent(self, direction):
        """
        Sets the extrusion extents option to 'All' (i.e. the extrusion is through-all, in both directions.) This method will fail in the case of a non-parametric extrusion.
        direction : The direction can be either positive, negative, or symmetric.
        Returns true if successful
        """
        return bool()

    def setOneSideToExtent(self, toEntity, matchShape, directionHint):
        """
        Sets the extrusion Direction option to 'One Side' and the Extents option to 'To' (a specified face)
        toEntity : The entity that defines the 'to' extent. The valid types of entities can vary depending on the type of feature this is being used with. For an extrude it can be a BRepBody, BRepFace, BRepVertex, ConstructionPlane, or ConstructionPoint.
        matchShape : If the matchShape argument is 'true', the toEntity is extended to fully intersect the extrusion.
        directionHint : Specifies the direction of the extrusion. This is only used in the case where there are two possible solutions and the extrusion can hit the toEntity in either direction. An example is if the profile of the extrusion is within a hole. The extrusion will intersect the cylinder of the hole in either direction. Typically there is only a single solution and the direction is determined automatically.
        Returns true if successful.
        """
        return bool()

    def setTwoSidesToExtent(self, toEntityOne, toEntityTwo, matchShape):
        """
        Set the extrusion Direction option to 'Two Side' This method will fail in the case of a non-parametric extrusion.
        toEntityOne : The first entity that defines the 'to' extent. The valid types of entities can vary depending on the type of feature this is being used with. For an extrude it can be a BRepBody, BRepFace, BRepVertex, ConstructionPlane, or ConstructionPoint.
        toEntityTwo : The second entity that defines the 'to' extent. The valid types of entities can vary depending on the type of feature this is being used with. For an extrude it can be a BRepBody, BRepFace, BRepVertex, ConstructionPlane, or ConstructionPoint.
        matchShape : If the matchShape argument is 'true', the toEntity is extended to fully intersect the extrusion.
        Returns true if successful.
        """
        return bool()

    def setOneSideExtent(self, extent, direction, taperAngle):
        """
        Defines the extrusion to go in one direction from the profile. The extent of the extrusion is defined by the extent argument.
        extent : An ExtentDefinition object that defines how the extent of the extrusion is defined. This can be a specified distance (DistanceExtentDefinition), to an entity (ToEntityExtent), or through-all (AllExtentDefinition). These objects can be obtained by using the static create method on the appropriate class.
        direction : Specifies the direction of the extrusion. PositiveExtentDirection and NegativeExtentDirection are valid values. PositiveExtentDirection is in the same direction as the normal of the profile's parent sketch plane.
        taperAngle : Optional argument that specifies the taper angle. If omitted a taper angle of 0 is used.
        Returns true is setting the input to a one sided extent was successful.
        """
        return bool()

    def setTwoSidesExtent(self, sideOneExtent, sideTwoExtent, sideOneTaperAngle, sideTwoTaperAngle):
        """
        Defines the extrusion to go in both directions from the profile. The extent is defined independently for each direction using the input arguments.
        sideOneExtent : An ExtentDefinition object that defines how the extent of the extrusion towards side one is defined. This can be a specified distance (DistanceExtentDefinition), to an entity (ToEntityExtent), or through-all (AllExtentDefinition). These objects can be obtained by using the static create method on the appropriate class.
        sideTwoExtent : An ExtentDefinition object that defines how the extent of the extrusion towards side two is defined. This can be a specified distance (DistanceExtentDefinition), to an entity (ToEntityExtent), or through-all (AllExtentDefinition). These objects can be obtained by using the static create method on the appropriate class.
        sideOneTaperAngle : Optional argument that specifies the taper angle for side one. If omitted a taper angle of 0 is used.
        sideTwoTaperAngle : Optional argument that specifies the taper angle for side two. If omitted a taper angle of 0 is used.
        Returns true is setting the extent was successful.
        """
        return bool()

    def setSymmetricExtent(self, distance, isFullLength, taperAngle):
        """
        Defines the extrusion to go symmetrically in both directions from the profile.
        distance : The distance of the extrusions. This is either the full length of half of the length of the final extrusion depending on the value of the isFullLength property.
        isFullLength : Defines if the value defines the full length of the extrusion or half of the length. A value of true indicates it defines the full length.
        taperAngle : Optional argument that specifies the taper angle. The same taper angle is used for both sides for a symmetric extrusion. If omitted a taper angle of 0 is used.
        Returns true is setting the extent was successful.
        """
        return bool()

    profile = property(_get_profile, _set_profile,
                       doc="Gets and sets the profiles or planar faces used to define the shape of the extrude. This property can return or be set with a single profile, a single planar face, or an ObjectCollection consisting of multiple profiles and planar faces. When an ObjectCollection is used all of the profiles and faces must be co-planar. To create a surface (non-solid) extrusion, you can use the createOpenProfile and createBRepEdgeProfile methods of the Component object to create an open profile. The isSolid property of the ExtrudeFeatureInput property must also be False.")
    operation = property(_get_operation, _set_operation,
                         doc="Gets and sets the type of operation performed by the extrusion.")
    taperAngle = property(_get_taperAngle, _set_taperAngle,
                          doc="Gets and sets the taper angle of the extrusion. This is used to define the taper angle for a single sided and symmetric and defines the angle for side one of a two sided extrusion. This property is initialized with a taper angle of zero. A negative angle will taper the extrusion inward while a positive value will taper the extrusion outward. This property is valid for both parametric and non-parametric extrusions.")
    creationOccurrence = property(_get_creationOccurrence, _set_creationOccurrence,
                                  doc="In order for geometry to be transformed correctly, an Occurrence for creation needs to be specified when the Extrusion is created based on geometry (e.g. a profile and/or face(s)) in another component AND (the Extrusion) is not in the root component. The CreationOccurrence is analogous to the active occurrence in the UI")
    isSolid = property(_get_isSolid, _set_isSolid,
                       doc="Specifies if the extrusion should be created as a solid or surface. If it's a surface then there aren't any end caps and it's open. When a ExtrudeFeature input is created, this is initialized to true so a solid will be created if it's not changed.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")
    startExtent = property(_get_startExtent, _set_startExtent,
                           doc="Gets and sets the extent used to define the start of the extrusion. When a new ExtrudeFeatureInput object is created the start extent is initialized to be the profile plane but you can change it to a profile plane with offset or from an object by setting this property with either a ProfilePlaneWithOffsetStartDefinition or a EntityStartDefinition object. You can get either one of those objects by using the static create method on the class.")
    extentOne = property(_get_extentOne, None,
                         doc="Gets the extent assinged for a single sided extrude or side one of a two-sided extrusion. To set the extent, use one of the set methods on the ExtrudeFeatureInput object.")
    extentTwo = property(_get_extentTwo, None,
                         doc="Gets the extent assinged for side two of the extrusion. If the extrude is single sided extrude this property will return null. The hasTwoExtents property can be used to determine if there are two sides or not. To set the extent, use one of the set methods on the ExtrudeFeatureInput object.")
    taperAngleOne = property(_get_taperAngleOne, None,
                             doc="Gets the value that will be used as the taper angle for a single sided extrusion or side one of a two-sided extrusion. To set the taper angle, use one of the set methods on the ExtrudeFeatureInput object.")
    taperAngleTwo = property(_get_taperAngleTwo, None,
                             doc="Gets the value that will be used as the taper angle for side two of a two-sided extrusion. If the extrusion is single-sided, this property will return null. The hasTwoExtents property can be used to determine if there are two sides or not. To set the taper angle, use one of the set methods on the ExtrudeFeatureInput object.")
    hasTwoExtents = property(_get_hasTwoExtents, None,
                             doc="Property that indicates if the extrusion is a single or two-sided extrusion. If false, the extentTwo and taperAngleTwo properties should not be used.")
    participantBodies = property(_get_participantBodies, _set_participantBodies,
                                 doc="Gets and sets the list of bodies that will participate in the feature when the operation is a cut or intersection. If this property has not been set, the default behavior is that all bodies that are intersected by the feature will participate. This property can return null in the case where the feature has not been fully defined so that possible intersecting bodies can be computed.")


class ExtrudeFeatures(core.Base):
    """
    Collection that provides access to all of the existing extrude features in a design and supports the ability to create new extrude features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ExtrudeFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified extrude feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return ExtrudeFeature()

    def createInput(self, profile, operation):
        """
        Creates a new ExtrudeFeatureInput object that is used to specify the input needed to create a new extrude feature.
        profile : The profile argument can be a single Profile, a single planar face, a single SketchText object, or an ObjectCollection consisting of multiple profiles, planar faces, and sketch texts. When an ObjectCollection is used all of the profiles, faces, and sketch texts must be co-planar. To create a surface (non-solid) extrusion, you can use the createOpenProfile and createBRepEdgeProfile methods of the Component object to create an open profile. You also need to set the isSolid property of the returned ExtrudeFeatureInput property to False.
        operation : The feature operation to perform.
        Returns the newly created ExtrudeFeatureInput object or null if the creation failed.
        """
        return ExtrudeFeatureInput()

    def add(self, input):
        """
        Creates a new extrude feature based on the information defined by the provided ExtrudeFeatureInput object. To create a new extrusion use the createInput function to create a new input object and use the methods and properties on that object to define the required input for an extrusion. Once the information is defined on the input object you can pass it to the Add method to create the extrusion.
        input : The ExtrudeFeatureInput object that specifies the input needed to create a new extrude feature.
        Returns the newly created ExtrudeFeature or null if the creation failed.
        """
        return ExtrudeFeature()

    def itemByName(self, name):
        """
        Function that returns the specified extrude feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return ExtrudeFeature()

    def addSimple(self, profile, distance, operation):
        """
        Creates a basic extrusion that goes from the profile plane the specified distance.
        profile : The profile argument can be a single Profile, a single planar face, a single SketchText object, or an ObjectCollection consisting of multiple profiles, planar faces, and sketch texts. When an ObjectCollection is used all of the profiles, faces, and sketch texts must be co-planar. To create a surface (non-solid) extrusion, you can use the createOpenProfile and createBRepEdgeProfile methods of the Component object to create an open profile. You also need to set the isSolid property of the returned ExtrudeFeatureInput property to False.
        distance : ValueInput object that defines the extrude distance. A positive value extrudes in the positive direction of the sketch plane and negative value is in the opposite direction.
        operation : The feature operation to perform.
        Returns the newly created ExtrudeFeature or null if the creation failed.
        """
        return ExtrudeFeature()

    count = property(_get_count, None, doc="The number of extrude features in the collection.")


class Feature(core.Base):
    """
    Base class object representing all features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return Feature()

    def _set_name(self, name):
        pass

    def _get_name(self):
        return str()

    def _set_isSuppressed(self, isSuppressed):
        pass

    def _get_isSuppressed(self):
        return bool()

    def _get_isParametric(self):
        return bool()

    def _get_faces(self):
        return BRepFaces()

    def _get_parentComponent(self):
        return Component()

    def _get_linkedFeatures(self):
        return FeatureList()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_timelineObject(self):
        return TimelineObject()

    def _get_bodies(self):
        return BRepBodies()

    def _get_attributes(self):
        return core.Attributes()

    def _get_baseFeature(self):
        return BaseFeature()

    def _get_healthState(self):
        return FeatureHealthStates()

    def _get_errorOrWarningMessage(self):
        return str()

    def deleteMe(self):
        """
        Deletes the feature. This works for both parametric and non-parametric features.
        Returns a bool indicating if the delete was successful or not.
        """
        return bool()

    def dissolve(self):
        """
        Dissolves the feature so that the feature information is lost and only the B-Rep geometry defined by the feature remains. This is only valid for non-parametric features.
        Returns a bool indicating if the dissolve was successful or not.
        """
        return bool()

    name = property(_get_name, _set_name,
                    doc="Returns the name of the feature as seen in the browser (non-parametric) or in the timeline (parametric).")
    isSuppressed = property(_get_isSuppressed, _set_isSuppressed,
                            doc="Gets and sets if this feature is suppressed. This is only valid for parametric features.")
    isParametric = property(_get_isParametric, None, doc="Indicates if this feature is parametric or not.")
    faces = property(_get_faces, None,
                     doc="Returns the faces that were created by this feature. This works for both parametric and non-parametric features.")
    parentComponent = property(_get_parentComponent, None, doc="Returns the parent component that owns this feature.")
    linkedFeatures = property(_get_linkedFeatures, None,
                              doc="Returns the set of features that are linked to this feature. The set of linked features are all of the features that were created in various components as the result of a single feature being created in the user interface.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly but is already the native object.")
    timelineObject = property(_get_timelineObject, None,
                              doc="Returns the timeline object associated with this feature.")
    bodies = property(_get_bodies, None,
                      doc="Returns the bodies that were modified or created by this feature. This works for both parametric and non-parametric features. For a BaseFeature this returns the bodies that are owned by the base feature.")
    attributes = property(_get_attributes, None, doc="Returns the collection of attributes associated with this face.")
    baseFeature = property(_get_baseFeature, None,
                           doc="If this feature is associated with a base feature, this property will return that base feature. If it's not associated with a base feature, this property will return null.")
    healthState = property(_get_healthState, None, doc="Returns the current health state of the feature.")
    errorOrWarningMessage = property(_get_errorOrWarningMessage, None,
                                     doc="Returns the error or warning message in the case where the healthState property returns either WarningFeatureHealthState or ErrorFeatureHealthState. Otherwise this property returns an empty string.")


class FeatureExtentTypes:
    """
    Used to indicate which type of extent is used for a feature.
    """

    def __init__(self):
        pass

    OneSideFeatureExtentType = 0
    TwoSidesFeatureExtentType = 1
    SymmetricFeatureExtentType = 2


class FeatureHealthStates:
    """
    The various states that a feature can be in. This is used for the states of modeling features, construction geometry, and sketches.
    """

    def __init__(self):
        pass

    HealthyFeatureHealthState = 0
    WarningFeatureHealthState = 1
    ErrorFeatureHealthState = 2
    SuppressedFeatureHealthState = 3
    RolledBackFeatureHealthState = 4
    UnknownFeatureHealthState = 5


class FeatureList(core.Base):
    """
    Provides access to a list of features. This is used in the API to return a list of features from an API call.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return FeatureList()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Returns the specified folder.
        index : The index of the feature to return. The first feature in the list has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return Feature()

    count = property(_get_count, None, doc="The number of features in this collection.")


class FeatureOperations:
    """
    List of the different operations a feature can perform.
    """

    def __init__(self):
        pass

    JoinFeatureOperation = 0
    CutFeatureOperation = 1
    IntersectFeatureOperation = 2
    NewBodyFeatureOperation = 3
    NewComponentFeatureOperation = 4


class Features(core.Base):
    """
    The features collection which provides access to all existing features. This collection provides direct access to all features regardless of type. It also provides access to type specific collections where you can get features of a specific type and also create new features of that type.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return Features()

    def _get_count(self):
        return int()

    def _get_extrudeFeatures(self):
        return ExtrudeFeatures()

    def _get_revolveFeatures(self):
        return RevolveFeatures()

    def _get_holeFeatures(self):
        return HoleFeatures()

    def _get_filletFeatures(self):
        return FilletFeatures()

    def _get_sweepFeatures(self):
        return SweepFeatures()

    def _get_chamferFeatures(self):
        return ChamferFeatures()

    def _get_shellFeatures(self):
        return ShellFeatures()

    def _get_mirrorFeatures(self):
        return MirrorFeatures()

    def _get_circularPatternFeatures(self):
        return CircularPatternFeatures()

    def _get_rectangularPatternFeatures(self):
        return RectangularPatternFeatures()

    def _get_pathPatternFeatures(self):
        return PathPatternFeatures()

    def _get_combineFeatures(self):
        return CombineFeatures()

    def _get_threadFeatures(self):
        return ThreadFeatures()

    def _get_draftFeatures(self):
        return DraftFeatures()

    def _get_scaleFeatures(self):
        return ScaleFeatures()

    def _get_replaceFaceFeatures(self):
        return ReplaceFaceFeatures()

    def _get_moveFeatures(self):
        return MoveFeatures()

    def _get_splitFaceFeatures(self):
        return SplitFaceFeatures()

    def _get_splitBodyFeatures(self):
        return SplitBodyFeatures()

    def _get_silhouetteSplitFeatures(self):
        return SilhouetteSplitFeatures()

    def _get_offsetFeatures(self):
        return OffsetFeatures()

    def _get_extendFeatures(self):
        return ExtendFeatures()

    def _get_stitchFeatures(self):
        return StitchFeatures()

    def _get_boundaryFillFeatures(self):
        return BoundaryFillFeatures()

    def _get_trimFeatures(self):
        return TrimFeatures()

    def _get_thickenFeatures(self):
        return ThickenFeatures()

    def _get_unstitchFeatures(self):
        return UnstitchFeatures()

    def _get_removeFeatures(self):
        return RemoveFeatures()

    def _get_baseFeatures(self):
        return BaseFeatures()

    def _get_coilFeatures(self):
        return CoilFeatures()

    def _get_boxFeatures(self):
        return BoxFeatures()

    def _get_cylinderFeatures(self):
        return CylinderFeatures()

    def _get_sphereFeatures(self):
        return SphereFeatures()

    def _get_torusFeatures(self):
        return TorusFeatures()

    def _get_pipeFeatues(self):
        return PipeFeatures()

    def _get_ribFeatures(self):
        return RibFeatures()

    def _get_webFeatures(self):
        return WebFeatures()

    def _get_formFeatures(self):
        return FormFeatures()

    def _get_reverseNormalFeatures(self):
        return ReverseNormalFeatures()

    def _get_patchFeatures(self):
        return PatchFeatures()

    def _get_loftFeatures(self):
        return LoftFeatures()

    def _get_ruleFilletFeatures(self):
        return RuleFilletFeatures()

    def _get_surfaceDeleteFaceFeatures(self):
        return SurfaceDeleteFaceFeatures()

    def _get_deleteFaceFeatures(self):
        return DeleteFaceFeatures()

    def _get_offsetFacesFeatures(self):
        return OffsetFacesFeatures()

    def _get_copyPasteBodies(self):
        return CopyPasteBodies()

    def _get_cutPasteBodies(self):
        return CutPasteBodies()

    def item(self, index):
        """
        Function that returns the specified feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return Feature()

    def createPath(self, curve, isChain):
        """
        Method that creates a Path used to define the shape of a Sweep feature. A Path is a contiguous set of curves that can be a combination of sketch curves and model edges.
        curve : A SketchCurve or an ObjectCollection containing multiple sketch entities and/or BRepEdge objects. If a single sketch curve or edge is input the isChain argument is checked to determine if connected curves (they do not need to be tangent) should be automatically found. If multiple curves are provided the isChain argument is always treated as false so you must provide all of the curves in the object collection that you want included in the path. The provided curves must all connect together in a single path. The input curves can be from multiple sketches and bodies and they need to geometrically connect for a valid path to be created.
        isChain : Optional argument, that defaults to true. If this argument is set to true, all curves and edges that are end point connected to the single input curve will be found and used to create the path. This argument is only used when the first argument is a single SketchCurve/BRepEdge object.
        Returns the newly created Path.
        """
        return Path()

    def itemByName(self, name):
        """
        Function that returns the specified feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the same name seen in the timeline.
        Returns the specified item or null if a feature matching the name was not found.
        """
        return Feature()

    count = property(_get_count, None, doc="Returns the number of bodies in the collection.")
    extrudeFeatures = property(_get_extrudeFeatures, None,
                               doc="Returns the collection that provides access to the extrude features within the component and supports the creation of new extrude features.")
    revolveFeatures = property(_get_revolveFeatures, None,
                               doc="Returns the collection that provides access to the revolve features within the component and supports the creation of new revolved features.")
    holeFeatures = property(_get_holeFeatures, None,
                            doc="Returns the collection that provides access to the hole features within the component and supports the creation of new hole features.")
    filletFeatures = property(_get_filletFeatures, None,
                              doc="Returns the collection that provides access to the fillet features within the component and supports the creation of new fillet features.")
    sweepFeatures = property(_get_sweepFeatures, None,
                             doc="Returns the collection that provides access to the sweep features within the component and supports the creation of new sweep features.")
    chamferFeatures = property(_get_chamferFeatures, None,
                               doc="Returns the collection that provides access to the chamfer features within the component and supports the creation of new chamfer features.")
    shellFeatures = property(_get_shellFeatures, None,
                             doc="Returns the collection that provides access to the shell features within the component and supports the creation of new shell features.")
    mirrorFeatures = property(_get_mirrorFeatures, None,
                              doc="Returns the collection that provides access to the mirror features within the component and supports the creation of new mirror features.")
    circularPatternFeatures = property(_get_circularPatternFeatures, None,
                                       doc="Returns the collection that provides access to the circular pattern features within the component and supports the creation of new circular pattern features.")
    rectangularPatternFeatures = property(_get_rectangularPatternFeatures, None,
                                          doc="Returns the collection that provides access to the rectangular pattern features within the component and supports the creation of new rectangular pattern features.")
    pathPatternFeatures = property(_get_pathPatternFeatures, None,
                                   doc="Returns the collection that provides access to the path pattern features within the component and supports the creation of new path pattern features.")
    combineFeatures = property(_get_combineFeatures, None,
                               doc="Returns the collection that provides access to the combine features within the component and supports the creation of new combine features.")
    threadFeatures = property(_get_threadFeatures, None,
                              doc="Returns the collection that provides access to the thread features within the component and supports the creation of new thread features.")
    draftFeatures = property(_get_draftFeatures, None,
                             doc="Returns the collection that provides access to the draft features within the component and supports the creation of new draft features.")
    scaleFeatures = property(_get_scaleFeatures, None,
                             doc="Returns the collection that provides access to the scale features within the component and supports the creation of new scale features.")
    replaceFaceFeatures = property(_get_replaceFaceFeatures, None,
                                   doc="Returns the collection that provides access to the replaceFace features within the component and supports the creation of new replaceFace features.")
    moveFeatures = property(_get_moveFeatures, None,
                            doc="Returns the collection that provides access to the Move features within the component and supports the creation of new Move features.")
    splitFaceFeatures = property(_get_splitFaceFeatures, None,
                                 doc="Returns the collection that provides access to the SplitFace features within the component and supports the creation of new SplitFace features")
    splitBodyFeatures = property(_get_splitBodyFeatures, None,
                                 doc="Returns the collection that provides access to the SplitBody features within the component and supports the creation of new SplitBody features")
    silhouetteSplitFeatures = property(_get_silhouetteSplitFeatures, None,
                                       doc="Returns the collection that provides access to the Parting Line Split features within the component and supports the creation of new Parting Line Split features")
    offsetFeatures = property(_get_offsetFeatures, None,
                              doc="Returns the collection that provides access to the Offset features within the component and supports the creation of new Offset features.")
    extendFeatures = property(_get_extendFeatures, None,
                              doc="Returns the collection that provides access to the Extend features within the component and supports the creation of new Extend features.")
    stitchFeatures = property(_get_stitchFeatures, None,
                              doc="Returns the collection that provides access to the Stitch features within the component and supports the creation of new Stitch features.")
    boundaryFillFeatures = property(_get_boundaryFillFeatures, None,
                                    doc="Returns the collection that provides access to the Boundary Fill features within the component and supports the creation of new Boundary Fill features.")
    trimFeatures = property(_get_trimFeatures, None,
                            doc="Returns the collection that provides access to the Trim features within the component and supports the creation of new Trim features.")
    thickenFeatures = property(_get_thickenFeatures, None,
                               doc="Returns the collection that provides access to the Thicken features within the component and supports the creation of new Thicken features.")
    unstitchFeatures = property(_get_unstitchFeatures, None,
                                doc="Returns the collection that provides access to the Unstitch features within the component and supports the creation of new Unstitch features.")
    removeFeatures = property(_get_removeFeatures, None,
                              doc="Returns the collection that provides access to the Remove features within the component and supports the creation of new Remove features.")
    baseFeatures = property(_get_baseFeatures, None,
                            doc="Returns the collection that provides access to the existing base features and supports the creation of new base features. A base feature represents a body that is non-parametric.")
    coilFeatures = property(_get_coilFeatures, None,
                            doc="Returns the collection that provides access to the Coil Primitive features within the component.")
    boxFeatures = property(_get_boxFeatures, None,
                           doc="Returns the collection that provides access to the existing box features.")
    cylinderFeatures = property(_get_cylinderFeatures, None,
                                doc="Returns the collection that provides access to the existing cylinder features.")
    sphereFeatures = property(_get_sphereFeatures, None,
                              doc="Returns the collection that provides access to the existing sphere features.")
    torusFeatures = property(_get_torusFeatures, None,
                             doc="Returns the collection that provides access to the existing torus features.")
    pipeFeatues = property(_get_pipeFeatues, None,
                           doc="Returns the collection that provides access to the existing pipe features.")
    ribFeatures = property(_get_ribFeatures, None,
                           doc="Returns the collection that provides access to the existing rib features.")
    webFeatures = property(_get_webFeatures, None,
                           doc="Returns the collection that provides access to the existing web features.")
    formFeatures = property(_get_formFeatures, None,
                            doc="Returns the collection that provides access to the existing form features.")
    reverseNormalFeatures = property(_get_reverseNormalFeatures, None,
                                     doc="Returns the collection that provides access to the Reverse Normal features within the component and supports the creation of new Reverse Normal features.")
    patchFeatures = property(_get_patchFeatures, None,
                             doc="Returns the collection that provides access to the Patch features within the component and supports the creation of new Patch features.")
    loftFeatures = property(_get_loftFeatures, None,
                            doc="Returns the collection that provides access to the existing loft features and supports the creation of new loft features.")
    ruleFilletFeatures = property(_get_ruleFilletFeatures, None,
                                  doc="Returns the collection that provides access to the existing form features.")
    surfaceDeleteFaceFeatures = property(_get_surfaceDeleteFaceFeatures, None,
                                         doc="Returns the collection that provides access to the existing Surface Delete Face features.")
    deleteFaceFeatures = property(_get_deleteFaceFeatures, None,
                                  doc="Returns the collection that provides access to the existing Delete Face features.")
    offsetFacesFeatures = property(_get_offsetFacesFeatures, None,
                                   doc="Returns the collection that provides access to the existing Offset Face features.")
    copyPasteBodies = property(_get_copyPasteBodies, None,
                               doc="Returns the collection that provides access to the existing copy-paste features and supports the creation of new copy-paste features.")
    cutPasteBodies = property(_get_cutPasteBodies, None,
                              doc="Returns the collection that provides access to the existing cut-paste features and supports the creation of new cut-paste features.")


class FilletEdgeSet(core.Base):
    """
    The base class for the classes that define the different types of fillet edge sets.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return FilletEdgeSet()


class FilletEdgeSets(core.Base):
    """
    Collection that provides access to all of the existing fillet edge sets in a component
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return FilletEdgeSets()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified fillet edge set using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return FilletEdgeSet()

    count = property(_get_count, None, doc="The number of fillet edge sets in the collection.")


class FilletFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a fillet feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return FilletFeatureInput()

    def _set_isG2(self, isG2):
        pass

    def _get_isG2(self):
        return bool()

    def _set_isRollingBallCorner(self, isRollingBallCorner):
        pass

    def _get_isRollingBallCorner(self):
        return bool()

    def _set_isTangentChain(self, isTangentChain):
        pass

    def _get_isTangentChain(self):
        return bool()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    def addConstantRadiusEdgeSet(self, edges, radius, isTangentChain):
        """
        Adds a set of edges with a constant radius to this input.
        edges : An ObjectCollection containing the edges to be filleted. If the isTangentChain argument is true additional edges may also get filleted if they are tangentially connected to any of the input edges.
        radius : A ValueInput object that defines the radius of the fillet. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '2 in'). If no units are specified it is interpreted using the current default units for length.
        isTangentChain : A boolean value for setting whether or not edges that are tangentially connected to the input edges (if any) will also be filleted.
        Returns true if the set of edges was successfully added to the FilletFeatureInput.
        """
        return bool()

    def addVariableRadiusEdgeSet(self, tangentEdges, startRadius, endRadius, positions, radii):
        """
        Adds a single edge or set of tangent edges along with variable radius information to this input.
        tangentEdges : An object collection containing a single edge or multiple edges. Multiple edges must be tangentially connected and added to the collection in order.
        startRadius : A ValueInput object that defines the starting radius of the fillet. If a single edge is being filleted, the start radius is at the start end of the edge. If multiple tangent edges are being filleted the start radius is the open end of the first edge in the collection. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '2 in'). If no units are specified it is interpreted using the current default units for length.
        endRadius : A ValueInput object that defines the ending radius of the fillet. If a single edge is being filleted, the end radius is at the end of the edge. If multiple tangent edges are being filleted the end radius is the open end of the last edge in the collection. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '2 in'). If no units are specified it is interpreted using the current default units for length.
        positions : An array of ValueInput objects that defines the positions of any additonal radii along the edge(s). The value must be between 0 and 1 and defines the percentage along the curve where a radius is defined. The value is unitless. This array must have the same number of values as the array passed in for the radii argument.
        radii : An array of ValueInput objects that define the radii at positions along the edge(s). This array must have the same number of values as the array passed in for the positions argument. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '2 in'). If no units are specified it will be interpreted using the current default units for length.
        Returns true if the edge set was successfully added to the FilletFeatureInput.
        """
        return bool()

    def addChordLengthEdgeSet(self, edges, chordLength, isTangentChain):
        """
        Adds a set of edges with a chord length to this input.
        edges : An ObjectCollection containing the edges to be filleted. If the isTangentChain argument is true additional edges may also get filleted if they are tangentially connected to any of the input edges.
        chordLength : A ValueInput object that defines the chord length of the fillet. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '2 in'). If no units are specified it is interpreted using the current default units for length.
        isTangentChain : A boolean value for setting whether or not edges that are tangentially connected to the input edges (if any) will also be filleted.
        Returns true if the set of edges was successfully added to the FilletFeatureInput.
        """
        return bool()

    isG2 = property(_get_isG2, _set_isG2,
                    doc="Gets and sets if the fillet uses the G2 (curvature-continuity) surface quality option .")
    isRollingBallCorner = property(_get_isRollingBallCorner, _set_isRollingBallCorner,
                                   doc="Gets and sets if a rolling ball solution is to be used in any corners.")
    isTangentChain = property(_get_isTangentChain, _set_isTangentChain,
                              doc="Gets and sets if any edges that are tangentially connected to any of filleted edges will also be included in the fillet.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class FilletFeatures(core.Base):
    """
    Collection that provides access to all of the existing fillet features in a component and supports the ability to create new fillet features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return FilletFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified fillet feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return FilletFeature()

    def createInput(self):
        """
        Creates a FilletFeatureInput object. Use properties and methods on this object to define the fillet you want to create and then use the Add method, passing in the FilletFeatureInput object.
        Returns the newly created FilletFeatureInput object or null if the creation failed.
        """
        return FilletFeatureInput()

    def add(self, input):
        """
        Creates a new fillet feature.
        input : A FilletFeatureInput object that defines the desired fillet. Use the createInput method to create a new FilletFeatureInput object and then use methods on it (the FilletFeatureInput object) to define the fillet.
        Returns the newly created FilletFeature object or null if the creation failed.
        """
        return FilletFeature()

    def itemByName(self, name):
        """
        Function that returns the specified fillet feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return FilletFeature()

    count = property(_get_count, None, doc="The number of fillet features in the collection.")


class FormFeatures(core.Base):
    """
    Collection that provides access to all of the existing Form features in a component.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return FormFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified Form feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return FormFeature()

    def itemByName(self, name):
        """
        Function that returns the specified form feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return FormFeature()

    def add(self):
        """
        Creates a new empty form feature in the parent component.
        Returns the new FormFeature or null in the case of an error.
        """
        return FormFeature()

    count = property(_get_count, None, doc="The number of Form features in the collection.")


class FusionDefaultUnitsPreferences(core.DefaultUnitsPreferences):
    """
    Fusion 360 Default Units for Design Preferences
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return FusionDefaultUnitsPreferences()

    def _set_distanceDisplayUnits(self, distanceDisplayUnits):
        pass

    def _get_distanceDisplayUnits(self):
        return DistanceUnits()

    distanceDisplayUnits = property(_get_distanceDisplayUnits, _set_distanceDisplayUnits,
                                    doc="Gets and sets the default units for length when creating a new Fusion 360 file.")


class FusionDocument(core.Document):
    """
    Object that represents a Fusion 360 specific document.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return FusionDocument()

    def _get_design(self):
        return Design()

    design = property(_get_design, None, doc="Returns the design associated with this Fusion 360 document.")


class FusionProductPreferences(core.ProductPreferences):
    """
    Fusion 360 General Design Preferences
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return FusionProductPreferences()

    def _set_isActiveComponentVisibilityUsed(self, isActiveComponentVisibilityUsed):
        pass

    def _get_isActiveComponentVisibilityUsed(self):
        return bool()

    def _set_defaultDesignType(self, defaultDesignType):
        pass

    def _get_defaultDesignType(self):
        return DefaultDesignTypeOptions()

    def _set_defaultWorkspace(self, defaultWorkspace):
        pass

    def _get_defaultWorkspace(self):
        return DefaultWorkspaces()

    def _set_isJointPreviewAnimated(self, isJointPreviewAnimated):
        pass

    def _get_isJointPreviewAnimated(self):
        return bool()

    def _set_is3DSketchingAllowed(self, is3DSketchingAllowed):
        pass

    def _get_is3DSketchingAllowed(self):
        return bool()

    def _set_isGhostedResultBodyShown(self, isGhostedResultBodyShown):
        pass

    def _get_isGhostedResultBodyShown(self):
        return bool()

    def _set_isDimensionEditedWhenCreated(self, isDimensionEditedWhenCreated):
        pass

    def _get_isDimensionEditedWhenCreated(self):
        return bool()

    def _set_isAutoLookAtSketch(self, isAutoLookAtSketch):
        pass

    def _get_isAutoLookAtSketch(self):
        return bool()

    def _set_isAutoProjectGeometry(self, isAutoProjectGeometry):
        pass

    def _get_isAutoProjectGeometry(self):
        return bool()

    isActiveComponentVisibilityUsed = property(_get_isActiveComponentVisibilityUsed,
                                               _set_isActiveComponentVisibilityUsed,
                                               doc="Gets and sets the Active Component Visibility option")
    defaultDesignType = property(_get_defaultDesignType, _set_defaultDesignType,
                                 doc="Gets and sets the Design History (default design type) setting")
    defaultWorkspace = property(_get_defaultWorkspace, _set_defaultWorkspace,
                                doc="Gets and sets the Default workspace setting. (Model, Sculpt or Patch)")
    isJointPreviewAnimated = property(_get_isJointPreviewAnimated, _set_isJointPreviewAnimated,
                                      doc="Gets and sets the Animate joint preview option")
    is3DSketchingAllowed = property(_get_is3DSketchingAllowed, _set_is3DSketchingAllowed,
                                    doc="Gets and sets the Allow 3D sketching of lines and splines option which controls if 3D sketching is allowed or if sketching is forced to be on the x-y plane of the sketch.")
    isGhostedResultBodyShown = property(_get_isGhostedResultBodyShown, _set_isGhostedResultBodyShown,
                                        doc="Gets and sets the Show ghosted result body option")
    isDimensionEditedWhenCreated = property(_get_isDimensionEditedWhenCreated, _set_isDimensionEditedWhenCreated,
                                            doc="Gets and sets if dimension value is edited when the dimension is created.")
    isAutoLookAtSketch = property(_get_isAutoLookAtSketch, _set_isAutoLookAtSketch,
                                  doc="Gets and sets if the view is re-oriented to view the newly created sketch.")
    isAutoProjectGeometry = property(_get_isAutoProjectGeometry, _set_isAutoProjectGeometry,
                                     doc="Gets and Sets if geometry, not in the active sketch plane, is to be automatically projected.")


class FusionUnitsManager(core.UnitsManager):
    """
    Utility class used to work with Values and control default units. Internal values are held in SI units (e.g. seconds, radians, kg for time, angle, mass) with the exception that all lengths are in cm rather than meter and this affects derived units (e.g. velocity is cm/s, volume is cm^3). Units are specified flexibly via strings (e.g. 'cm', 'in', 'inch', 'cm^3', 'cm*cm*cm', 'mph', 'mps' 'm/s').
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return FusionUnitsManager()

    def _get_design(self):
        return Design()

    def _set_distanceDisplayUnits(self, distanceDisplayUnits):
        pass

    def _get_distanceDisplayUnits(self):
        return DistanceUnits()

    design = property(_get_design, None, doc="Returns the the parent design")
    distanceDisplayUnits = property(_get_distanceDisplayUnits, _set_distanceDisplayUnits,
                                    doc="Gets and sets the default distance units for this design.")


class GeometricConstraint(core.Base):
    """
    The base class for all geometric constraints.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return GeometricConstraint()

    def _get_isDeletable(self):
        return bool()

    def _get_parentSketch(self):
        return Sketch()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_attributes(self):
        return core.Attributes()

    def deleteMe(self):
        """
        Deletes this constraint. The IsDeletable property can be used to determine if this constraint can be deleted.
        Returns true if the delete was successful.
        """
        return bool()

    isDeletable = property(_get_isDeletable, None, doc="Indicates if this constraint is deletable.")
    parentSketch = property(_get_parentSketch, None, doc="Returns the parent sketch object.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly but is already the native object.")
    attributes = property(_get_attributes, None,
                          doc="Returns the collection of attributes associated with this geometric constraint.")


class GeometricConstraintList(core.Base):
    """
    A list of geometric constraints.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return GeometricConstraintList()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified geometry constraint using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return GeometricConstraint()

    count = property(_get_count, None, doc="Returns the number of constraints in the sketch.")


class GeometricConstraints(core.Base):
    """
    A collection of all of the geometric constraints in a sketch. This object also supports the methods to create new geometric constraints.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return GeometricConstraints()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified sketch constraint using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return GeometricConstraint()

    def addCoincident(self, point, entity):
        """
        Creates a new coincident constraint between two entities. The first argument is a sketch point. The second argument is a sketch curve or point.
        point : The SketchPoint that will be made coincident.
        entity : The SketchPoint or sketch curve that the point will be made coincident to.
        Returns the newly created CoincidentConstraint object or null if the creation failed.
        """
        return CoincidentConstraint()

    def addCollinear(self, lineOne, lineTwo):
        """
        Creates a new collinear constraint between two lines.
        lineOne : The first line to create the constraint on.
        lineTwo : The second line to create the constraint on.
        Returns the newly created CollinearConstraint object or null if the creation failed.
        """
        return CollinearConstraint()

    def addConcentric(self, entityOne, entityTwo):
        """
        Creates a new concentric constraint between two circles, arcs, ellipses, or elliptical arcs.
        entityOne : The first circle, arc, ellipse or elliptical arc.
        entityTwo : The second circle, arc, ellipse or elliptical arc.
        Returns the newly created ConcentricConstraint object or null if the creation failed.
        """
        return ConcentricConstraint()

    def addMidPoint(self, point, midPointCurve):
        """
        Creates a new midpoint constraint between a point and a curve.
        point : The point to constrain to the midpoint of a curve.
        midPointCurve : The curve that defines the midpoint to constraint to.
        Returns the newly created MidPointConstraint object or null if the creation failed.
        """
        return MidPointConstraint()

    def addParallel(self, lineOne, lineTwo):
        """
        Creates a new parallel constraint between two lines.
        lineOne : The first SketchLine.
        lineTwo : The second SketchLine.
        Returns the newly created ParallelConstraint object or null if the creation failed.
        """
        return ParallelConstraint()

    def addPerpendicular(self, lineOne, lineTwo):
        """
        Creates a new perpendicular constraint between two lines.
        lineOne : The first SketchLine.
        lineTwo : The second SketchLine.
        Returns the newly created PerpendicularConstraint object or null if the creation failed.
        """
        return PerpendicularConstraint()

    def addHorizontal(self, line):
        """
        Creates a new horizontal constraint on a line.
        line : The line to constrain horizontally.
        Returns the newly created HorizontalConstraint object or null if the creation failed.
        """
        return HorizontalConstraint()

    def addHorizontalPoints(self, pointOne, pointTwo):
        """
        Creates a new horizontal constraint between two points.
        pointOne : The first SketchPoint to constrain horizontally.
        pointTwo : The second SketchPoint to constrain horizontally.
        Returns the newly created HorizontalPointsConstraint object or null if the creation failed.
        """
        return HorizontalPointsConstraint()

    def addVertical(self, line):
        """
        Creates a new vertical constraint on a line.
        line : The line to constrain vertically.
        Returns the newly created VerticalConstraint object or null if the creation failed.
        """
        return VerticalConstraint()

    def addVerticalPoints(self, pointOne, pointTwo):
        """
        Creates a new vertical constraint between two points.
        pointOne : The first SketchPoint to constrain vertically.
        pointTwo : The second SketchPoint to constrain vertically.
        Returns the newly created VerticalPointsConstraint object or null if the creation failed.
        """
        return VerticalPointsConstraint()

    def addTangent(self, curveOne, curveTwo):
        """
        Creates a new tangent constraint between two curves.
        curveOne : The first curve to be tangent.
        curveTwo : The second curve to be tangent.
        Returns the newly created TangentConstraint object or null if the creation failed.
        """
        return TangentConstraint()

    def addSmooth(self, curveOne, curveTwo):
        """
        Creates a new smooth constraint between two curves. One of the curves must be a spline. The other curve can be a spline or an arc.
        curveOne : The first curve to be smooth.
        curveTwo : The first curve to be smooth.
        Returns the newly created SmoothConstraint object or null if the creation failed.
        """
        return SmoothConstraint()

    def addEqual(self, curveOne, curveTwo):
        """
        Creates a new equal constraint between two lines, or between arcs and circles.
        curveOne : The first line, arc, or circle.
        curveTwo : The second line, arc, or circle.
        Returns the newly created EqualConstraint object or null if the creation failed.
        """
        return EqualConstraint()

    def addSymmetry(self, entityOne, entityTwo, symmetryLine):
        """
        Creates a new symmetry constraint.
        entityOne : The first sketch entity to be symmetric.
        entityTwo : The second sketch entity to be symmetric. It must be the same type as the first entity.
        symmetryLine : The SketchLine that defines the axis of symmetry.
        Returns the newly created SymmetryConstraint object or null if the creation failed.
        """
        return SymmetryConstraint()

    count = property(_get_count, None, doc="Returns the number of constraints in the sketch.")


class HoleEdgePositions:
    """
    List of the valid edge positions for holes.
    """

    def __init__(self):
        pass

    EdgeStartPointPosition = 0
    EdgeMidPointPosition = 1
    EdgeEndPointPosition = 2


class HoleFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a hole feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return HoleFeatureInput()

    def _set_tipAngle(self, tipAngle):
        pass

    def _get_tipAngle(self):
        return core.ValueInput()

    def _set_isDefaultDirection(self, isDefaultDirection):
        pass

    def _get_isDefaultDirection(self):
        return bool()

    def _set_creationOccurrence(self, creationOccurrence):
        pass

    def _get_creationOccurrence(self):
        return Occurrence()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    def _set_participantBodies(self, participantBodies):
        pass

    def _get_participantBodies(self):
        return BRepBody()

    def setPositionByPoint(self, planarEntity, point):
        """
        Defines the position of a the hole using a point. The point can be a vertex on the face or it can be a Point3D object to define any location on the face. If a Point3D object is provided it will be projected onto the plane along the planes normal. The orientation of the hole is defined by the planar face or construction plane. If a vertex is used, the position of the hole is associative to that vertex. If a Point3D object is used the position of the hole is not associative.
        planarEntity : The planar BRepFace or ConstructionPlane object that defines the orientation of the hole. The natural direction of the hole will be opposite the normal of the face or construction plane.
        point : A Point3D object or vertex that defines the position of the hole. The point will be projected onto the plane along the normal of the plane.
        Returns true if successful.
        """
        return bool()

    def setPositionAtCenter(self, planarEntity, centerEdge):
        """
        Defines the position of the hole at the center of a circular or elliptical edge of the face.
        planarEntity : The planar BRepFace or ConstructionPlane object that defines the orientation of the hole. The natural direction of the hole will be opposite the normal of the face or construction plane.
        centerEdge : A circular or elliptical edge whose center point will be the position of the hole.
        Returns true if successful.
        """
        return bool()

    def setPositionBySketchPoint(self, sketchPoint):
        """
        Defines the position and orientation of the hole using a sketch point.
        sketchPoint : The sketch point that defines the position of the hole. The orientation is inferred from the normal of the point's parent sketch. The natural direction will be opposite the normal of the sketch.
        Returns true if successful.
        """
        return bool()

    def setPositionByPlaneAndOffsets(self, planarEntity, point, edgeOne, offsetOne, edgeTwo, offsetTwo):
        """
        Defines the orientation of the hole using a planar face or construction plane. The position of the hole is defined by the distance from one or two edges.
        planarEntity : The planar BRepFace or ConstructionPlane object that defines the orientation of the hole. The natural direction of the hole will be opposite the normal of the face or construction plane.
        point : A Point3D object that defines the approximate initial position of the hole. The point will be projected onto the plane. This point should be close to the final position of the hole and is used to determine which solution out of several possible solutions should be chosen for the hole location.
        edgeOne : A linear BRepEdge object that the position of the hole will be measured from. The position of the hole will be measured along a perpendicular from this edge.
        offsetOne : A ValueInput object that defines the offset distance from edgeOne. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '3 in'). If no units are specified it is interpreted using the current default units for length.
        edgeTwo : You can optionally define a second edge and offset to specify the position of the hole. If you use a second edge it has the same requirements as the edgeOne argument. If you provide a second edge you must also provide the offsetTwo argument.
        offsetTwo : If edgeTwo is defined, you must provide this argument which is a ValueInput object that defines the offset from the edgeTwo. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '3 in'). If no units are specified it is interpreted using the current default units for length.
        Returns true if successful.
        """
        return bool()

    def setPositionOnEdge(self, planarEntity, edge, position):
        """
        Defines the position and orientation of the hole to be on the start, end or center of an edge.
        planarEntity : The planar BRepFace or ConstructionPlane object that defines the orientation of the hole and start of the hole. The natural direction of the hole will be opposite the normal of the face or construction plane.
        edge : The edge to position the hole on.
        position : The position along the edge to place the hole.
        Returns true if successful.
        """
        return bool()

    def setDistanceExtent(self, distance):
        """
        Defines the depth of the hole using a specified distance.
        distance : The depth of the hole. If a real is specified the value is in centimeters. If a string is specified the units are derived from the string. If no units are specified, the default units of the document are used.
        Returns true if setting the extent was successful.
        """
        return bool()

    def setAllExtent(self, direction):
        """
        Defines the extent of the hole to be through-all. The direction can be either positive, negative.
        direction : The direction of the hole relative to the normal of the sketch plane.
        Returns true if successful.
        """
        return bool()

    def setOneSideToExtent(self, toEntity, matchShape, directionHint):
        """
        Sets the extent of the hole to be from the sketch plane to the specified 'to' face.
        toEntity : The entity that defines the 'to' extent. The valid types of entities can vary depending on the type of feature this is being used with. For a hole it can be a BRepBody, BRepFace, BRepVertex, ConstructionPlane, or ConstructionPoint.
        matchShape : Indicates if the hole is not contained on the face that the hole should match the shape of the entity as if it extended beyond it's current boundaries.
        directionHint : Specifies the direction of the hole. This is only used in the case where there are two possible solutions and the hole can hit the toEntity in either direction. Typically there is only a single solution and the direction is determined automatically.
        Returns true if successful.
        """
        return bool()

    def setPositionBySketchPoints(self, sketchPoints):
        """
        Defines the position and orientation of the hole using a set of sketch points.
        sketchPoints : A collection of sketch points that defines the positions of the holes. The orientation is inferred from the normal of the point's parent sketch. The natural direction will be opposite the normal of the sketch. The points can be from multiple sketches but they must all be co-planar.
        Returns true if successful.
        """
        return bool()

    tipAngle = property(_get_tipAngle, _set_tipAngle,
                        doc="Gets the ValueInput object that defines the angle of the tip of the hole. The default is '118.0 deg' but can be modified by setting it using another Value object.")
    isDefaultDirection = property(_get_isDefaultDirection, _set_isDefaultDirection,
                                  doc="Gets or sets if the hole goes in the default direction or is reversed.")
    creationOccurrence = property(_get_creationOccurrence, _set_creationOccurrence,
                                  doc="In order for geometry to be transformed correctly, an Occurrence for creation needs to be specified when the Hole is created based on geometry (e.g. a face or point) in another component AND (the Hole) is not in the root component. The CreationOccurrence is analogous to the active occurrence in the UI A value of null indicates that everything is in the context of a single component.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")
    participantBodies = property(_get_participantBodies, _set_participantBodies,
                                 doc="Gets and sets the list of bodies that will participate in the hole. If this property has not been set, the default behavior is that all bodies that are intersected by the hole will participate. This property can return null in the case where the feature has not been fully defined so that possible intersecting bodies can be computed.")


class HoleFeatures(core.Base):
    """
    Collection that provides access to all of the existing hole features in a component and supports the ability to create new hole features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return HoleFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified hole feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return HoleFeature()

    def createSimpleInput(self, holeDiameter):
        """
        Creates a HoleFeatureInput object that defines a simple hole (a single diameter). This is not a hole feature, but an object used to create a hole feature. Functionality on the returned HoleFeatureInput object is used to define the position and extent of the hole.
        holeDiameter : A ValueInput object that defines the diameter of the hole. If the ValueInput uses a real, it is interpreted as centimeters. If it is a string, the units can be defined as part of the string (i.e. '3 in') If no units are specified, it is interpreted using the current default units for length.
        Returns the newly created HoleFeatureInput object or null if the creation failed.
        """
        return HoleFeatureInput()

    def createCounterboreInput(self, holeDiameter, counterboreDiameter, counterboreDepth):
        """
        Creates a HoleFeatureInput object that defines a counterbore hole. This is not a hole feature but an object used to create a hole feature. Functionality on the returned HoleFeatureInput object is used to define the position and extent of the hole.
        holeDiameter : A ValueInput object that defines the diameter of the hole. If the ValueInput uses a real, it is interpreted as centimeters. If it is a string, the units can be defined as part of the string (i.e. '3 in') If no units are specified, it is interpreted using the current default units for length.
        counterboreDiameter : A ValueInput object that defines the counterbore diameter of the hole. If the ValueInput uses a real, it is interpreted as centimeters. If it is a string, the units can be defined as part of the string (i.e. '3 in') If no units are specified, it is interpreted using the current default units for length.
        counterboreDepth : A ValueInput object that defines the counterbore depth of the hole. If the ValueInput uses a real, it is interpreted as centimeters. If it is a string, the units can be defined as part of the string (i.e. '3 in') If no units are specified, it is interpreted using the current default units for length.
        Returns the newly created HoleFeatureInput object or null if the creation failed.
        """
        return HoleFeatureInput()

    def createCountersinkInput(self, holeDiameter, countersinkDiameter, countersinkAngle):
        """
        Creates a HoleFeatureInput object that defines a countersink hole. This is not a hole feature but an object used to create a hole feature. Functionality on the returned HoleFeatureInput object is used to define the position and extent of the hole.
        holeDiameter : A ValueInput object that defines the diameter of the hole. If the ValueInput uses a real, it is interpreted as centimeters. If it is a string, the units can be defined as part of the string (i.e. '3 in') If no units are specified, it is interpreted using the current default units for length.
        countersinkDiameter : A ValueInput object that defines the diameter of the countersink. If the ValueInput uses a real, it is interpreted as centimeters. If it is a string, the units can be defined as part of the string (i.e. '3 in') If no units are specified, it is interpreted using the current default units for length.
        countersinkAngle : A ValueInput object that defines the angle of the countersink. If the ValueInput uses a real then it is interpreted as radians. If it is a string then the units can be defined as part of the string (i.e. '120 deg'). If no units are specified it is interpreted using the current default units for angles.
        Returns the newly created HoleFeatureInput object or null if the creation failed.
        """
        return HoleFeatureInput()

    def add(self, input):
        """
        Creates a new hole feature based on the information provided by a HoleFeatureInput object. To create a new hole, use one of the createInput functions to define a new input object for the type of hole you want to create. Use the methods and properties on the input object to define any additional input. Once the information is defined on the input object, you can pass it to the Add method to create the hole.
        input : The HoleFeatureInput object that defines the hole you want to create.
        Returns the newly created HoleFeature or null if the creation failed.
        """
        return HoleFeature()

    def itemByName(self, name):
        """
        Function that returns the specified hole feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return HoleFeature()

    count = property(_get_count, None, doc="The number of hole features in the collection.")


class HolePositionDefinition(core.Base):
    """
    The base class for the classes that define how a hole can be positioned.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return HolePositionDefinition()


class HoleTypes:
    """
    List of the different types of holes.
    """

    def __init__(self):
        pass

    SimpleHoleType = 0
    CounterboreHoleType = 1
    CountersinkHoleType = 2


class InterferenceInput(core.Base):
    """
    Used to gather and define the various inputs and settings needed to calculate interference. This object is created using the Design.createInterferenceInput method.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return InterferenceInput()

    def _set_entities(self, entities):
        pass

    def _get_entities(self):
        return core.ObjectCollection()

    def _set_areCoincidentFacesIncluded(self, areCoincidentFacesIncluded):
        pass

    def _get_areCoincidentFacesIncluded(self):
        return bool()

    entities = property(_get_entities, _set_entities,
                        doc="Gets and set an ObjectCollection containing BRepBody and/or Occurrence entities that will be used when checking for interference. All entities must be in the context of the root component of the top-level design.")
    areCoincidentFacesIncluded = property(_get_areCoincidentFacesIncluded, _set_areCoincidentFacesIncluded,
                                          doc="Gets and sets whether any coincident faces in the input bodies are considered as interference or not. This property defaults to False for a newly created InterferenceInput object.")


class InterferenceResult(core.Base):
    """
    Represents the interference between bodies and/or occurrences in an interference analysis.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return InterferenceResult()

    def _get_entityOne(self):
        return core.Base()

    def _get_entityTwo(self):
        return core.Base()

    def _get_interferenceBody(self):
        return BRepBody()

    def _set_isCreateBody(self, isCreateBody):
        pass

    def _get_isCreateBody(self):
        return bool()

    entityOne = property(_get_entityOne, None, doc="Returns the first entity involved in the interference")
    entityTwo = property(_get_entityTwo, None, doc="Returns the second entity involved in the interference")
    interferenceBody = property(_get_interferenceBody, None,
                                doc="Returns a transient BRepBody that represents the volume of interference.")
    isCreateBody = property(_get_isCreateBody, _set_isCreateBody,
                            doc="Gets and sets if this interference volume should be created as a model body. Setting this to true doesn't create the body just indicates that a body is desired. Calling the createBodies method on the interferenceResults object will result in the creation of the model body if this property is true.")


class InterferenceResults(core.Base):
    """
    Transient object used to return the result of an interference analysis.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return InterferenceResults()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified interference result using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return InterferenceResult()

    def createBodies(self, allInterferenceBodies):
        """
        Creates bodies in the model that represent the interference volumes. This is not supported in parametric modelling.
        allInterferenceBodies : Sets if all bodies or only individual bodies will be created as bodies in the model. If False, then only interferenceResult objects whose isCreateBody property is true will be created as a model body. If true, all interface volumes will be created as a body regardless of the value of the isCreateBody property.
        """
        return core.ObjectCollection()

    count = property(_get_count, None, doc="Returns the number of interference results in the collection.")


class Joint(core.Base):
    """
    A joint in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return Joint()

    def _get_parentComponent(self):
        return Component()

    def _set_name(self, name):
        pass

    def _get_name(self):
        return str()

    def _set_geometryOrOriginOne(self, geometryOrOriginOne):
        pass

    def _get_geometryOrOriginOne(self):
        return core.Base()

    def _set_geometryOrOriginTwo(self, geometryOrOriginTwo):
        pass

    def _get_geometryOrOriginTwo(self):
        return core.Base()

    def _get_angle(self):
        return ModelParameter()

    def _get_offset(self):
        return ModelParameter()

    def _set_isFlipped(self, isFlipped):
        pass

    def _get_isFlipped(self):
        return bool()

    def _get_jointMotion(self):
        return JointMotion()

    def _get_timelineObject(self):
        return TimelineObject()

    def _get_nativeObject(self):
        return Joint()

    def _get_assemblyContext(self):
        return Occurrence()

    def _set_isSuppressed(self, isSuppressed):
        pass

    def _get_isSuppressed(self):
        return bool()

    def _set_isLightBulbOn(self, isLightBulbOn):
        pass

    def _get_isLightBulbOn(self):
        return bool()

    def _get_isVisible(self):
        return bool()

    def _get_attributes(self):
        return core.Attributes()

    def _get_healthState(self):
        return FeatureHealthStates()

    def _get_errorOrWarningMessage(self):
        return str()

    def _get_occurrenceOne(self):
        return Occurrence()

    def _get_occurrenceTwo(self):
        return Occurrence()

    def _set_isLocked(self, isLocked):
        pass

    def _get_isLocked(self):
        return bool()

    def deleteMe(self):
        """
        Deletes this joint.
        Returns true if the delete is successful.
        """
        return bool()

    def setAsRigidJointMotion(self):
        """
        Redefines the relationship between the two joint geometries as a rigid joint.
        Returns true if successful.
        """
        return bool()

    def setAsRevoluteJointMotion(self, rotationAxis, customRotationAxisEntity):
        """
        Redefines the relationship between the two joint geometries as a revolute joint.
        rotationAxis : Specifies which axis the rotation is around. If this is set to CustomJointDirection then the customRotationAxisEntity argument must also be provided.
        customRotationAxisEntity : If the rotationAxis is customAxisEntity this argument is used to specify the entity that defines the custom axis of rotation. This can be several types of entities that an axis can be derived from.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsSliderJointMotion(self, sliderDirection, customSliderDirectionEntity):
        """
        Redefines the relationship between the two joint geometries as a slider joint.
        sliderDirection : Specifies which axis the slide direction is along. If this is set to CustomJointDirection then the customSliderDirectionEntity argument must also be provided.
        customSliderDirectionEntity : If the sliderDirection is CustomJointDirection this argument is used to specify the entity that defines the custom slider direction. This can be several types of entities that can define a direction.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsCylindricalJointMotion(self, rotationAxis, customRotationAxisEntity):
        """
        Redefines the relationship between the two joint geometries as a cylindrical joint.
        rotationAxis : Specifies which axis the rotation is around. If this is set to CustomJointDirection then the customRotationAxisEntity argument must also be provided.
        customRotationAxisEntity : If the rotationAxis is customAxisEntity this argument is used to specify the entity that defines the custom axis of rotation. This can be several types of entities that an axis can be derived from.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsPinSlotJointMotion(self, rotationAxis, slideDirection, customRotationAxisEntity,
                                customSlideDirectionEntity):
        """
        Redefines the relationship between the two joint geometries as a pin-slot joint.
        rotationAxis : Specifies which axis the rotation is around. If this is set to CustomJointDirection then the customRotationAxisEntity argument must also be provided.
        slideDirection : Specifies which axis the slide direction is along. If this is set to CustomJointDirection then the customSlideDirectionEntity argument must also be provided.
        customRotationAxisEntity : If the rotationAxis is customAxisEntity this argument is used to specify the entity that defines the custom axis of rotation. This can be several types of entities that an axis can be derived
        customSlideDirectionEntity : If the slideDirection is CustomJointDirection this argument is used to specify the entity that defines the custom slide direction. This can be several types of entities that can define a direction.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsPlanarJointMotion(self, normalDirection, customNormalDirectionEntity, customPrimarySlideDirection):
        """
        Redefines the relationship between the two joint geometries as a planar joint.
        normalDirection : Defines the direction of the normal of the single degree of rotation. This can be set to XAxisJointDirection, YAxisJointDirection, ZAxisJointDirection, or CustomJointDirection. If set to CustomJointDirection then the customNormalDirectionEntity argument must also be provided.
        customNormalDirectionEntity : If the normalDirection is CustomJointDirection this argument is used to specify the entity that defines the direction of the normal. This can be several types of entities that can define a direction.
        customPrimarySlideDirection : This arguments defines the direction of the primary slide direction. A default primary slide direction is automatically chosen and will be used if this argument is not provided or is null. The secondar slide direction is automatically inferred from the normal and primary slide directions.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsBallJointMotion(self, pitchDirection, yawDirection, customPitchDirection, customYawDirection):
        """
        Redefines the relationship between the two joint geometries as a ball joint.
        pitchDirection : Defines the direction the pitch angle is measured from. This can be ZAxisJointDirection or CustomJointDirection. If CustomJointDirection is specified then you must also provide a value for the customPitchDirection argument.
        yawDirection : Defines the direction the yaw is measured from. This can be XAxisJointDirection or CustomJointDirection. If CustomJointDirection is specified then you must also provide a value for the customYawDirection argument.
        customPitchDirection : If the pitchDirection argument is customPitchDirection this argument is used to define the direction the pitch angel is measured from. This can be several types of entities that can define a direction.
        customYawDirection : If the yawDirection argument is customPitchDirection this argument is used to define the direction the yaw angel is measured from. This can be several types of entities that can define a direction.
        Returns true if the operation was successful.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return Joint()

    parentComponent = property(_get_parentComponent, None, doc="Returns the parent component that owns this joint.")
    name = property(_get_name, _set_name, doc="Gets and sets the name of the joint.")
    geometryOrOriginOne = property(_get_geometryOrOriginOne, _set_geometryOrOriginOne,
                                   doc="Gets and sets the first JointGeometry or JointOrigin for this joint.")
    geometryOrOriginTwo = property(_get_geometryOrOriginTwo, _set_geometryOrOriginTwo,
                                   doc="Gets and sets the second JointGeometry or JointOrigin for this joint.")
    angle = property(_get_angle, None,
                     doc="Returns the parameter controlling the angle between the two input geometries. This is effectively the angle between the two primary axes of the two joint geometries.")
    offset = property(_get_offset, None,
                      doc="Returns the parameter controlling the offset between the two input geometries. This is effectively the offset distance between the two planes defined by the primary and secondary axes of the input geometries or the offset along the tertiary axis (z axis) of the joint.")
    isFlipped = property(_get_isFlipped, _set_isFlipped,
                         doc="Gets and sets if the joint direction is flipped or not. This is effectively specifying if the third axis of the two input geometries is facing (false) or opposed (true).")
    jointMotion = property(_get_jointMotion, None,
                           doc="Returns a JointMotion object that defines the motion relationship between the two geometries.")
    timelineObject = property(_get_timelineObject, None, doc="Returns the timeline object associated with this joint.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly but is already the native object.")
    isSuppressed = property(_get_isSuppressed, _set_isSuppressed, doc="Gets and sets if this joint is suppressed.")
    isLightBulbOn = property(_get_isLightBulbOn, _set_isLightBulbOn,
                             doc="Gets and sets if the light bulb of this joint as displayed in the browser is on or off. A joint will only be visible if the light bulb is switched on. However, the light bulb can be on and the joint still invisible if a higher level occurrence in the assembly context is not visible because its light bulb is off or the joints folder is light bulb is off.")
    isVisible = property(_get_isVisible, None,
                         doc="Gets whether the joint is visible. To change the visibility see the isLightBulbOn property. This property is affected by the assembly context.")
    attributes = property(_get_attributes, None, doc="Returns the collection of attributes associated with this joint.")
    healthState = property(_get_healthState, None, doc="Returns the current health state of the joint.")
    errorOrWarningMessage = property(_get_errorOrWarningMessage, None,
                                     doc="Returns the error or warning message in the case where the healthState property returns either WarningFeatureHealthState or ErrorFeatureHealthState. Otherwise this property returns an empty string.")
    occurrenceOne = property(_get_occurrenceOne, None,
                             doc="Returns the first of two occurrences that this joint defines a relationship between. This is the occurrence that can also be found through the geometryOrOriginOne property.")
    occurrenceTwo = property(_get_occurrenceTwo, None,
                             doc="Returns the first of two occurrences that this joint defines a relationship between. This is the occurrence that can also be found through the geometryOrOriginTwo property.")
    isLocked = property(_get_isLocked, _set_isLocked, doc="Gets and sets if the joint is locked.")


class JointDirections:
    """
    Specifies the different types of directions that can be used to define directions of a joint.
    """

    def __init__(self):
        pass

    XAxisJointDirection = 0
    YAxisJointDirection = 1
    ZAxisJointDirection = 2
    CustomJointDirection = 3


class JointGeometry(core.Base):
    """
    A transient object used to define and query the geometric input of a joint and the resulting coordinate system it defines. New JointGeometry objects are created using its various static create methods and are then used as input to the Joints.createInput method.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return JointGeometry()

    @staticmethod
    def createByPlanarFace(face, edge, keyPointType):
        """
        Creates a new transient JointGeometry object based on a planar BRepFace object. A JointGeometry object can be used to create a joint or joint origin.
        face : The planar BRepFace object
        edge : A BRepEdge edge object that is one of the edges of the specified face. This argument can be null in the case where the keyPointType is CenterKeypoint indicating the center of the face is to be used. When an edge is used, the keyPointType specifies the position along the edge for the keypoint.
        keyPointType : Specifies the position along the edge where the joint keypoint will be located. For open edges this can be StartKeyPoint, MiddleKeyPoint, or EndKeyPoint. For closed edges (i.e. circles), it must be CenterKeyPoint. When no edge is specified, it must be CenterKeyPoint indicating the center of area of the face is to be used.
        Returns the transient JointGeometry object that can be used to create a joint or joint origin or null in case of a failure.
        """
        return JointGeometry()

    @staticmethod
    def createByNonPlanarFace(face, keyPointType):
        """
        Creates a new transient JointGeometry object based on a non-planar analytical BRepFace object. This is limited to cylinders, cones, spheres, and tori. A JointGeometry object can be used to create a joint or joint origin.
        face : The cylindrical, conical, spherical, or toroidal BRepFace object.
        keyPointType : Specifies the position relative to the input face where joint keypoint will be located. For cylinders and cones this can be StartKeyPoint, MiddleKeyPoint, or EndKeyPoint. For spheres and tori this must be CenterKeyPoint.
        Returns the transient JointGeometry object that can be used to create a joint or joint origin or null in case of a failure.
        """
        return JointGeometry()

    @staticmethod
    def createByProfile(profile, sketchCurve, keyPointType):
        """
        Creates a new transient JointGeometry object based on a planar BRepFace object. A JointGeometry object can be used to create a joint or joint origin.
        profile : The Profile object.
        sketchCurve : A sketch curve that is part of the input profile. This argument can be null in the case where the keyPointType is CenterKeypoint indicating the center of the profile is to be used. When a curve is used, the keyPointType specifies the position along the curve for the keypoint.
        keyPointType : Specifies the position along the curve where the joint keypoint will be located. For open curves (lines, arcs, elliptical arcs, and open splines) this can be StartKeyPoint, MiddleKeyPoint, or EndKeyPoint. For closed analytic (circles and ellipses), it must be CenterKeyPoint. When no curve is specified, it must be CenterKeyPoint indicating the center of area of the profile is to be used.
        Returns the transient JointGeometry object that can be used to create a joint or joint origin or null in case of a failure.
        """
        return JointGeometry()

    @staticmethod
    def createByCurve(curve, keyPointType):
        """
        Creates a new transient JointGeometry object using a BRepEdge or SketchCurve as input. A JointGeometry object can be used to create a joint or joint origin.
        curve : Input BRepEdge or SketchCurve.
        keyPointType : The position on the curve where to position the joint coordinate system. For any open curves the valid types are StartKeyPoint, MiddleKeyPoint, and EndKeyPoint. For circular and elliptical shaped curves the option is CenterKeyPoint. For closed spline curves either StartKeyPoint or EndKeyPoint can be used and the result is the same.
        Returns the transient JointGeometry object that can be used to create a joint or joint origin or null in case of a failure.
        """
        return JointGeometry()

    @staticmethod
    def createByPoint(point):
        """
        Creates a new transient JointGeometry object using a ConstructionPoint, SketchPoint or BRepVertex as input. A JointGeometry object can be used to create a joint or joint origin.
        point : The ConstructionPoint, SketchPoint or BRepVertex object.
        Returns the transient JointGeometry object that can be used to create a joint or joint origin or null in case of a failure.
        """
        return JointGeometry()

    @staticmethod
    def createByBetweenTwoPlanes(planeOne, planeTwo, entityOne, entityTwo, keyPointType):
        """
        Creates a new transient JointGeometry object based on a plane bisecting the two input planes.
        planeOne : The first planar entity that the joint origin will be created between. This can be a planar BRepFace or a ConstructionPlane object.
        planeTwo : The second planar entity that the joint origin will be created between. This can be a planar BRepFace or a ConstructionPlane object.
        entityOne : Specifies the entity that is used to define the keypoint. This can be many types of geometry including edges, planar and non-planar faces, profiles, and sketch geometry.
        entityTwo : If the entityOne argument is a planar BRepFace or a Profile, then this argument specifies either an edge on the face or a sketch curve on the profile. For a planar face this argument is optional in the case where the keyPointType argument is CenterKeyPoint indicating the center of area of the face is to be used.
        keyPointType : Specifies the position on the keyPointGeometry where the keypoint will be defined. This keypoint is then projected onto the plane to define the position of the joint geometry. The values that are valid for this argument depend on the type of geometry specified for the geometry and edgeOrCurve arguments. If the geometry argument is a planar face and the edgeOrCurve argument is an open BRepEdge object then this can be StartKeyPoint, MiddleKeyPoint, or EndKeyPoint. If the geometry argument is a planar face and the edgeOrCurve argument is a closed BRepEdge object (i.e. circles), it must be CenterKeyPoint. If the geometry argument is a planar face and the edgeOrCurve argument is null, then this must be CenterKeyPoint indicating the center of area of the face. If the geometry argument is a non-planar face (cylinder, cone, sphere, or torus) this can be StartKeyPoint, MiddleKeyPoint, or EndKeyPoint for cylinders and cones but must be CenterKeyPoint for spheres and tori. The edgeOrCurve argument is ignored in this case. If the geometry argument is a profile and the edgeOrCurve argument is null this can be CenterKeyPoint indicating the center of area of the profile. If the geometry argument is a profile and the edgeOrCurve argument is an open sketch curve on the profile then this can be StartKeyPoint, MiddleKeyPoint, or EndKeyPoint. If the geometry argument is a profile and the edgeOrCurve argument is a closed sketch curve (i.e. circles), it must be CenterKeyPoint.
        Returns the transient JointGeometry object that can be used to create a joint or joint origin or null in case of a failure.
        """
        return JointGeometry()

    def _get_geometryType(self):
        return JointGeometryTypes()

    def _get_keyPointType(self):
        return JointKeyPointTypes()

    def _get_entityOne(self):
        return core.Base()

    def _get_entityTwo(self):
        return core.Base()

    def _get_origin(self):
        return core.Point3D()

    def _get_primaryAxisVector(self):
        return core.Vector3D()

    def _get_secondaryAxisVector(self):
        return core.Vector3D()

    def _get_thirdAxisVector(self):
        return core.Vector3D()

    def _get_planeOne(self):
        return core.Base()

    def _get_planeTwo(self):
        return core.Base()

    geometryType = property(_get_geometryType, None,
                            doc="Returns the type of geometry this JointGeometry object represents.")
    keyPointType = property(_get_keyPointType, None, doc="Returns the keypoint type this JointGeometry is using.")
    entityOne = property(_get_entityOne, None,
                         doc="The first entity that's defining this joint geometry. This can be various types of geometry depending on how this joint geometry is defined. The geometryType property indicates how this joint geometry is defined a provides a clue about the type of geometry to expect back from this property.")
    entityTwo = property(_get_entityTwo, None,
                         doc="This is the second entity that defines this joint geometry. This isn't used for all joint geometry types and will return null in the cases where it's not used. A second geometry is used in the case where the geometryType property returns JointProfileGeometry, JointPlanarBRepFaceGeometry, or JointBetweenTowFacesGeometry.")
    origin = property(_get_origin, None, doc="Returns the origin point that's been calculated for this joint geometry.")
    primaryAxisVector = property(_get_primaryAxisVector, None,
                                 doc="Returns the direction of the primary axis that's been calculated for this joint geometry. Conceptually, this is the X-axis of the computed coordinate system.")
    secondaryAxisVector = property(_get_secondaryAxisVector, None,
                                   doc="Returns the direction of the secondary axis that's been calculated for this joint geometry. Conceptually, this is the Y-axis of the computed coordinate system.")
    thirdAxisVector = property(_get_thirdAxisVector, None,
                               doc="Returns the direction of the third axis that's been calculated for this joint geometry. Conceptually, this is the Z-axis of the computed coordinate system.")
    planeOne = property(_get_planeOne, None,
                        doc="Returns the first plane for joint geometry that is defined between two planes. Returns null in all other cases.")
    planeTwo = property(_get_planeTwo, None,
                        doc="Returns the second plane for joint geometry that is defined between two planes. Returns null in all other cases.")


class JointGeometryTypes:
    """
    List of the different types of ways that geometry for a joint can be defined.
    """

    def __init__(self):
        pass

    JointConstructionPointGeometry = 0
    JointSketchPointGeometry = 1
    JointBRepVertexGeometry = 2
    JointBRepEdgeGeometry = 3
    JointSketchCurveGeometry = 4
    JointProfileGeometry = 5
    JointPlanarBRepFaceGeometry = 6
    JointNonPlanarBRepFaceGeometry = 7
    JointBetweenTwoPlanesGeometry = 8


class JointInput(core.Base):
    """
    Defines all of the information required to create a new joint. This object provides equivalent functionality to the Joint command dialog in that it gathers the required information to create a joint.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return JointInput()

    def _set_geometryOrOriginOne(self, geometryOrOriginOne):
        pass

    def _get_geometryOrOriginOne(self):
        return core.Base()

    def _set_geometryOrOriginTwo(self, geometryOrOriginTwo):
        pass

    def _get_geometryOrOriginTwo(self):
        return core.Base()

    def _set_angle(self, angle):
        pass

    def _get_angle(self):
        return core.ValueInput()

    def _set_offset(self, offset):
        pass

    def _get_offset(self):
        return core.ValueInput()

    def _set_isFlipped(self, isFlipped):
        pass

    def _get_isFlipped(self):
        return bool()

    def _get_jointMotion(self):
        return JointMotion()

    def setAsRigidJointMotion(self):
        """
        Defines the relationship between the two joint geometries as a rigid joint.
        Returns true if successful.
        """
        return bool()

    def setAsRevoluteJointMotion(self, rotationAxis, customRotationAxisEntity):
        """
        Defines the relationship between the two joint geometries as a revolute joint.
        rotationAxis : Specifies which axis the rotation is around. If this is set to CustomJointDirection then the customRotationAxisEntity argument must also be provided.
        customRotationAxisEntity : If the rotationAxis is customAxisEntity this argument is used to specify the entity that defines the custom axis of rotation. This can be several types of entities that an axis can be derived from.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsSliderJointMotion(self, sliderDirection, customSliderDirectionEntity):
        """
        Defines the relationship between the two joint geometries as a slider joint.
        sliderDirection : Specifies which axis the slide direction is along. If this is set to CustomJointDirection then the customSliderDirectionEntity argument must also be provided.
        customSliderDirectionEntity : If the sliderDirection is CustomJointDirection this argument is used to specify the entity that defines the custom slider direction. This can be several types of entities that can define a direction.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsCylindricalJointMotion(self, rotationAxis, customRotationAxisEntity):
        """
        Defines the relationship between the two joint geometries as a cylindrical joint.
        rotationAxis : Specifies which axis the rotation is around. If this is set to CustomJointDirection then the customRotationAxisEntity argument must also be provided.
        customRotationAxisEntity : If the rotationAxis is customAxisEntity this argument is used to specify the entity that defines the custom axis of rotation. This can be several types of entities that an axis can be derived from.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsPinSlotJointMotion(self, rotationAxis, slideDirection, customRotationAxisEntity,
                                customSlideDirectionEntity):
        """
        Defines the relationship between the two joint geometries as a pin-slot joint.
        rotationAxis : Specifies which axis the rotation is around. If this is set to CustomJointDirection then the customRotationAxisEntity argument must also be provided.
        slideDirection : Specifies which axis the slide direction is along. If this is set to CustomJointDirection then the customSlideDirectionEntity argument must also be provided.
        customRotationAxisEntity : If the rotationAxis is customAxisEntity this argument is used to specify the entity that defines the custom axis of rotation. This can be several types of entities that an axis can be derived
        customSlideDirectionEntity : If the slideDirection is CustomJointDirection this argument is used to specify the entity that defines the custom slide direction. This can be several types of entities that can define a direction.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsPlanarJointMotion(self, normalDirection, customNormalDirectionEntity, customPrimarySlideDirection):
        """
        Defines the relationship between the two joint geometries as a planar joint.
        normalDirection : Defines the direction of the normal of the single degree of rotation. This can be set to XAxisJointDirection, YAxisJointDirection, ZAxisJointDirection, or CustomJointDirection. If set to CustomJointDirection then the customNormalDirectionEntity argument must also be provided.
        customNormalDirectionEntity : If the normalDirection is CustomJointDirection this argument is used to specify the entity that defines the direction of the normal. This can be several types of entities that can define a direction.
        customPrimarySlideDirection : This arguments defines the direction of the primary slide direction. A default primary slide direction is automatically chosen and will be used if this argument is not provided or is null. The secondary slide direction is automatically inferred from the normal and primary slide directions.
        Returns true if the operation was successful.
        """
        return bool()

    def setAsBallJointMotion(self, pitchDirection, yawDirection, customPitchDirection, customYawDirection):
        """
        Defines the relationship between the two joint geometries as a ball joint.
        pitchDirection : Defines the direction the pitch angle is measured from. This can be ZAxisJointDirection or CustomJointDirection. If CustomJointDirection is specified then you must also provide a value for the customPitchDirection argument.
        yawDirection : Defines the direction the yaw is measured from. This can be XAxisJointDirection or CustomJointDirection. If CustomJointDirection is specified then you must also provide a value for the customYawDirection argument.
        customPitchDirection : If the pitchDirection argument is customPitchDirection this argument is used to define the direction the pitch angel is measured from. This can be several types of entities that can define a direction.
        customYawDirection : If the yawDirection argument is customPitchDirection this argument is used to define the direction the yaw angel is measured from. This can be several types of entities that can define a direction.
        Returns true if the operation was successful.
        """
        return bool()

    geometryOrOriginOne = property(_get_geometryOrOriginOne, _set_geometryOrOriginOne,
                                   doc="Gets and sets the first JointGeometry or JointOrigin for this joint.")
    geometryOrOriginTwo = property(_get_geometryOrOriginTwo, _set_geometryOrOriginTwo,
                                   doc="Gets and sets the second JointGeometry or JointOrigin for this joint.")
    angle = property(_get_angle, _set_angle,
                     doc="Specifies the angle between two input geometries. This is effectively the angle between the two primary axes of the input geometries. When a new JointInput object is created, this value defaults to zero. When the joint is created this will become the value of the parameter that controls the joint angle. When using a real value to define the angle, the value is in radians. When using a string the expression is evaluated using the document default units for angles.")
    offset = property(_get_offset, _set_offset,
                      doc="Specifies the offset between two input geometries. This is effectively the offset distance between the two planes defined by the primary and secondary axes of the input geometries. When a new JointInput object is created, this value defaults to zero. When the joint is created this will become the value of the parameter that controls the joint offset. When using a real value to define the offset, the value is in centimeters. When using a string the expression is evaluated using the document default units for distance.")
    isFlipped = property(_get_isFlipped, _set_isFlipped,
                         doc="Gets and sets if the joint direction is flipped or not. This is effectively specifying if the third axis of the two input geometries is facing (false) or opposed (true).")
    jointMotion = property(_get_jointMotion, None,
                           doc="Returns an object derived from JointMotion that defines how the motion between the two joint geometries is defined.")


class JointKeyPointTypes:
    """
    List of the various keypoints of geometry that can be used when defining joint geometry.
    """

    def __init__(self):
        pass

    StartKeyPoint = 0
    MiddleKeyPoint = 1
    EndKeyPoint = 2
    CenterKeyPoint = 3


class JointLimits(core.Base):
    """
    Used to define limits for the range of motion of a joint.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return JointLimits()

    def _set_minimumValue(self, minimumValue):
        pass

    def _get_minimumValue(self):
        return float()

    def _set_maximumValue(self, maximumValue):
        pass

    def _get_maximumValue(self):
        return float()

    def _set_restValue(self, restValue):
        pass

    def _get_restValue(self):
        return float()

    def _set_isMinimumValueEnabled(self, isMinimumValueEnabled):
        pass

    def _get_isMinimumValueEnabled(self):
        return bool()

    def _set_isMaximumValueEnabled(self, isMaximumValueEnabled):
        pass

    def _get_isMaximumValueEnabled(self):
        return bool()

    def _set_isRestValueEnabled(self, isRestValueEnabled):
        pass

    def _get_isRestValueEnabled(self):
        return bool()

    minimumValue = property(_get_minimumValue, _set_minimumValue,
                            doc="The minimum value of the value. This is in either centimeters or radians depending on if the joint value this is associated with defines a distance or an angle.")
    maximumValue = property(_get_maximumValue, _set_maximumValue,
                            doc="The maximum value of the value. This is in either centimeters or radians depending on if the joint value this is associated with defines a distance or an angle.")
    restValue = property(_get_restValue, _set_restValue,
                         doc="The resting state value. This is in either centimeters or radians depending on if the joint value this is associated with defines a distance or an angle.")
    isMinimumValueEnabled = property(_get_isMinimumValueEnabled, _set_isMinimumValueEnabled,
                                     doc="Gets and sets whether the minimum joint limit is enabled or not.")
    isMaximumValueEnabled = property(_get_isMaximumValueEnabled, _set_isMaximumValueEnabled,
                                     doc="Gets and sets whether the maximum joint limit is enabled or not.")
    isRestValueEnabled = property(_get_isRestValueEnabled, _set_isRestValueEnabled,
                                  doc="Gets and sets whether the resting joint value is enabled or not.")


class JointList(core.Base):
    """
    A list of joints.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return JointList()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified joint using an index into the list.
        index : The index of the item within the list to return. The first item in the list has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return Joint()

    def itemByName(self, name):
        """
        Function that returns the specified joint using a name.
        name : The name of the item within the list to return.
        Returns the specified item or null if an invalid name was specified.
        """
        return Joint()

    count = property(_get_count, None, doc="Returns number of joints in the list.")


class JointMotion(core.Base):
    """
    The base class for the classes that represent all of the various joint types.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return JointMotion()

    def _get_jointType(self):
        return JointTypes()

    jointType = property(_get_jointType, None,
                         doc="Returns an enum value indicating the type of joint this joint represents.")


class JointOrigin(core.Base):
    """
    Represents an existing joint origin in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return JointOrigin()

    def _get_parentComponent(self):
        return Component()

    def _set_name(self, name):
        pass

    def _get_name(self):
        return str()

    def _set_geometry(self, geometry):
        pass

    def _get_geometry(self):
        return JointGeometry()

    def _get_Angle(self):
        return ModelParameter()

    def _get_OffsetX(self):
        return ModelParameter()

    def _get_OffsetY(self):
        return ModelParameter()

    def _get_OffsetZ(self):
        return ModelParameter()

    def _set_isFlipped(self, isFlipped):
        pass

    def _get_isFlipped(self):
        return bool()

    def _set_XAxisEntity(self, XAxisEntity):
        pass

    def _get_XAxisEntity(self):
        return core.Base()

    def _set_ZAxisEntity(self, ZAxisEntity):
        pass

    def _get_ZAxisEntity(self):
        return core.Base()

    def _get_primaryAxisVector(self):
        return core.Vector3D()

    def _get_secondaryAxisVector(self):
        return core.Vector3D()

    def _get_thirdAxisVector(self):
        return core.Vector3D()

    def _get_timelineObject(self):
        return TimelineObject()

    def _get_nativeObject(self):
        return JointOrigin()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_attributes(self):
        return core.Attributes()

    def deleteMe(self):
        """
        Deletes this joint origin.
        Returns true if successful.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return JointOrigin()

    parentComponent = property(_get_parentComponent, None,
                               doc="Returns the parent component that owns this joint origin.")
    name = property(_get_name, _set_name,
                    doc="Gets and sets the name of this joint origin. This is the name seen by the user in the timeline.")
    geometry = property(_get_geometry, _set_geometry,
                        doc="Gets and sets the joint geometry for this joint origin input. This defines the location of the joint origin.")
    angle = property(_get_Angle, None,
                     doc="Gets the parameter that controls the angle. The value can be changed using the functionality of the returned ModelParameter object.")
    offsetX = property(_get_OffsetX, None,
                       doc="Gets the parameter that controls the X offset direction. The value can be changed using the functionality of the returned ModelParameter object.")
    offsetY = property(_get_OffsetY, None,
                       doc="Gets the parameter that controls the Y offset direction. The value can be changed using the functionality of the returned ModelParameter object.")
    offsetZ = property(_get_OffsetZ, None,
                       doc="Gets the parameter that controls the Z offset direction. The value can be changed using the functionality of the returned ModelParameter object.")
    isFlipped = property(_get_isFlipped, _set_isFlipped,
                         doc="Gets and sets if the joint origin direction is flipped or not.")
    xAxisEntity = property(_get_XAxisEntity, _set_XAxisEntity,
                           doc="Gets and sets the entity that defines the X axis direction. This defaults to null meaning the X axis is inferred from the input geometry.")
    zAxisEntity = property(_get_ZAxisEntity, _set_ZAxisEntity,
                           doc="Gets and sets the entity that defines the Z axis direction. This defaults to null meaning the Z axis is inferred from the input geometry.")
    primaryAxisVector = property(_get_primaryAxisVector, None,
                                 doc="Returns the direction of the primary axis that's been calculated for this joint origin.")
    secondaryAxisVector = property(_get_secondaryAxisVector, None,
                                   doc="Returns the direction of the secondary axis that's been calculated for this joint origin.")
    thirdAxisVector = property(_get_thirdAxisVector, None,
                               doc="Returns the direction of the third axis that's been calculated for this joint origin.")
    timelineObject = property(_get_timelineObject, None,
                              doc="Returns the timeline object associated with this joint origin.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly but is already the native object.")
    attributes = property(_get_attributes, None,
                          doc="Returns the collection of attributes associated with this joint origin.")


class JointOriginInput(core.Base):
    """
    Defines all of the information required to create a new joint origin. This object provides equivalent functionality to the Joint Origin command dialog in that it gathers the required information to create a joint origin.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return JointOriginInput()

    def _set_geometry(self, geometry):
        pass

    def _get_geometry(self):
        return JointGeometry()

    def _set_Angle(self, Angle):
        pass

    def _get_Angle(self):
        return core.ValueInput()

    def _set_OffsetX(self, OffsetX):
        pass

    def _get_OffsetX(self):
        return core.ValueInput()

    def _set_OffsetY(self, OffsetY):
        pass

    def _get_OffsetY(self):
        return core.ValueInput()

    def _set_OffsetZ(self, OffsetZ):
        pass

    def _get_OffsetZ(self):
        return core.ValueInput()

    def _set_isFlipped(self, isFlipped):
        pass

    def _get_isFlipped(self):
        return bool()

    def _set_XAxisEntity(self, XAxisEntity):
        pass

    def _get_XAxisEntity(self):
        return core.Base()

    def _set_ZAxisEntity(self, ZAxisEntity):
        pass

    def _get_ZAxisEntity(self):
        return core.Base()

    def _get_primaryAxisVector(self):
        return core.Vector3D()

    def _get_secondaryAxisVector(self):
        return core.Vector3D()

    def _get_thirdAxisVector(self):
        return core.Vector3D()

    geometry = property(_get_geometry, _set_geometry,
                        doc="Gets and sets the joint geometry for this joint origin input. This defines the location of the joint origin.")
    angle = property(_get_Angle, _set_Angle,
                     doc="Gets and sets the value that defines the angle for the joint origin. This defaults to zero if it's not specified. The value defines an angle and if the ValueInput is defined using the createByReal method the value is assumed to be radians.")
    offsetX = property(_get_OffsetX, _set_OffsetX,
                       doc="Gets and sets the value that defines the X offset direction. This defaults to zero if it's not specified. The value defines a distance and if the ValueInput is defined using the createByReal method the value is assumed to be centimeters.")
    offsetY = property(_get_OffsetY, _set_OffsetY,
                       doc="Gets and sets the value that defines the Y offset direction. This defaults to zero if it's not specified. The value defines a distance and if the ValueInput is defined using the createByReal method the value is assumed to be centimeters.")
    offsetZ = property(_get_OffsetZ, _set_OffsetZ,
                       doc="Gets and sets the value that defines the Z offset direction. This defaults to zero if it's not specified. The value defines a distance and if the ValueInput is defined using the createByReal method the value is assumed to be centimeters.")
    isFlipped = property(_get_isFlipped, _set_isFlipped,
                         doc="Gets and sets if the joint origin direction is flipped or not.")
    xAxisEntity = property(_get_XAxisEntity, _set_XAxisEntity,
                           doc="Gets and sets the entity that defines the X axis direction. This defaults to null meaning the X axis is inferred from the input geometry.")
    zAxisEntity = property(_get_ZAxisEntity, _set_ZAxisEntity,
                           doc="Gets and sets the entity that defines the Z axis direction. This defaults to null meaning the Z axis is inferred from the input geometry.")
    primaryAxisVector = property(_get_primaryAxisVector, None,
                                 doc="Returns the direction of the primary axis that's been calculated for this joint origin.")
    secondaryAxisVector = property(_get_secondaryAxisVector, None,
                                   doc="Returns the direction of the secondary axis that's been calculated for this joint origin.")
    thirdAxisVector = property(_get_thirdAxisVector, None,
                               doc="Returns the direction of the third axis that's been calculated for this joint origin.")


class JointOriginList(core.Base):
    """
    A list of joint origins.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return JointOriginList()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified joint origin using an index into the list.
        index : The index of the item within the list to return. The first item in the list has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return JointOrigin()

    def itemByName(self, name):
        """
        Function that returns the specified joint origin using a name.
        name : The name of the item within the list to return.
        Returns the specified item or null if an invalid name was specified.
        """
        return JointOrigin()

    count = property(_get_count, None, doc="Returns number of joint origins in the list.")


class JointOrigins(core.Base):
    """
    The collection of joint origins in this component. This provides access to all existing joint origins and supports the ability to create new joint origins.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return JointOrigins()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified joint origin using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return JointOrigin()

    def itemByName(self, name):
        """
        Function that returns the specified joint origin using a name.
        name : The name of the item within the collection to return.
        Returns the specified item or null if an invalid name was specified.
        """
        return JointOrigin()

    def createInput(self, geometry):
        """
        Creates a JointOriginInput object which is used to collect all of the information needed to create a simple joint origin. The creation of the input object takes the required input as the geometry argument and you can optionally use methods and properties on the created JointOriginInput to set other optional settings. The JointOrigin is created by calling the add method of the JointOrigins object and passing it the JointOriginInput object.
        geometry : A JointGeometry object that defines the geometry the joint origin will be created on.
        Returns a JointOriginInput object if successfully created and null if it fails.
        """
        return JointOriginInput()

    def add(self, input):
        """
        Create a new joint origin.
        input : A JointOriginInput object that full defines all of the information needed to create a joint origin. You create a JointOriginInput by using the createInput method of the JointOrigins object.
        Returns a JointOrigin object if successfully created and null if it fails.
        """
        return JointOrigin()

    count = property(_get_count, None, doc="Returns number of joint origins in the collection.")


class Joints(core.Base):
    """
    The collection of joints in this component. This provides access to all existing joints and supports the ability to create new joints.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return Joints()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified joint using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return Joint()

    def createInput(self, geometryOrOriginOne, geometryOrOriginTwo):
        """
        Creates a JointInput object, which is the API equivalent to the Joint command dialog. You you use methods and properties on the returned class to set the desired options, similar to providing input and setting options in the Joint command dialog. Once the settings are defined you call the Joints.add method passing in the JointInput object to create the actual joint.
        geometryOrOriginOne : A JointGeometry or JointOrigin object that defines the first set of geometry of the joint. JointGeometry objects are created by using the various static methods on the JointGeometry class and JointOrigin objects are created through the JointOrigins object.
        geometryOrOriginTwo : A JointGeometry or JointOrigin object that defines the second set of geometry of the joint. JointGeometry objects are created by using the various static methods on the JointGeometry class and JointOrigin objects are created through the JointOrigins object.
        Returns the JointInput object or null if the creation failed.
        """
        return JointInput()

    def add(self, input):
        """
        Creates a new joint.
        input : The JointInput object that defines the geometry and various inputs that fully define a joint. A JointInput object is created using the Joints.createInput method.
        Returns the newly created Joint or null in the case of failure.
        """
        return Joint()

    def itemByName(self, name):
        """
        Function that returns the specified joint using a name.
        name : The name of the item within the collection to return.
        Returns the specified item or null if an invalid name was specified.
        """
        return Joint()

    count = property(_get_count, None, doc="Returns number of joints in the collection.")


class JointTypes:
    """
    List of the various types of joints.
    """

    def __init__(self):
        pass

    RigidJointType = 0
    RevoluteJointType = 1
    SliderJointType = 2
    CylindricalJointType = 3
    PinSlotJointType = 4
    PlanarJointType = 5
    BallJointType = 6


class LineStylePatterns:
    """
    Specifies the line styles that can be applied to custom graphics lines and curves.
    """

    def __init__(self):
        pass

    continuousLineStylePattern = 0
    centerLineStylePattern = 1
    dashedLineStylePattern = 2
    dotLineStylePattern = 3
    hiddenLineStylePattern = 4
    phantomLineStylePattern = 5
    tracksLineStylePattern = 6
    zigzagLineStylePattern = 7


class LoftCenterLineOrRail(core.Base):
    """
    Represent a centerline or a single rail used by a loft feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return LoftCenterLineOrRail()

    def _get_isCenterLine(self):
        return bool()

    def _set_entity(self, entity):
        pass

    def _get_entity(self):
        return core.Base()

    def deleteMe(self):
        """
        Deletes the centerline or rail.
        Returns true if the operation was successful.
        """
        return bool()

    isCenterLine = property(_get_isCenterLine, None,
                            doc="Indicates if this object is a loft centerline (true) or a rail (false).")
    entity = property(_get_entity, _set_entity,
                      doc="Gets and sets the entitiy that defines the centerline or rail. This can be a single sketch entity, a single BRepEdge, a Path, or a Profile.")


class LoftCenterLineOrRails(core.Base):
    """
    Defines a single centerline or one or more rails for a loft feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return LoftCenterLineOrRails()

    def _get_count(self):
        return int()

    def _get_isCenterLine(self):
        return bool()

    def item(self, index):
        """
        Function that returns the specified LoftCenterLineOrRail using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return LoftCenterLineOrRail()

    def addCenterLine(self, entity):
        """
        Adds a centerline. A single centerline can be defined for a loft. If a centerline or rails have already been defined, they will be removed and the input will become the new single centerline.
        entity : The entity that defines the center line. This can be a single sketch curve, a single BRepEdge, a Path consisting of connected B-Rep edges or sketch curves.
        Returns the new LoftCenterLineOrRail object or null in the case of a failure.
        """
        return LoftCenterLineOrRail()

    def addRail(self, entity):
        """
        Add a rail to the loft definition. Multiple rails can be defined, so each call of this method adds a new rail.
        entity : The entity that defines the rail. This can be a single sketch curve, a single BRepEdge, or a Path consisting of connected B-Rep edges or sketch curves.
        Returns the new LoftCenterLineOrRail object or null in the case of a failure.
        """
        return LoftCenterLineOrRail()

    count = property(_get_count, None, doc="The number of centerlines or rails in the collection.")
    isCenterLine = property(_get_isCenterLine, None, doc="Indicates if a centerline or rails are currently defined.")


class LoftEndCondition(core.Base):
    """
    The base class for all loft end conditions.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return LoftEndCondition()

    def _get_parentLoftSection(self):
        return LoftSection()

    parentLoftSection = property(_get_parentLoftSection, None, doc="Returns the parent loft section.")


class LoftFeatureInput(core.Base):
    """
    This object defines the all of the input necessary to create a loft feature. It is the programming equivalent to the Loft command dialog. Through this object you provide the input needed to fully define a loft. To create the loft feature you pass this object the the LoftFeatures.add method.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return LoftFeatureInput()

    def _get_loftSections(self):
        return LoftSections()

    def _get_centerLineOrRails(self):
        return LoftCenterLineOrRails()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return FeatureOperations()

    def _set_creationOccurrence(self, creationOccurrence):
        pass

    def _get_creationOccurrence(self):
        return Occurrence()

    def _set_isSolid(self, isSolid):
        pass

    def _get_isSolid(self):
        return bool()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    def _set_participantBodies(self, participantBodies):
        pass

    def _get_participantBodies(self):
        return BRepBody()

    loftSections = property(_get_loftSections, None,
                            doc="The set of sections, (or profiles as they're referred to in the user-interface), that the loft will pass through. Use the add method on the LoftSections object to specify new sections.")
    centerLineOrRails = property(_get_centerLineOrRails, None,
                                 doc="The single centerline or set of rails that define the shape of the loft. Use methods on the returned LoftCenterLineOrRails object to define the centerline or rails.")
    operation = property(_get_operation, _set_operation,
                         doc="Gets and sets the type of operation performed by the loft.")
    creationOccurrence = property(_get_creationOccurrence, _set_creationOccurrence,
                                  doc="In order for geometry to be transformed correctly, an Occurrence for creation needs to be specified when the loft is created based on geometry (e.g. a profile and/or face(s)) when the loft is being created in another component AND the loft is not in the root component. The CreationOccurrence is analogous to the active occurrence in the UI")
    isSolid = property(_get_isSolid, _set_isSolid,
                       doc="Specifies if the loft should be created as a solid or surface. This is initialized to true so a solid will attempt to be created if it's not changed.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")
    participantBodies = property(_get_participantBodies, _set_participantBodies,
                                 doc="Gets and sets the list of bodies that will participate in the feature when the operation is a cut or intersection. If this property has not been set, the default behavior is that all bodies that are intersected by the feature will participate. This property can return null in the case where the feature has not been fully defined so that possible intersecting bodies can be computed.")


class LoftFeatures(core.Base):
    """
    Collection that provides access to all of the existing loft features in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return LoftFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified loft feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return LoftFeature()

    def itemByName(self, name):
        """
        Function that returns the specified loft feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return LoftFeature()

    def createInput(self, operation):
        """
        Creates a LoftFeatureInput object. Use properties and methods on the returned LoftFeatureInput object to provide the required input to create a loft feature. The LoftFeatureInput object can then be used as input to the add method to create the loft feature.
        operation : The feature operation to perform.
        Returns the newly created LoftFeatureInput object or null if the creation failed.
        """
        return LoftFeatureInput()

    def add(self, input):
        """
        Creates a new loft feature.
        input : A LoftFeatureInput object that defines the desired loft feature. Use the createInput method to create a new LoftFeatureInput object and then use methods on it (the LoftFeatureInput object) to define the required input.
        Returns the newly created LoftFeature object or null if the creation failed.
        """
        return LoftFeature()

    count = property(_get_count, None, doc="The number of loft features in the collection.")


class LoftSection(core.Base):
    """
    A single loft section.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return LoftSection()

    def _set_entity(self, entity):
        pass

    def _get_entity(self):
        return core.Base()

    def _get_index(self):
        return int()

    def _get_endCondition(self):
        return LoftEndCondition()

    def deleteMe(self):
        """
        Deletes this LoftSection.
        Returns true if the operation was successful.
        """
        return bool()

    def reorder(self, newIndex):
        """
        Repositions this section so that it has the new index specified.
        newIndex : The new index value. For example, passing in zero as the new index will make this the first section in the loft and (LoftSections.count - 1) will make it the last section. All other sections will be maintain their existing order but be shifted to allow space for this section.
        Returns true if the reorder operation was successful.
        """
        return bool()

    def setFreeEndCondition(self):
        """
        Sets the end condition to be a 'Free' end condition. This is the default end condition when a new section is added. This is valid for sections defined with all curve types.
        Returns true if the operation was successful.
        """
        return bool()

    def setDirectionEndCondition(self, angle, weight):
        """
        Sets the end condition to be defined by a direction and weight. This is valid for sections defined with sketch curves.
        angle : Input ValueInput object that specifies the direction by using an angle. This defaults to an angle of 0.0. If the ValueInput object is a string it must be an valid expression that can be evaluated as an angle. If the ValueInput is a value then it is in radians.
        weight : Input ValueInput object that defines the weight or the amount of influence of end condition on the loft. This defaults to a value of 1.0. If the ValueInput object is a string it must be an valid expression that can be evaluated as a unitless value. In any case, the value must be greater than 0.
        Returns true if the operation was successful.
        """
        return bool()

    def setTangentEndCondition(self, weight):
        """
        Sets the end condition to be tangent to the adjacent face. If the section is not defined by a BRepEdge, then this is ignored because there is no face to be tangent to. This is only valid on the first or last profile.
        weight : Input ValueInput object that defines the weight or the amount of influence of end condition on the loft. This defaults to a value of 1.0. If the ValueInput object is a string it must be an valid expression that can be evaluated as a unitless value. In any case, the value must be greater than 0.
        Returns true if the operation was successful.
        """
        return bool()

    def setSmoothEndCondition(self, weight):
        """
        Sets the end condition to be smooth to the adjacent face. If the end profile is not defined by a BRepEdge, then this is ignored because there is no face to be smooth to. This is only valid on the first or last section.
        weight : Input ValueInput object that defines the weight or the amount of influence of end condition on the loft. This defaults to a value of 1.0. If the ValueInput object is a string it must be an valid expression that can be evaluated as a unitless value. In any case, the value must be greater than 0.
        Returns true if the operation was successful.
        """
        return bool()

    def setPointSharpEndCondition(self):
        """
        Sets the end condition to be sharp where the section is a point. This is the default condition for a point section.
        Returns true if the operation was successful.
        """
        return bool()

    def setPointTangentEndCondition(self, weight):
        """
        Set the end condition to a tangent condition in the case where the section is a point.
        weight : Input ValueInput object that defines the weight or the amount of influence of end condition on the loft. This defaults to a value of 1.0. If the ValueInput object is a string it must be an valid expression that can be evaluated as a unitless value. In any case, the value must be greater than 0.
        Returns true if the operation was successful.
        """
        return bool()

    entity = property(_get_entity, _set_entity,
                      doc="Get and sets the entity that defines the section of the loft. This can be a BRepFace, Profile, Path, SketchPoint, ConstructionPoint, or an ObjectCollection of contiguous profiles.")
    index = property(_get_index, None,
                     doc="The position of this LoftSection within the collection. The first section has an index of 0. This is also the order of how the section will be used in the loft. The order can be modified by using the reorder method.")
    endCondition = property(_get_endCondition, None,
                            doc="Returns the current end condition. This is only valid for the first and last section and when the result is not closed. In other cases this will return null. This returns one of the several objects derived from LoftEndCondition and represents the current end condition. You can edit the existing condition using properties on the returned object. You can change the end condition using one of the set methods on the LoftSection object.")


class LoftSections(core.Base):
    """
    The set of two or more sections used to define the shape of the loft.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return LoftSections()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified LoftSection using an index into the collection. They are returned in the same order that they are used in the loft. Their order can be modified using the reorder method of the LoftSection object.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return LoftSection()

    def add(self, entity):
        """
        Adds a new section to the loft. The initial end condition is 'Free'. Additional methods on the returned LoftSection can be used to further define the section.
        entity : Specifies the BRepFace, Profile, Path, SketchPoint, ConstructionPoint, or an ObjectCollection containing a contiguous set of Profile objects that defines the section.
        Returns the newly created LoftSection object.
        """
        return LoftSection()

    count = property(_get_count, None, doc="The number of LoftSections in the collection.")


class MeshBodies(core.Base):
    """
    Provides access to the MeshBodies in the parent Component and supports the creation of new mesh bodies.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return MeshBodies()

    def _get_count(self):
        return int()

    def add(self, fullFilename, units, baseOrFormFeature):
        """
        Creates a new mesh body by importing an .stl or .obj file. Because of a current limitation, if you want to create a mesh body in a parametric model, you must first call the edit method of the base or form feature, use this method to create the mesh body, and then call the finishEdit method of the base or form feature. The base or form feature must be in an 'edit' state to be able to add any additional items to it.
        fullFilename : The full filename (path and file) of a .stl or .obj file.
        units : The units to use when importing the file.
        baseOrFormFeature : The BaseFeature or FormFeature object that this mesh body will be associated with. This is an optional requirement and is required when the model design history is being captured (paremetric model) but is ignored otherwise (direct edit model).
        Returns a list of the newly created mesh bodies or null if the creation failed. Multiple bodies can be created in the case where a .obj file that contains multiple bodies was imported. stl files always contain a single body.
        """
        return MeshBodyList()

    def item(self, index):
        """
        Provides access to a mesh body within the collection.
        index : The index of the mesh body to return, where an index of 0 is the first mesh body in the collection.
        Returns the specified mesh body or null in the case of a invalid index.
        """
        return MeshBody()

    def addByTriangleMeshData(self, coordinates, coordinateIndexList, normalVectors, normalIndexList):
        """
        Createa a new mesh body using the mesh description provided.
        coordinates : Input array of doubles that defines the X, Y, Z coordinates of each node in the mesh. Each set of three numbers define the coordinates of a node.
        coordinateIndexList : An array of integers that represent indices into the coordinates to define the vertices of the triangles. If an empty array is provided, then it's assumed that the first three coordinates defines the first triangle, the next three define the second triangle, and so on.
        normalVectors : An array of doubles that represent the x, y, z components of the normals at each coordinate. There should be a normal defined for each coordinate. If an empty array is provided for the normal vectors, Fusion 360 will automatically calculate normal vectors that are 90 degrees to the face of the triangle, making it appear flat.
        normalIndexList : An array of integers that represent indices into the normal vectors to define the which vector corresponds to which vertex. This should be the same size as the vertex index list. If an empty array is input and normal vectors are provided, it is assumed that the normals match up one-to-one to each coordinate.
        Returns the newly created MeshBody object or null in the case of a failure.
        """
        return MeshBody()

    count = property(_get_count, None, doc="Returns the number of mesh bodies in the collection.")


class MeshBody(core.Base):
    """
    Provides access to a mesh body.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return MeshBody()

    def _set_name(self, name):
        pass

    def _get_name(self):
        return str()

    def _set_isSelectable(self, isSelectable):
        pass

    def _get_isSelectable(self):
        return bool()

    def _set_isLightBulbOn(self, isLightBulbOn):
        pass

    def _get_isLightBulbOn(self):
        return bool()

    def _get_isVisible(self):
        return bool()

    def _get_mesh(self):
        return PolygonMesh()

    def _get_displayMesh(self):
        return TriangleMesh()

    def _get_parentComponent(self):
        return Component()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return MeshBody()

    def _get_baseOrFormFeature(self):
        return core.Base()

    def _get_attributes(self):
        return core.Attributes()

    def _set_material(self, material):
        pass

    def _get_material(self):
        return core.Material()

    def _set_appearance(self, appearance):
        pass

    def _get_appearance(self):
        return core.Appearance()

    def _get_appearanceSourceType(self):
        return core.AppearanceSourceTypes()

    def _set_opacity(self, opacity):
        pass

    def _get_opacity(self):
        return float()

    def _get_visibleOpacity(self):
        return float()

    def deleteMe(self):
        """
        Deletes the mesh body.
        Returns true in the case where the selection was successful.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence. Fails if this object is not the NativeObject.
        occurrence : The occurrence that represents the context you want to create this proxy in.
        Returns the proxy for the occurrence in the context of the specified occurrence. Returns null if it failed.
        """
        return MeshBody()

    name = property(_get_name, _set_name, doc="Gets and sets the name of the mesh body as displayed in the browser.")
    isSelectable = property(_get_isSelectable, _set_isSelectable,
                            doc="Gets and sets if the mesh body is selectable in the graphics window.")
    isLightBulbOn = property(_get_isLightBulbOn, _set_isLightBulbOn,
                             doc="Is the light bulb (as displayed in the browser) on. A mesh body will only be visible if the light bulb is switched on. However, the light bulb can be on and the mesh body is still invisible if the light bulb for all bodies or the owning component is off.")
    isVisible = property(_get_isVisible, None, doc="Gets if the mesh body point is visible.")
    mesh = property(_get_mesh, None,
                    doc="Returns the original mesh data that was imported. This can include triangles, quads, and polygons.")
    displayMesh = property(_get_displayMesh, None,
                           doc="Returns the associated mesh that is used for the display. This will always be triangles and includes any textures.")
    parentComponent = property(_get_parentComponent, None, doc="Returns the parent Component.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly but is already the native object.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    baseOrFormFeature = property(_get_baseOrFormFeature, None,
                                 doc="This property returns the base or form feature that this mesh body is associated with. It returns null in the case where the modeling design history is not being captured (direct edit model).")
    attributes = property(_get_attributes, None,
                          doc="Returns the collection of attributes associated with this mesh body.")
    material = property(_get_material, _set_material,
                        doc="Gets and sets the physical material assigned to this mesh body.")
    appearance = property(_get_appearance, _set_appearance,
                          doc="Read-write property that gets and sets the current appearance of the body. Setting this property will result in applying an override appearance to the body and the AppearanceSourceType property will return OverrideAppearanceSource. Setting this property to null will remove any override.")
    appearanceSourceType = property(_get_appearanceSourceType, None,
                                    doc="Read-write property that gets the source of the appearance for the body. If this returns OverrideAppearanceSource, an override exists on this body. The override can be removed by setting the Appearance property to null.")
    opacity = property(_get_opacity, _set_opacity,
                       doc="Gets and sets the opacity override assigned to this body. A value of 1.0 specifies that is it completely opaque and a value of 0.0 specifies that is it completely transparent. This value is not necessarily related to what the user sees because the opacity is inherited. For example, if you this body is in a component and that component's opacity is set to something other than 1.0, the body will also be shown as slightly transparent even though the opacity property for the body will return 1.0. Because the component that contains the body can be referenced as an occurrence in other components and they can have different opacity settings, it's possible that different instances of the same body can display using different opacity levels. To get the opacity that it is being displayed with use the MeshBody.visibleOpacity property. This is the API equivalent of the 'Opacity Control' command available for the body in the browser.")
    visibleOpacity = property(_get_visibleOpacity, None,
                              doc="The user can set an override opacity for components and bodies these opacity overrides combine if children and parent components have overrides. This property returns the actual opacity that is being used to render the body. To set the opacity use the opacity property of the MeshBody object.")


class MeshBodyList(core.Base):
    """
    Provides access to a list of MeshBody objects.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return MeshBodyList()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Provides access to a mesh body within the collection.
        index : The index of the mesh body to return, where an index of 0 is the first mesh body in the collection.
        Returns the specified mesh body or null in the case of a invalid index.
        """
        return MeshBody()

    count = property(_get_count, None, doc="Returns the number of mesh bodies in the collection.")


class MeshManager(core.Base):
    """
    Provides access to meshes that approximate a B-Rep and T-Spline.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return MeshManager()

    def _get_displayMeshes(self):
        return TriangleMeshList()

    def _get_parent(self):
        return core.Base()

    def createMeshCalculator(self):
        """
        Creates a new MeshCalculator which is used to calculate new triangular meshes based on various parameters that control the calculation.
        Returns the new MeshCalculator object or null if the creation failed.
        """
        return TriangleMeshCalculator()

    displayMeshes = property(_get_displayMeshes, None,
                             doc="Returns a collection that provides access to all of the existing display meshes.")
    parent = property(_get_parent, None,
                      doc="Returns the parent BRepBody, BRepFace, BRepLump, BRepShell, SculptBody, or SculptFace object.")


class MeshRefinementSettings:
    """
    The different refinement settings supported when exporting the design as an STL file.
    """

    def __init__(self):
        pass

    MeshRefinementHigh = 0
    MeshRefinementMedium = 1
    MeshRefinementLow = 2
    MeshRefinementCustom = 3


class MeshUnits:
    """
    The unit types that can be specified when importing a .stl or .obj file as a mesh.
    """

    def __init__(self):
        pass

    CentimeterMeshUnit = 0
    MillimeterMeshUnit = 1
    MeterMeshUnit = 2
    InchMeshUnit = 3
    FootMeshUnit = 4


class MirrorFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a mirror feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return MirrorFeatureInput()

    def _set_inputEntities(self, inputEntities):
        pass

    def _get_inputEntities(self):
        return core.ObjectCollection()

    def _set_mirrorPlane(self, mirrorPlane):
        pass

    def _get_mirrorPlane(self):
        return core.Base()

    def _set_patternComputeOption(self, patternComputeOption):
        pass

    def _get_patternComputeOption(self):
        return PatternComputeOptions()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    inputEntities = property(_get_inputEntities, _set_inputEntities,
                             doc="Gets and sets the entities that are mirrored. It can contain faces, features, bodies, or components. The input must all be of a single type. For example, you can't provide a body and a component but the collection must be either all bodies or all components.")
    mirrorPlane = property(_get_mirrorPlane, _set_mirrorPlane,
                           doc="Gets and sets the mirror plane. This can be either a planar face or construction plane.")
    patternComputeOption = property(_get_patternComputeOption, _set_patternComputeOption,
                                    doc="Gets and sets the compute option when mirroring features. The default value for this is AdjustPatternCompute. This property only applies when mirroring features and is ignored in the direct modeling environment.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class MirrorFeatures(core.Base):
    """
    Collection that provides access to all of the existing mirror features in a component and supports the ability to create new mirror features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return MirrorFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified mirror feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return MirrorFeature()

    def createInput(self, inputEntities, mirrorPlane):
        """
        Creates a MirrorFeatureInput object. Use properties and methods on this object to define the mirror you want to create and then use the Add method, passing in the MirrorFeatureInput object.
        inputEntities : A collection of the entities to mirror. It can contain faces, features, bodies, or components. The input must all be of a single type. For example, you can't provide a body and a component but the collection must be either all bodies or all components.
        mirrorPlane : Input planar entity that defines the mirror plane. This can be either a planar face or a construction plane.
        Returns the newly created MirrorFeatureInput object or null if the creation failed.
        """
        return MirrorFeatureInput()

    def add(self, input):
        """
        Creates a new mirror feature.
        input : A MirrorFeatureInput object that defines the desired mirror. Use the createInput method to create a new MirrorFeatureInput object and then use methods on it (the MirrorFeatureInput object) to define the mirror.
        Returns the newly created MirrorFeature object or null if the creation failed.
        """
        return MirrorFeature()

    def itemByName(self, name):
        """
        Function that returns the specified mirror feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return MirrorFeature()

    count = property(_get_count, None, doc="The number of mirror features in the collection.")


class ModelParameters(core.Base):
    """
    Provides access to the Model Parameters within a component.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ModelParameters()

    def _get_count(self):
        return int()

    def _get_component(self):
        return Component()

    def item(self, index):
        """
        Function that returns the specified Model Parameter using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return ModelParameter()

    def itemByName(self, name):
        """
        Function that returns the specified Model Parameter using the name of the parameter as it is displayed in the parameters dialog.
        name : The name of the Model Parameter as it is displayed in the parameters dialog
        Returns the specified item or null if an invalid name was specified.
        """
        return ModelParameter()

    count = property(_get_count, None, doc="Returns the number of parameters in the collection.")
    component = property(_get_component, None, doc="Returns the component that owns the Model Parameters collection")


class MoveFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a move feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return MoveFeatureInput()

    def _set_inputEntities(self, inputEntities):
        pass

    def _get_inputEntities(self):
        return core.ObjectCollection()

    def _set_transform(self, transform):
        pass

    def _get_transform(self):
        return core.Matrix3D()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    inputEntities = property(_get_inputEntities, _set_inputEntities,
                             doc="Gets and sets the entities to move. This collection can only contain BRepBody objects in parametric modeling. It can be BRep bodies, T-Spline bodies and mesh bodies mixed or faces and features mixed in non-parametric modeling.")
    transform = property(_get_transform, _set_transform,
                         doc="Gets and sets the tranform to apply to the input entities. This can describe a move (translation) or a rotation. The matrix must define an orthogonal transform. That is the axes remain perpendicular to each other and there isn't any scale or mirror defined.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class MoveFeatures(core.Base):
    """
    Collection that provides access to all of the existing move features in a component and supports the ability to create new move features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return MoveFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified move feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return MoveFeature()

    def createInput(self, inputEntities, transform):
        """
        Creates a MoveFeatureInput object. Use properties and methods on this object to define the move feature you want to create and then use the Add method, passing in the MoveFeatureInput object.
        inputEntities : Input the entities to move. This collection can only contain BRepBody objects in parametric modeling. It can be BRep bodies, T-Spline bodies, mesh bodies mixed or faces and features mixed in non-parametric modeling.
        transform : The transform to apply to the input entities. This can describe a move (translation) or a rotation. The matrix must define an orthogonal transform. That is the axes remain perpendicular to each other and there isn't any scale or mirror defined.
        Returns the newly created MoveFeatureInput object or null if the creation failed.
        """
        return MoveFeatureInput()

    def add(self, input):
        """
        Creates a new move feature.
        input : A MoveFeatureInput object that defines the desired move feature. Use the createInput method to create a new MoveFeatureInput object and then use methods on it (the MoveFeatureInput object) to define the move feature.
        Returns the newly created MoveFeature object or null if the creation failed. Returns nothing in the case where the feature is non-parametric.
        """
        return MoveFeature()

    def itemByName(self, name):
        """
        Function that returns the specified move feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return MoveFeature()

    count = property(_get_count, None, doc="The number of move features in the collection.")


class Occurrence(core.Base):
    """
    Represents an occurrence of a component at any level within a subassembly.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return Occurrence()

    def _get_sourceComponent(self):
        return Component()

    def _get_childOccurrences(self):
        return OccurrenceList()

    def _get_component(self):
        return Component()

    def _get_name(self):
        return str()

    def _get_fullPathName(self):
        return str()

    def _set_appearance(self, appearance):
        pass

    def _get_appearance(self):
        return core.Appearance()

    def _set_isLightBulbOn(self, isLightBulbOn):
        pass

    def _get_isLightBulbOn(self):
        return bool()

    def _get_isVisible(self):
        return bool()

    def _set_transform(self, transform):
        pass

    def _get_transform(self):
        return core.Matrix3D()

    def _get_timelineObject(self):
        return TimelineObject()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return Occurrence()

    def _set_isGrounded(self, isGrounded):
        pass

    def _get_isGrounded(self):
        return bool()

    def _set_isSelectable(self, isSelectable):
        pass

    def _get_isSelectable(self):
        return bool()

    def _set_isIsolated(self, isIsolated):
        pass

    def _get_isIsolated(self):
        return bool()

    def _get_isActive(self):
        return bool()

    def _get_physicalProperties(self):
        return PhysicalProperties()

    def _get_isReferencedComponent(self):
        return bool()

    def _get_boundingBox(self):
        return core.BoundingBox3D()

    def _get_joints(self):
        return JointList()

    def _get_rigidGroups(self):
        return RigidGroupList()

    def _get_asBuiltJoints(self):
        return AsBuiltJointList()

    def _get_attributes(self):
        return core.Attributes()

    def _get_bRepBodies(self):
        return BRepBodies()

    def _get_visibleOpacity(self):
        return float()

    def deleteMe(self):
        """
        Deletes the occurrence from the design. If this is the last occurrence referencing a specific Component, the component is also deleted.
        Returns true if the delete was successful.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence. Fails if this object is not the NativeObject.
        occurrence : The occurrence that represents the context you want to create this proxy in.
        Returns the proxy for the occurrence in the context of the specified occurrence. Returns null if it failed.
        """
        return Occurrence()

    def activate(self):
        """
        Makes the occurrence the active edit target in the user interface. This is the same as enabling the radio button next to the occurrence in the browser.
        Returns true if the activation was successful.
        """
        return bool()

    def moveToComponent(self, targetOccurrence):
        """
        Moves this occurrence from it's current component into the component owned by the specified occurrence. This occurrence and the target occurrence must be in the same context.
        targetOccurrence : The target occurrence defines both the component and the transform to apply when moving the occurrence. The occurrence will be copied into the parent component of the target occurrence and the target occurrence also defines the transform of how the occurrence will be copied so that the occurrence maintains it's same position in model space.
        Returns the moved Occurrence or null in the case the move failed.
        """
        return Occurrence()

    def getPhysicalProperties(self, accuracy):
        """
        Returns the PhysicalProperties object that has properties for getting the area, density, mass, volume, moments, etc of this occurrence.
        accuracy : Specifies the desired level of computational accuracy of the property calculations. The default value of 'LowCalculationAccuracy' returns results within a +/- 1% error margin.
        """
        return PhysicalProperties()

    def breakLink(self):
        """
        When the component this occurrence references is an external reference (the isReferencedComponent property returns true), this will break the link and create a local Component that this occurrence will reference. The new local Component can be accessed through the Occurrence using the component property. This method will fail if the occurrence is not referencing an external component.
        Returns true if the break link was successful.
        """
        return bool()

    sourceComponent = property(_get_sourceComponent, None,
                               doc="This is the sourceComponent for the occurrence and is affected by the assembly context. This is the top-level component where the path begins.")
    childOccurrences = property(_get_childOccurrences, None,
                                doc="Returns a read only list of child occurrences where only the occurrences in this occurrence's AssemblyContext are returned .")
    component = property(_get_component, None, doc="The component this occurrence references.")
    name = property(_get_name, None,
                    doc="The name of the occurrence. This is the name as seen in the browser. It is a reflection of the component name with an added counter suffix (i.e. 'OccurrenceName:1').")
    fullPathName = property(_get_fullPathName, None,
                            doc="The name of the occurrence, including the full path of occurrences as seen in the browser. The top-level component will depend on the context but will typically be the root component of the design. A name for an occurrence that is at the third level of an assembly could be 'Sub1:1+Sub2:1+PartA:1'.")
    appearance = property(_get_appearance, _set_appearance,
                          doc="Read-write property that gets and sets the appearance override for this occurrence. This property can return null indicating there is no override appearance and that the contents of the occurrence are displayed using there defined appearance. Setting the property to null will remove any override appearance for this occurrence.")
    isLightBulbOn = property(_get_isLightBulbOn, _set_isLightBulbOn,
                             doc="Gets and sets if the light bulb of this occurrence as displayed in the browser is on or off. An occurrence will only be visible if the light bulb is switched on. However, the light bulb can be on and the occurrence still invisible if a higher level occurrence in the assembly context is not visible because its light bulb is off.")
    isVisible = property(_get_isVisible, None,
                         doc="Gets whether the occurrence is visible. This property is affected by the assembly context.")
    transform = property(_get_transform, _set_transform,
                         doc="Gets and sets the 3d matrix data that defines this occurrences orientation and position in its assembly context")
    timelineObject = property(_get_timelineObject, None,
                              doc="Returns the timeline object associated with the creation of this occurrence.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this references the component the object is defined within. Returns null in the case where the object is not in the context of an assembly but is already the native object.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly. Returns null in the case where this object is not in the context of an assembly but is already the native object. The return type is strongly typed for each object.")
    isGrounded = property(_get_isGrounded, _set_isGrounded,
                          doc="Gets and sets whether this occurrence is grounded or not.")
    isSelectable = property(_get_isSelectable, _set_isSelectable,
                            doc="Gets and sets whether this occurrence is selectable or not.")
    isIsolated = property(_get_isIsolated, _set_isIsolated,
                          doc="Gets and sets whether this occurrence is isolated in the UI. When an occurrence is isolated it is the only one visible in the user-interface. Only one occurrence can be isolated at a time so setting this property to true will unisolate an occurrence that is currently isolated. Setting this property to false for an occurrence that is current isolated will unisolate it so that no occurrence will be isolated.")
    isActive = property(_get_isActive, None,
                        doc="Gets whether this occurrence is the active edit target in the user interface. This is the same as checking the state of the radio button next to the occurrence in the browser. To activate the occurrence use the Activate method.")
    physicalProperties = property(_get_physicalProperties, None,
                                  doc="Returns the PhysicalProperties object that has properties for getting the area, density, mass, volume, moments, etc of this occurrence. Property values will be calulated using the 'LowCalculationAccuracy' setting when using this property to get the PhysicalProperties object. To specify a higher calculation tolerance, use the getPhysicalProperties method instead.")
    isReferencedComponent = property(_get_isReferencedComponent, None,
                                     doc="Gets if this occurrence is referencing an external component.")
    boundingBox = property(_get_boundingBox, None, doc="Returns the bounding box of this occurrence.")
    joints = property(_get_joints, None,
                      doc="Returns the joints that affect the position of this occurrence. For example, if a joint has been created between this occurrence and another occurrence, this property will return that joint. If the occurrence is a proxy, the joints returned will also be proxies in the same context as the occurrence.")
    rigidGroups = property(_get_rigidGroups, None,
                           doc="Returns the rigid groups that this occurrence is a member of. If the occurrence is a proxy, the joints returned will also be proxies in the same context as the occurrence.")
    asBuiltJoints = property(_get_asBuiltJoints, None,
                             doc="Returns the as-built joints that affect the position of this occurrence. If the occurrence is a proxy, the as-built joints returned will also be proxies in the same context as the occurrence.")
    attributes = property(_get_attributes, None, doc="Returns the collection of attributes associated with this face.")
    bRepBodies = property(_get_bRepBodies, None,
                          doc="Returns the body proxies for the B-Rep bodies in the component referenced by this occurrence. For example if you get the occurrences from the root component and then use this property to get the bodies from those occurrences, the bodies returned will return information in the context of the root component, not the component they actually exist in.")
    visibleOpacity = property(_get_visibleOpacity, None,
                              doc="The user can set an override opacity for components and these opacity overrides combine if children and parent components have overrides. This property returns the actual opacity that is being used to render the occurence. To set the opacity use the opacity property of the Component object.")


class OccurrenceList(core.Base):
    """
    Provides a list of occurrences.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return OccurrenceList()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Returns the specified occurrence using an index into the collection.
        index : The index of the occurrence within the collection to return. The first item has an index of 0.
        Returns the specified occurrence or null in the case of an invalid index.
        """
        return Occurrence()

    def itemByName(self, name):
        """
        Returns the specified occurrence using the name of the occurrence.
        name : The name of the occurrence to return.
        Returns the occurrence or null if an invalid name was specified
        """
        return Occurrence()

    count = property(_get_count, None, doc="Returns the number of occurrences in the collection.")


class Occurrences(core.Base):
    """
    Provides access to occurrences within a component and provides methods to create new occurrences.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return Occurrences()

    def _get_count(self):
        return int()

    def _get_asList(self):
        return OccurrenceList()

    def item(self, index):
        """
        Function that returns the specified occurrence using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return Occurrence()

    def itemByName(self, name):
        """
        Returns the specified occurrence using the name of the occurrence.
        name : The name of the occurrence to return.
        Returns the occurrence or null if an invalid name was specified
        """
        return Occurrence()

    def addExistingComponent(self, component, transform):
        """
        Method that creates a new occurrence using an existing component. This is the equivalent of copying and pasting an occurrence in the user interface.
        component : The existing component to create a new occurrence of.
        transform : A transform that defines the location for the new occurrence
        Returns the newly created occurrence or null if the creation failed.
        """
        return Occurrence()

    def addNewComponent(self, transform):
        """
        Method that creates a new component and an occurrence that references it.
        transform : A transform that defines the location for the new occurrence.
        Returns the newly created occurrence or null if the creation failed.
        """
        return Occurrence()

    def addByInsert(self, dataFile, transform, isReferencedComponent):
        """
        Method that inserts an existing file.
        dataFile : The dataFile to insert.
        transform : A transform that defines the location for the new occurrence.
        isReferencedComponent : Indicates if the insert is to be an external reference or embedded within this document. This method will fail if the dataFile being inserted is not from the same project as the document it is being inserted into while isReferencedComponent is True.
        Returns the newly created occurrence or null if the insert failed. Insert will fail if the dataFile being inserted is not from the same project as the document it is being inserted into while isReferencedComponent is True.
        """
        return Occurrence()

    count = property(_get_count, None, doc="Returns the number of occurrences in the collection.")
    asList = property(_get_asList, None,
                      doc="Returns the contents of this collection as an OccurrencesList object. This is useful when writing a function that traverses an assembly.")


class OffsetCornerTypes:
    """
    Specifies the different types of corners that can be created when offsetting a wire body.
    """

    def __init__(self):
        pass

    CircularOffsetCornerType = 0
    LinearOffsetCornerType = 1
    ExtendedOffsetCornerType = 2


class OffsetFacesFeatures(core.Base):
    """
    Collection that provides access to all of the existing Offset Face features in a design. Offset Face features are created in the UI using the 'Press Pull' command.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return OffsetFacesFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified Offset Face feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return OffsetFacesFeature()

    def itemByName(self, name):
        """
        Function that returns the specified Offset Face feature using the name of the feature. Offset Face features are created in the UI using the 'Press Pull' command.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return OffsetFacesFeature()

    count = property(_get_count, None,
                     doc="The number of Offset Face features in the collection. Offset Face features are created in the UI using the 'Press Pull' command.")


class OffsetFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a offset feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return OffsetFeatureInput()

    def _set_entities(self, entities):
        pass

    def _get_entities(self):
        return core.ObjectCollection()

    def _set_isChainSelection(self, isChainSelection):
        pass

    def _get_isChainSelection(self):
        return bool()

    def _set_distance(self, distance):
        pass

    def _get_distance(self):
        return core.ValueInput()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return FeatureOperations()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    entities = property(_get_entities, _set_entities,
                        doc="An ObjectCollection containing the BRepFace objects being offset.")
    isChainSelection = property(_get_isChainSelection, _set_isChainSelection,
                                doc="Get and sets whether faces that are tangentially connected to the input faces will be included in the offset.")
    distance = property(_get_distance, _set_distance,
                        doc="Gets and sets the ValueInput object that defines the offset distance. A positive distance value results in an offset in the positive normal direction of the faces.")
    operation = property(_get_operation, _set_operation,
                         doc="Gets and sets the feature operation to perform. Can be 'NewBodyFeatureOperation' or 'NewComponentFeatureOperation'.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class OffsetFeatures(core.Base):
    """
    Collection that provides access to all of the existing Offset features in a component and supports the ability to create new Offset features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return OffsetFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified offset feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return OffsetFeature()

    def createInput(self, entities, distance, operation, isChainSelection):
        """
        Creates a OffsetFeatureInput object. Use properties and methods on this object to define the offset feature you want to create and then use the Add method, passing in the OffsetFeatureInput object to create the feature.
        entities : An ObjectCollection containing the BRepFace objects to offset. Additional faces may be automatically used depending on the value of the isChainSelection argument. Input faces need not be from the same body.
        distance : ValueInput object that defines the offset distance. A positive value is in the positive normal direction of the face being offset.
        operation : The feature operation to perform. 'NewBodyFeatureOperation' and 'NewComponentFeatureOperation' are the options supported.
        isChainSelection : A boolean value for setting whether or not faces that are tangentially connected to the input faces (if any) will be included in the offset. The default value is true.
        Returns the newly created OffsetFeatureInput object or null if the creation failed.
        """
        return OffsetFeatureInput()

    def add(self, input):
        """
        Creates a new offset feature.
        input : A FeatureInput object that defines the desired offset feature. Use the createInput method to create a new OffsetFeatureInput object and then use methods on it (the OffsetFeatureInput object) to define the offset feature.
        Returns the newly created OffsetFeature object or null if the creation failed.
        """
        return OffsetFeature()

    def itemByName(self, name):
        """
        Function that returns the specified offset feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return OffsetFeature()

    count = property(_get_count, None, doc="The number of Offset features in the collection.")


class Parameter(core.Base):
    """
    The base class Parameter object that can represent model or user parameters.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return Parameter()

    def _set_value(self, value):
        pass

    def _get_value(self):
        return float()

    def _set_expression(self, expression):
        pass

    def _get_expression(self):
        return str()

    def _set_name(self, name):
        pass

    def _get_name(self):
        return str()

    def _get_unit(self):
        return str()

    def _set_comment(self, comment):
        pass

    def _get_comment(self):
        return str()

    def _set_isFavorite(self, isFavorite):
        pass

    def _get_isFavorite(self):
        return bool()

    def _get_dependentParameters(self):
        return ParameterList()

    def _get_isDeletable(self):
        return bool()

    def _get_attributes(self):
        return core.Attributes()

    value = property(_get_value, _set_value,
                     doc="Gets and sets the real value (a double) of the parameter in database units. Setting this property will set/reset the expression value for this parameter")
    expression = property(_get_expression, _set_expression,
                          doc="Gets and sets the expression (ie. '22.064 mm') used to calculate the value of the parameter")
    name = property(_get_name, _set_name,
                    doc="Gets and sets the name of the parameter. Setting the name can fail if the name is not unique with respect to all other parameters in the design.")
    unit = property(_get_unit, None,
                    doc="The unit type associated with this parameter. An empty string is returned for parameters that don't have a unit type.")
    comment = property(_get_comment, _set_comment, doc="The comment associated with this parameter")
    isFavorite = property(_get_isFavorite, _set_isFavorite,
                          doc="Gets and sets whether this parameter is included in the Favorites list in the parameters dialog")
    dependentParameters = property(_get_dependentParameters, None,
                                   doc="Returns a list of parameters that are dependent on this parameter as a result of this parameter being referenced in their equation.")
    isDeletable = property(_get_isDeletable, None,
                           doc="Gets if this parameter can be deleted. Parameters that cannot be deleted are: Model Parameters and User Parameters that have dependents.")
    attributes = property(_get_attributes, None, doc="Returns the collection of attributes associated with this face.")


class ParameterList(core.Base):
    """
    Transient object used to pass a set of parameters.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ParameterList()

    @staticmethod
    def create():
        """
        Creates a parameter list that the client can use for various purposes. Use ParameterList.Add to add parameters to the list after creating it.
        Returns a ParameterList
        """
        return ParameterList()

    def _get_count(self):
        return int()

    def _get_isReadOnly(self):
        return bool()

    def item(self, index):
        """
        Function that returns the specified parameter using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return Parameter()

    def itemByName(self, name):
        """
        Returns the specified parameter using the name of the parameter as it is displayed in the parameters dialog
        name : The name of the parameter as it is displayed in the parameters dialog
        Returns the specified item or null if an invalid name was specified.
        """
        return Parameter()

    def add(self, parameter):
        """
        Adds a parameter to the list. This does not create a new parameter, it adds an existing parameter to the list. Note that duplicates can exist in the list.
        parameter : The existing parameter to add to the list
        Returns true if successful. This method will fail if the list is read-only
        """
        return bool()

    def removeByIndex(self, index):
        """
        Method that removes a parameter from the list using the index of the item in the list Will fail if the list is read only.
        index : The index of the parameter to be removed from the list
        Returns true if successful. This method will fail if the list is read-only
        """
        return bool()

    def removeByItem(self, item):
        """
        Method that removes a parameter from the list by specifying the parameter (item) to remove
        item : The parameter item to remove from the list
        Returns true if successful. This method will fail if the list is read-only
        """
        return bool()

    def find(self, parameter, startIndex):
        """
        Finds the specified parameter in the list. The search can be started at a specified index rather than from the beginning of the list. If not found, -1 is returned.
        parameter : The parameter to find
        startIndex : the index in the list to start the search from
        Returns the index of the parameter found in the list.
        """
        return int()

    def contains(self, parameter):
        """
        Indicates whether or not ParameterList collection contains a specified parameter
        parameter : The parameter to look for in the list
        Returns true if list contains the specified parameter
        """
        return bool()

    count = property(_get_count, None, doc="Returns the number of parameters in the collection.")
    isReadOnly = property(_get_isReadOnly, None,
                          doc="Indicates if the list is read-only Some lists returned by API calls (instead of lists created by the user) are read only. Items cannot be added or remove from such a list.")


class PatchFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a patch feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return PatchFeatureInput()

    def _set_boundaryCurve(self, boundaryCurve):
        pass

    def _get_boundaryCurve(self):
        return core.Base()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return FeatureOperations()

    def _set_continuity(self, continuity):
        pass

    def _get_continuity(self):
        return SurfaceContinuityTypes()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    def _set_creationOccurrence(self, creationOccurrence):
        pass

    def _get_creationOccurrence(self):
        return Occurrence()

    boundaryCurve = property(_get_boundaryCurve, _set_boundaryCurve,
                             doc="Gets and set the input geometry that will be used to define the boundary. This can be a sketch profile, a single sketch curve, a single B-Rep edge, or a Path object. If a single sketch curve or B-Rep edge is input, that is not closed, Fusion 360 will automatically find connected sketch curves or B-Rep edges in order to define a closed loop. All sketch curves are valid as input. BRepEdges are valid if they are an 'open' edge, which means they are only used by one face. If a Path is input it must define a closed shape and the B-Rep edges must be valid 'open' edges.")
    operation = property(_get_operation, _set_operation,
                         doc="Gets and sets the type of operation performed by the patch feature. Only 'NewBodyFeatureOperation' and 'NewComponentFeatureOperation' are valid operations for patch features.")
    continuity = property(_get_continuity, _set_continuity,
                          doc="Gets and sets type of surface continuity to use when matching boundary edges to face edges. When a new PatchFeatureInput is created, this is initialized to ConnectedSurfaceContinuityType. This value is ignored when creating a patch for sketch curves.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")
    creationOccurrence = property(_get_creationOccurrence, _set_creationOccurrence,
                                  doc="In order for geometry to be transformed correctly, an Occurrence for creation needs to be specified when the Patch feature is created based on geometry (e.g. a profile, edges, faces) in another component AND (the Patch feature) is not in the root component. The CreationOccurrence is analogous to the active occurrence in the UI")


class PatchFeatures(core.Base):
    """
    Collection that provides access to all of the existing Patch features in a component and supports the ability to create new Patch features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return PatchFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified patch feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return PatchFeature()

    def itemByName(self, name):
        """
        Function that returns the specified patch feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return PatchFeature()

    def createInput(self, boundaryCurve, operation):
        """
        Creates a PatchFeatureInput object. Use properties and methods on the returned PatchFeatureInput object to set other settings. The PatchFeatureInput object can then be used as input to the add method to create the patch feature.
        boundaryCurve : Defines the input geometry that will be used to define the boundary. This can be a sketch profile, a single sketch curve, a single B-Rep edge, or a Path object. If a single sketch curve or B-Rep edge is input, that is not closed, Fusion 360 will automatically find connected sketch curves or B-Rep edges in order to define a closed loop. All sketch curves are valid as input. BRepEdges are valid if they are an 'open' edge, which means they are only used by one face. If a Path is input it must define a closed shape and the B-Rep edges must be valid 'open' edges.
        operation : The feature operation to perform. Only 'NewBodyFeatureOperation' and 'NewComponentFeatureOperation' are valid operations for patch features.
        Returns the newly created PatchFeatureInput object or null if the creation failed.
        """
        return PatchFeatureInput()

    def add(self, input):
        """
        Creates a new patch feature.
        input : A PatchFeatureInput object that defines the desired patch feature. Use the createInput method to create a new PatchFeatureInput object and then use methods on it (the PatchFeatureInput object) to define the patch feature.
        Returns the newly created PatchFeature object or null if the creation failed.
        """
        return PatchFeature()

    count = property(_get_count, None, doc="The number of Patch features in the collection.")


class Path(core.Base):
    """
    The Path object represents a single set of connected curves. The order of the objects within the collection is the same as the connection order of the entities. When using a Path to create a feature, the Path serves as a way to pass in the set of sketch entities and edges. When getting the Path of an existing feature it returns the actual path used to define the feature geometry. In cases like a sweep feature, this can result in using portions of the original input sketch curves or edges and the returned path will provide these 'partial' curves as the PathEntity objects.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return Path()

    @staticmethod
    def create(curves, chainOptions):
        """
        Creates a new Path that can be used as input to various features. For example, it is used to create an open set of curves to create surfaces using extrude, revolve, and sweep. It is also used to create the path for a sweep and sections and profiles and rails for lofts. And it is used to define the boundary of a patch feature. Although the creation of a path is very flexible as far as the types of entities and whether they are planar or not, each of the features have specific requirements and the path must meet those requirements. For example, a path for an extrusion can only contain sketch curves and must be planar, whereas the path for a sweep can contain a mix of sketch curves and edges and can be in three dimensions.
        curves : A SketchCurve, BRepEdge, or an ObjectCollection containing multiple sketch entities and/or BRepEdges. If a single sketch curve or BRepEdge is input the chainCurves argument is used to determine if connected curves or edges (they do not need to be tangent) should be automatically found. Searching for connected curves is only performed within the same sketch or open edges on the same body. If multiple curves are provided the chainCurves argument is treated as false so only the specified input curves are used. The input curves need to geometrically connect for a path to be created.
        chainOptions : If a single SketchCurve or BRepEdge is input, this argument is used to specify the rules in how chained entities should be found. If an ObjectCollection is input, this argument is ignored.
        Returns the new Path object or null in the case of a failure.
        """
        return Path()

    def _get_count(self):
        return int()

    def _get_isClosed(self):
        return bool()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return Path()

    def item(self, index):
        """
        Function that returns the specified PathEntity using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return PathEntity()

    def createForAssemblyContext(self, occurrence):
        """
        This method is not supported for the Path object.
        occurrence :
        """
        return Path()

    def addCurves(self, curves, chainOptions):
        """
        Adds additional curves to the existing path. This can be useful when creating a complex path for a sweep and you want to include sets of curves from multiple sketches and edges from multiple bodies.
        curves : A SketchCurve, BRepEdge, or an ObjectCollection containing multiple sketch entities and/or BRepEdges. If a single sketch curve or BRepEdge is input the chainCurves argument is used to determine if connected curves or edges (they do not need to be tangent) should be automatically found. Searching for connected curves is only performed within the same sketch or open edges on the same body. If multiple curves are provided the chainCurves argument is treated as false so only the specified input curves are used. The input curves need to geometrically connect for a path to be created.
        chainOptions : If a single SketchCurve or BRepEdge is input, this argument is used to specify the rules in how chained entities should be found. If an ObjectCollection is input, this argument is ignored.
        Returns a bool indicating if the process was successful or not.
        """
        return bool()

    count = property(_get_count, None, doc="The number of curves in the path.")
    isClosed = property(_get_isClosed, None,
                        doc="Indicates if the path is closed or not. Returns True in the case of a closed path.")
    assemblyContext = property(_get_assemblyContext, None, doc="This property is not supported for the Path object.")
    nativeObject = property(_get_nativeObject, None, doc="This property is not supported for the Path object.")


class PathEntity(core.Base):
    """
    The PathEntity object represents a curve within a path
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return PathEntity()

    def _get_curve(self):
        return core.Curve3D()

    def _get_curveType(self):
        return core.Curve3DTypes()

    def _get_entity(self):
        return core.Base()

    def _get_parentPath(self):
        return Path()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return PathEntity()

    def _get_isOpposedToEntity(self):
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        This method is not supported for a PathEntity object.
        occurrence :
        """
        return PathEntity()

    curve = property(_get_curve, None,
                     doc="Property that returns the geometry of the entity. This is different from the original path curve if the true start point is not the same as the start point of the original path curve.")
    curveType = property(_get_curveType, None,
                         doc="Property that returns the type of the curve referenced by the path entity. This property allows you to determine what type of object will be returned by the Curve property.")
    entity = property(_get_entity, None,
                      doc="Property that gets the sketch curve or edge this entity was derived from.")
    parentPath = property(_get_parentPath, None, doc="Property that returns the parent Path of the entity.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="This property is not supported for a PathEntity object.")
    nativeObject = property(_get_nativeObject, None, doc="This property is not supported for a PathEntity object.")
    isOpposedToEntity = property(_get_isOpposedToEntity, None,
                                 doc="Indicates if the orientation of this PathEntity is in the same direction or opposed to the natural direction of the SketchCurve or BRepEdge object it is derived from.")


class PathPatternFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a path pattern feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return PathPatternFeatureInput()

    def _set_inputEntities(self, inputEntities):
        pass

    def _get_inputEntities(self):
        return core.ObjectCollection()

    def _set_path(self, path):
        pass

    def _get_path(self):
        return Path()

    def _set_quantity(self, quantity):
        pass

    def _get_quantity(self):
        return core.ValueInput()

    def _set_distance(self, distance):
        pass

    def _get_distance(self):
        return core.ValueInput()

    def _set_startPoint(self, startPoint):
        pass

    def _get_startPoint(self):
        return float()

    def _set_isFlipDirection(self, isFlipDirection):
        pass

    def _get_isFlipDirection(self):
        return bool()

    def _set_patternDistanceType(self, patternDistanceType):
        pass

    def _get_patternDistanceType(self):
        return PatternDistanceType()

    def _set_isSymmetric(self, isSymmetric):
        pass

    def _get_isSymmetric(self):
        return bool()

    def _set_isOrientationAlongPath(self, isOrientationAlongPath):
        pass

    def _get_isOrientationAlongPath(self):
        return bool()

    def _set_patternComputeOption(self, patternComputeOption):
        pass

    def _get_patternComputeOption(self):
        return PatternComputeOptions()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    inputEntities = property(_get_inputEntities, _set_inputEntities,
                             doc="Gets and sets the input entities. The collection can contain faces, features, bodies or occurrences. All of the entities must be of a single type. For example, it can't contain features and occurrences but only features or occurrences.")
    path = property(_get_path, _set_path, doc="Gets and sets the path to create the pattern on path.")
    quantity = property(_get_quantity, _set_quantity, doc="Gets and sets quantity of the elements.")
    distance = property(_get_distance, _set_distance, doc="Gets and sets the distance.")
    startPoint = property(_get_startPoint, _set_startPoint,
                          doc="Gets and sets the start point on the path to count the distance. It's between 0 and 1. 0 means start point of the path, 1 means end point of the path.")
    isFlipDirection = property(_get_isFlipDirection, _set_isFlipDirection,
                               doc="Gets and sets if flip the direction from start point.")
    patternDistanceType = property(_get_patternDistanceType, _set_patternDistanceType,
                                   doc="Gets and sets how the distance between elements is computed.")
    isSymmetric = property(_get_isSymmetric, _set_isSymmetric,
                           doc="Gets and sets if the pattern is in one direction or symmetric.")
    isOrientationAlongPath = property(_get_isOrientationAlongPath, _set_isOrientationAlongPath,
                                      doc="Gets and sets if the orientation is along path. If false, the orientation is identical.")
    patternComputeOption = property(_get_patternComputeOption, _set_patternComputeOption,
                                    doc="Gets and sets the compute option when patterning features. The default value for this is AdjustPatternCompute. This property only applies when patterning features and is ignored in the direct modeling environment.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class PathPatternFeatures(core.Base):
    """
    Collection that provides access to all of the existing path pattern features in a component and supports the ability to create new path pattern features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return PathPatternFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified path pattern feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return PathPatternFeature()

    def createInput(self, inputEntities, path, quantity, distance, patternDistanceType):
        """
        Creates a PathPatternFeatureInput object. Use properties and methods on this object to define the path pattern you want to create and then use the Add method, passing in the PathPatternFeatureInput object.
        inputEntities : The collection can contain faces, features, bodies or occurrences. All of the entities must be of a single type. For example, it can't contain features and occurrences but only features or occurrences.
        path : The Path object that represents a single set of connected curves along which to drive the pattern.
        quantity : Specifies the number of instances in the first direction.
        distance : Specifies the distance. How this value is used depends on the value of the PatternDistanceType property. A negative value can be used to change the direction. If the value is ExtentPatternDistanceType then it defines the total distance of the pattern. If the value is SpacingPatternDistanceType then it defines the distance between each element.
        patternDistanceType : Specifies how the distance between elements is computed.
        Returns the newly created PathPatternFeatureInput object or null if the creation failed.
        """
        return PathPatternFeatureInput()

    def add(self, input):
        """
        Creates a new path pattern feature.
        input : A PathPatternFeatureInput object that defines the desired path pattern. Use the createInput method to create a new PathPatternFeatureInput object and then use methods on it (the PathPatternFeatureInput object) to define the path pattern.
        Returns the newly created PathPatternFeature object or null if the creation failed.
        """
        return PathPatternFeature()

    def itemByName(self, name):
        """
        Function that returns the specified path pattern feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return PathPatternFeature()

    count = property(_get_count, None, doc="The number of path pattern features in the collection.")


class PatternComputeOptions:
    """
    List of the compute options for mirroring and patterning features in the parametric modeling environment.
    """

    def __init__(self):
        pass

    OptimizedPatternCompute = 0
    IdenticalPatternCompute = 1
    AdjustPatternCompute = 2


class PatternDistanceType:
    """
    Defines the different ways to specify the spacing between elements in a pattern.
    """

    def __init__(self):
        pass

    ExtentPatternDistanceType = 0
    SpacingPatternDistanceType = 1


class PatternElement(core.Base):
    """
    This class defines the properties that pertain to the pattern element.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return PatternElement()

    def _get_faces(self):
        return BRepFace()

    def _get_id(self):
        return int()

    def _get_parentFeature(self):
        return Feature()

    def _set_isSuppressed(self, isSuppressed):
        pass

    def _get_isSuppressed(self):
        return bool()

    def _get_transform(self):
        return core.Matrix3D()

    def _get_name(self):
        return str()

    def _get_occurrences(self):
        return Occurrence()

    faces = property(_get_faces, None, doc="Gets the faces generated as a result of this particular element.")
    id = property(_get_id, None, doc="Gets the id of this element within the pattern.")
    parentFeature = property(_get_parentFeature, None, doc="Gets the feature pattern this element is a member of.")
    isSuppressed = property(_get_isSuppressed, _set_isSuppressed,
                            doc="Gets and sets whether the element is suppressed or not. A value of True indicates it is suppressed")
    transform = property(_get_transform, None,
                         doc="Get the transform that describes this elements relative position to the parent object(s). The transform returned for the first element in a pattern will be an identity matrix.")
    name = property(_get_name, None, doc="Get the name of the pattern element.")
    occurrences = property(_get_occurrences, None,
                           doc="If the patternEntityType property of the parent feature returns OccurrencesPatternType then this property will return the occurrences associated with this particular pattern element.")


class PatternElements(core.Base):
    """
    Collection that provides access to pattern elements of mirror and pattern features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return PatternElements()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified pattern element using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return PatternElement()

    count = property(_get_count, None, doc="The number of pattern elements in the collection.")


class PatternEntityTypes:
    """
    Specifies the different types of entities that can be patterned.
    """

    def __init__(self):
        pass

    FacesPatternType = 0
    FeaturesPatternType = 1
    BodiesPatternType = 2
    OccurrencesPatternType = 3


class PhysicalProperties(core.Base):
    """
    The physical properties of a Component, Occurrence or BRepBody
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return PhysicalProperties()

    def _get_area(self):
        return float()

    def _get_density(self):
        return float()

    def _get_mass(self):
        return float()

    def _get_volume(self):
        return float()

    def _get_accuracy(self):
        return CalculationAccuracy()

    def _get_centerOfMass(self):
        return core.Point3D()

    def getPrincipalAxes(self):
        """
        Method that returns the principal axes.
        xAxis : The output Vector3D object that indicates the direction of the x axis.
        yAxis : The output Vector3D object that indicates the direction of the y axis.
        zAxis : The output Vector3D object that indicates the direction of the z axis.
        Returns true if successful
        """
        return bool(), core.Vector3D(), core.Vector3D(), core.Vector3D()

    def getPrincipalMomentsOfInertia(self):
        """
        Method that returns the moments of inertia about the principal axes. Unit for returned values is kg/cm^2.
        i1 : Output Double that specifies the first moment of inertia.
        i2 : Output Double that specifies the second moment of inertia.
        i3 : Output Double that specifies the third moment of inertia.
        Returns true if successful
        """
        return bool(), float(), float(), float()

    def getRadiusOfGyration(self):
        """
        Method that returns the radius of gyration about the principal axes. Unit for returned values is cm.
        kx : Output Double that returns the X partial radius of gyration.
        ky : Output Double that returns the Y partial radius of gyration.
        kz : Output Double that returns the Z partial radius of gyration.
        Returns true if successful
        """
        return bool(), float(), float(), float()

    def getRotationToPrincipal(self):
        """
        Gets the rotation from the world coordinate system of the target to the principal coordinate system.
        rx :
        ry :
        rz :
        Returns true if successful
        """
        return bool(), float(), float(), float()

    def getXYZMomentsOfInertia(self):
        """
        Method that gets the moment of inertia about the world coordinate system. Unit for returned values is kg/cm^2.
        xx : Output Double that returns the XX partial moment.
        yy : Output Double that returns the YY partial moment.
        zz : Output Double that returns the ZZ partial moment.
        xy : Output Double that returns the XY partial moment.
        yz : Output Double that returns the YZ partial moment.
        xz : Output Double that returns the XZ partial moment.
        Returns true if successful
        """
        return bool(), float(), float(), float(), float(), float(), float()

    area = property(_get_area, None, doc="Gets the area in square centimeters.")
    density = property(_get_density, None, doc="Gets the density in kilograms per cubic centimeter.")
    mass = property(_get_mass, None, doc="Gets the mass in kilograms.")
    volume = property(_get_volume, None, doc="Gets the volume in the cubic centimeters.")
    accuracy = property(_get_accuracy, None, doc="Returns the accuracy that was used for the calculation.")
    centerOfMass = property(_get_centerOfMass, None, doc="Returns the center of mass position")


class PipeFeatures(core.Base):
    """
    Collection that provides access to all of the existing pipe features in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return PipeFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified pipe feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return PipeFeature()

    def itemByName(self, name):
        """
        Function that returns the specified pipe feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return PipeFeature()

    count = property(_get_count, None, doc="The number of pipe features in the collection.")


class PointContainment:
    """
    Types that define the nature of the relationship between a point and a containing entity.
    """

    def __init__(self):
        pass

    PointInsidePointContainment = 0
    PointOnPointContainment = 1
    PointOutsidePointContainment = 2
    UnknownPointContainment = 3


class PolygonMesh(core.Base):
    """
    The PolygonMesh represents a mesh that can contain any combination of polygons, quads, and triangles.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return PolygonMesh()

    def _get_nodeCount(self):
        return int()

    def _get_nodeCoordinatesAsDouble(self):
        return float()

    def _get_nodeCoordinatesAsFloat(self):
        return float

    def _get_nodeCoordinates(self):
        return core.Point3D()

    def _get_triangleCount(self):
        return int()

    def _get_quadCount(self):
        return int()

    def _get_polygonCount(self):
        return int()

    def _get_normalVectorsAsDouble(self):
        return float()

    def _get_normalVectorsAsFloat(self):
        return float

    def _get_normalVectors(self):
        return core.Vector3D()

    def _get_triangleNodeIndices(self):
        return int()

    def _get_quadNodeIndices(self):
        return int()

    def _get_polygonNodeIndices(self):
        return int()

    def _get_nodeCountPerPolygon(self):
        return int()

    nodeCount = property(_get_nodeCount, None, doc="Returns the number of nodes in the mesh.")
    nodeCoordinatesAsDouble = property(_get_nodeCoordinatesAsDouble, None,
                                       doc="Returns the node coordinates as an array of doubles where they are the x, y, z components of each coordinate.")
    nodeCoordinatesAsFloat = property(_get_nodeCoordinatesAsFloat, None,
                                      doc="Returns the node coordinates as an array of floats where they are the x, y, z components of each coordinate.")
    nodeCoordinates = property(_get_nodeCoordinates, None,
                               doc="Returns the node coordinates as an array of Point3D objects.")
    triangleCount = property(_get_triangleCount, None, doc="Returns the number of triangles in the mesh.")
    quadCount = property(_get_quadCount, None, doc="Returns the number of quads in the mesh.")
    polygonCount = property(_get_polygonCount, None,
                            doc="Returns the number of polygons (more than 4 sides) in the mesh.")
    normalVectorsAsDouble = property(_get_normalVectorsAsDouble, None,
                                     doc="Returns the normal vectors as an array of doubles where they are the x, y, z components of each vector. There is one normal vector for each index.")
    normalVectorsAsFloat = property(_get_normalVectorsAsFloat, None,
                                    doc="Returns the normal vectors as an array of floats. There is one normal vector for each index.")
    normalVectors = property(_get_normalVectors, None,
                             doc="Returns the normal vectors as an array of Vector 3D objects. There is one normal vector for each index.")
    triangleNodeIndices = property(_get_triangleNodeIndices, None,
                                   doc="Returns the index values that index into the NodeCoordinates and NormalVectors arrays to define the three coordinates of each triangle and the corresponding normal.")
    quadNodeIndices = property(_get_quadNodeIndices, None,
                               doc="Returns the index values that index into the NodeCoordinates and NormalVectors arrays to define the four coordinates of each quad and the corresponding normal.")
    polygonNodeIndices = property(_get_polygonNodeIndices, None,
                                  doc="Returns the index values that index into the NodeCoordinates and NormalVectors arrays to define the coordinates of each polygon and the corresponding normal.")
    nodeCountPerPolygon = property(_get_nodeCountPerPolygon, None,
                                   doc="Returns the number of nodes that define each polygon. For example, if NodeCountPerPolygon[0] returns 6 it indicates the first polygon is defined using 6 nodes. The first six indices returned by the PolygonNodeIndices properties provide the look-up into the NodeCoordinates array.")


class Profile(core.Base):
    """
    Represents a profile in a sketch. Profiles are automatically computed by Fusion 360 and represent closed areas within the sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return Profile()

    def _get_boundingBox(self):
        return core.BoundingBox3D()

    def _get_plane(self):
        return core.Plane()

    def _get_profileLoops(self):
        return ProfileLoops()

    def _get_parentSketch(self):
        return Sketch()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return Profile()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence. Returns null if this isn't the NativeObject.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return Profile()

    def areaProperties(self, accuracy):
        """
        Returns the AreaProperties object that has properties for getting the area, perimeter, centroid, etc of this profile.
        accuracy : Specifies the desired level of computational accuracy of the property calculations. The default value of 'LowCalculationAccuracy' returns results within a +/- 1% error margin.
        """
        return AreaProperties()

    boundingBox = property(_get_boundingBox, None, doc="Returns the 3D bounding box of the profile in sketch space.")
    plane = property(_get_plane, None,
                     doc="Returns the plane the profile is defined in. Profiles are always planar and exist within a single plane.")
    profileLoops = property(_get_profileLoops, None,
                            doc="The loops or closed areas within this profile. There is always a single outer loop but there can be zero to many inner loops defining voids in the profile.")
    parentSketch = property(_get_parentSketch, None, doc="Returns the parent sketch of the profile.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly. but is already the native object.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class ProfileCurve(core.Base):
    """
    A single curve in a profile.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ProfileCurve()

    def _get_geometry(self):
        return core.Curve3D()

    def _get_geometryType(self):
        return core.Curve3DTypes()

    def _get_sketchEntity(self):
        return SketchEntity()

    def _get_parentProfileLoop(self):
        return ProfileLoop()

    def _get_parentProfile(self):
        return Profile()

    def _get_parentSketch(self):
        return Sketch()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return ProfileCurve()

    def _get_boundingBox(self):
        return core.BoundingBox3D()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence. Returns null if this isn't the NativeObject.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return ProfileCurve()

    geometry = property(_get_geometry, None, doc="Returns the geometric entity of this portion of the profile.")
    geometryType = property(_get_geometryType, None,
                            doc="Return the geometry type that the Geometry property will return.")
    sketchEntity = property(_get_sketchEntity, None,
                            doc="Returns the associated sketch entity that defines this curve.")
    parentProfileLoop = property(_get_parentProfileLoop, None, doc="Returns the parent ProfileLoop object.")
    parentProfile = property(_get_parentProfile, None, doc="Returns the parent Profile object.")
    parentSketch = property(_get_parentSketch, None, doc="Returns the parent Profile object.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly but is already the native object.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    boundingBox = property(_get_boundingBox, None, doc="Returns the bounding box of the profile curve in sketch space.")


class ProfileCurves(core.Base):
    """
    A collection of profile curves within a profile loop.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ProfileCurves()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified profile curve using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return ProfileCurve()

    count = property(_get_count, None, doc="Returns the number of curves in the collection.")


class ProfileLoop(core.Base):
    """
    A loop within a profile.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ProfileLoop()

    def _get_isOuter(self):
        return bool()

    def _get_profileCurves(self):
        return ProfileCurves()

    def _get_parentProfile(self):
        return Profile()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return ProfileLoop()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence. Returns null if this isn't the NativeObject.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return ProfileLoop()

    isOuter = property(_get_isOuter, None,
                       doc="Indicates if this is an outer or inner loop. Profiles always have one outer loop and have an zero to many inner loops defining voids.")
    profileCurves = property(_get_profileCurves, None, doc="Returns a collection of the curves making up this loop.")
    parentProfile = property(_get_parentProfile, None, doc="Returns the parent Profile object.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly but is already the native object.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class ProfileLoops(core.Base):
    """
    A collection of loops within a Profile.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ProfileLoops()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified profile loop using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return ProfileLoop()

    count = property(_get_count, None, doc="Returns the number of loops within this profile.")


class Profiles(core.Base):
    """
    A collection of all of the closed profiles currently calculated for this sketch. Closed profiles are automatically computed by Fusion 360 and represent closed areas within the sketch. This class also provides some additional utility functions to create open profiles and text based profiles that can be used as input for various features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return Profiles()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified closed profile using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return Profile()

    count = property(_get_count, None,
                     doc="Returns the number of closed profiles in the sketch. Open and text based profiles are not included.")


class RectangularPatternFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a rectangular pattern feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return RectangularPatternFeatureInput()

    def _set_inputEntities(self, inputEntities):
        pass

    def _get_inputEntities(self):
        return core.ObjectCollection()

    def _set_directionOneEntity(self, directionOneEntity):
        pass

    def _get_directionOneEntity(self):
        return core.Base()

    def _set_directionTwoEntity(self, directionTwoEntity):
        pass

    def _get_directionTwoEntity(self):
        return core.Base()

    def _set_quantityOne(self, quantityOne):
        pass

    def _get_quantityOne(self):
        return core.ValueInput()

    def _set_quantityTwo(self, quantityTwo):
        pass

    def _get_quantityTwo(self):
        return core.ValueInput()

    def _set_distanceOne(self, distanceOne):
        pass

    def _get_distanceOne(self):
        return core.ValueInput()

    def _set_distanceTwo(self, distanceTwo):
        pass

    def _get_distanceTwo(self):
        return core.ValueInput()

    def _get_directionOne(self):
        return core.Vector3D()

    def _get_directionTwo(self):
        return core.Vector3D()

    def _set_isSymmetricInDirectionOne(self, isSymmetricInDirectionOne):
        pass

    def _get_isSymmetricInDirectionOne(self):
        return bool()

    def _set_isSymmetricInDirectionTwo(self, isSymmetricInDirectionTwo):
        pass

    def _get_isSymmetricInDirectionTwo(self):
        return bool()

    def _set_patternDistanceType(self, patternDistanceType):
        pass

    def _get_patternDistanceType(self):
        return PatternDistanceType()

    def _set_patternComputeOption(self, patternComputeOption):
        pass

    def _get_patternComputeOption(self):
        return PatternComputeOptions()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    def setDirectionTwo(self, directionTwoEntity, quantityTwo, distanceTwo):
        """
        Sets all of the input required to define the pattern in the second direction.
        directionTwoEntity : Specifies the entity used to define the second direction entity. This can be a linear edge, construction axis, sketch line or rectangular pattern feature. If a rectangular pattern feature is set, the directionOneEntity and directionTwoEntity properties return the same rectangular pattern feature. This argument can be null to indicate that the default second direction is to be used, which is 90 degrees to the first direction.
        quantityTwo : Specifies the number of instances in the second direction.
        distanceTwo : Specifies the distance in the second direction. How this value is used depends on the value of the PatternDistanceType property. If the value is ExtentPatternDistanceType then it defines the total distance of the pattern. If the value is SpacingPatternDistanceType then it defines the distance between each element.
        Returns true if it was successful.
        """
        return bool()

    inputEntities = property(_get_inputEntities, _set_inputEntities,
                             doc="Gets and sets the input entities. The collection can contain faces, features, bodies or occurrences. All of the entities must be of a single type. For example, it can't contain features and occurrences but only features or occurrences.")
    directionOneEntity = property(_get_directionOneEntity, _set_directionOneEntity,
                                  doc="Gets and sets the first direction entity. This can be a linear edge, construction axis, sketch line or rectangular pattern feature. If a rectangular pattern feature is set, the directionOneEntity and directionTwoEntity properties return the same rectangular pattern feature.")
    directionTwoEntity = property(_get_directionTwoEntity, _set_directionTwoEntity,
                                  doc="Gets and sets the second direction entity. This can be a linear edge, construction axis, sketch line or rectangular pattern feature. If a rectangular pattern feature is set, the directionOneEntity and directionTwoEntity properties return the same rectangular pattern feature.")
    quantityOne = property(_get_quantityOne, _set_quantityOne,
                           doc="Gets and sets the number of instances in the first direction.")
    quantityTwo = property(_get_quantityTwo, _set_quantityTwo,
                           doc="Gets and sets the number of instances in the second direction.")
    distanceOne = property(_get_distanceOne, _set_distanceOne, doc="Gets and sets the distance in the first direction.")
    distanceTwo = property(_get_distanceTwo, _set_distanceTwo,
                           doc="Gets and sets the distance in the second direction.")
    directionOne = property(_get_directionOne, None,
                            doc="Returns a Vector3D indicating the positive direction of direction one.")
    directionTwo = property(_get_directionTwo, None,
                            doc="Returns a Vector3D indicating the positive direction of direction two.")
    isSymmetricInDirectionOne = property(_get_isSymmetricInDirectionOne, _set_isSymmetricInDirectionOne,
                                         doc="Gets and sets if the pattern in direction one is in one direction or symmetric.")
    isSymmetricInDirectionTwo = property(_get_isSymmetricInDirectionTwo, _set_isSymmetricInDirectionTwo,
                                         doc="Gets and sets if the pattern in direction two is in one direction or symmetric.")
    patternDistanceType = property(_get_patternDistanceType, _set_patternDistanceType,
                                   doc="Gets and sets how the distance between elements is computed.")
    patternComputeOption = property(_get_patternComputeOption, _set_patternComputeOption,
                                    doc="Gets and sets the compute option when patterning features. The default value for this is AdjustPatternCompute. This property only applies when patterning features and is ignored in the direct modeling environment.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class RectangularPatternFeatures(core.Base):
    """
    Collection that provides access to all of the existing rectangular pattern features in a component and supports the ability to create new rectangular pattern features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return RectangularPatternFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified rectangular pattern feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return RectangularPatternFeature()

    def createInput(self, inputEntities, directionOneEntity, quantityOne, distanceOne, patternDistanceType):
        """
        Creates a RectangularPatternFeatureInput object. Use properties and methods on this object to define the rectangular pattern you want to create and then use the Add method, passing in the RectangularPatternFeatureInput object.
        inputEntities : The collection can contain faces, features, bodies or occurrences. All of the entities must be of a single type. For example, it can't contain features and occurrences but only features or occurrences.
        directionOneEntity : Specifies the entity used to define the first direction entity. This can be a linear edge, construction axis, sketch line or rectangular pattern feature. If a rectangular pattern feature is set, the directionOneEntity and directionTwoEntity properties return the same rectangular pattern feature.
        quantityOne : Specifies the number of instances in the first direction.
        distanceOne : Specifies the distance in the first direction. How this value is used depends on the value of the PatternDistanceType property. A negative value can be used to change the direction. If the value is ExtentPatternDistanceType then it defines the total distance of the pattern. If the value is SpacingPatternDistanceType then it defines the distance between each element.
        patternDistanceType : Specifies how the distance between elements is computed.
        Returns the newly created RectangularPatternFeatureInput object or null if the creation failed.
        """
        return RectangularPatternFeatureInput()

    def add(self, input):
        """
        Creates a new rectangular pattern feature.
        input : A RectangularPatternFeatureInput object that defines the desired rectangular pattern. Use the createInput method to create a new RectangularPatternFeatureInput object and then use methods on it (the RectangularPatternFeatureInput object) to define the rectangular pattern.
        Returns the newly created RectangularPatternFeature object or null if the creation failed.
        """
        return RectangularPatternFeature()

    def itemByName(self, name):
        """
        Function that returns the specified rectangular pattern feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return RectangularPatternFeature()

    count = property(_get_count, None, doc="The number of rectangular pattern features in the collection.")


class RemoveFeatures(core.Base):
    """
    Collection that provides access to all of the existing Remove features in a component and supports the ability to create new Remove features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return RemoveFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified Remove feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return RemoveFeature()

    def itemByName(self, name):
        """
        Function that returns the specified remove feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return RemoveFeature()

    def add(self, itemToRemove):
        """
        Creates a new Remove feature.
        itemToRemove : A single body (solid or surface) or component occurrence to remove.
        Returns the newly created RemoveFeature object or null if the creation failed.
        """
        return RemoveFeature()

    count = property(_get_count, None, doc="The number of Remove features in the collection.")


class ReplaceFaceFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a replace face feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ReplaceFaceFeatureInput()

    def _set_sourceFaces(self, sourceFaces):
        pass

    def _get_sourceFaces(self):
        return core.ObjectCollection()

    def _set_targetFaces(self, targetFaces):
        pass

    def _get_targetFaces(self):
        return core.Base()

    def _set_isTangentChain(self, isTangentChain):
        pass

    def _get_isTangentChain(self):
        return bool()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    sourceFaces = property(_get_sourceFaces, _set_sourceFaces,
                           doc="Gets and sets the entities that define the source faces to perform replace. The collection can contain the faces from a solid and/or from features. All the faces must be on the same body.")
    targetFaces = property(_get_targetFaces, _set_targetFaces,
                           doc="Gets and sets the entities that define the target faces. The new faces must completely intersect the part. The collection can contain the surface faces, surface bodies and construction planes.")
    isTangentChain = property(_get_isTangentChain, _set_isTangentChain,
                              doc="Gets and sets if any faces that are tangentially connected to any of the input faces will also be included in setting InputEntities. It defaults to true.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class ReplaceFaceFeatures(core.Base):
    """
    Collection that provides access to all of the existing replace face features in a component and supports the ability to create new replace face features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ReplaceFaceFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified replace face feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return ReplaceFaceFeature()

    def createInput(self, sourceFaces, isTangentChain, targetFaces):
        """
        Creates a ReplaceFaceFeatureInput object. Use properties and methods on this object to define the replace face you want to create and then use the Add method, passing in the ReplaceFaceFeatureInput object.
        sourceFaces : Input the entities that define the source faces (the faces to be replaced). The collection can contain the faces from a solid and/or features. All the faces must be on the same body.
        isTangentChain : A boolean value for setting whether or not faces that are tangentially connected to the input faces (if any) will also be included. A value of true indicates that tangent faces will be included.
        targetFaces : Input the entities that define the target faces. The new faces must completely intersect the part. The collection can contain the surface faces, surface bodies and construction planes.
        Returns the newly created ReplaceFaceFeatureInput object or null if the creation failed.
        """
        return ReplaceFaceFeatureInput()

    def add(self, input):
        """
        Creates a new replace face feature.
        input : A ReplaceFaceFeatureInput object that defines the desired replace face. Use the createInput method to create a new ReplaceFaceFeatureInput object and then use methods on it (the ReplaceFaceFeatureInput object) to define the replace face.
        Returns the newly created ReplaceFaceFeature object or null if the creation failed.
        """
        return ReplaceFaceFeature()

    def itemByName(self, name):
        """
        Function that returns the specified replace face feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return ReplaceFaceFeature()

    count = property(_get_count, None, doc="The number of replace face features in the collection.")


class ReverseNormalFeatures(core.Base):
    """
    Collection that provides access to all of the existing Reverse Normal features in a component and supports the ability to create new Reverse Normal features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ReverseNormalFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified Reverse Normal feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return ReverseNormalFeature()

    def itemByName(self, name):
        """
        Function that returns the specified reverse normal feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return ReverseNormalFeature()

    def add(self, surfaces):
        """
        Creates a new Reverse Normal feature.
        surfaces : One or more surface bodies (open BRepBodies) containing the faces whose normals are to be reversed. All faces of the input surface bodies get reversed.
        Returns the newly created ReverseNormalFeature object or null if the creation failed.
        """
        return ReverseNormalFeature()

    count = property(_get_count, None, doc="The number of Reverse Normal features in the collection.")


class RevolveFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a revolve feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return RevolveFeatureInput()

    def _set_profile(self, profile):
        pass

    def _get_profile(self):
        return core.Base()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return FeatureOperations()

    def _set_axis(self, axis):
        pass

    def _get_axis(self):
        return core.Base()

    def _set_creationOccurrence(self, creationOccurrence):
        pass

    def _get_creationOccurrence(self):
        return Occurrence()

    def _set_isSolid(self, isSolid):
        pass

    def _get_isSolid(self):
        return bool()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    def _set_participantBodies(self, participantBodies):
        pass

    def _get_participantBodies(self):
        return BRepBody()

    def setAngleExtent(self, isSymmetric, angle):
        """
        Defines the extent of the revolution to be at a specified angle. An angle and whether the extent is symmetric or only in one direction is specified. If it's not symmetric a positive or negative angle can be used to control the direction. If symmetric, the angle is the angle on one side so the entire angle of the revolution will be twice the specified angle. Use an angle of 360 deg or 2 pi radians to create a full revolve.
        isSymmetric : Set to 'true' for a revolve symmetrical about the profile plane
        angle : The ValueInput object that defines the angle of the revolution
        Returns true if successful
        """
        return bool()

    def setTwoSideAngleExtent(self, angleOne, angleTwo):
        """
        Defines the angle of the revolve to be to applied to both sides of the profile at the specified angles.
        angleOne : The ValueInput object that defines the angle for the first side of the revolution
        angleTwo : The ValueInput object that defines the angle for the second side of the revolution
        Returns true if successful
        """
        return bool()

    def setOneSideToExtent(self, toEntity, directionHint):
        """
        Defines the extent of the revolve to be from the sketch or profile plane to the specified 'To' face.
        toEntity : The entity that defines the 'to' extent. The valid types of entities can vary depending on the type of feature this is being used with. For a revolve it can be a BRepBody, BRepFace, BRepVertex, ConstructionPlane, or ConstructionPoint.
        directionHint : Specifies the direction of the revolve.
        Returns true if successful.
        """
        return bool()

    def setTwoSideToExtent(self, toEntityOne, toEntityTwo):
        """
        Defines the extents of the revolve to be from the sketch plane to specified faces in both directions. If the matchShape argument is true, the faces to revolve to are extended to fully intersect the revolve.
        toEntityOne : The first entity that defines the 'to' extent. The valid types of entities can vary depending on the type of feature this is being used with. For a revolve it can be a BRepBody, BRepFace, BRepVertex, ConstructionPlane, or ConstructionPoint.
        toEntityTwo : The second entity that defines the 'to' extent. The valid types of entities can vary depending on the type of feature this is being used with. For a revolve it can be a BRepBody, BRepFace, BRepVertex, ConstructionPlane, or ConstructionPoint.
        Returns true if successful.
        """
        return bool()

    profile = property(_get_profile, _set_profile,
                       doc="Gets and sets the profiles or planar faces used to define the shape of the revolve. This property can return or be set with a single Profile, a single planar face, or an ObjectCollection consisting of multiple profiles and planar faces. When an ObjectCollection is used all of the profiles and faces must be co-planar. This property returns null in the case where the feature is non-parametric. To create a surface (non-solid) revolution, you can use the createOpenProfile and createBRepEdgeProfile methods of the Component object to create an open profile. The isSolid property of the RevolveFeatureInput property must also be False.")
    operation = property(_get_operation, _set_operation,
                         doc="Gets and sets the type of operation performed by the revolve.")
    axis = property(_get_axis, _set_axis,
                    doc="Gets and sets the entity used to define the axis of revolution. The axis can be a sketch line, construction axis, or linear edge. If it is not in the same plane as the profile, it is projected onto the profile plane.")
    creationOccurrence = property(_get_creationOccurrence, _set_creationOccurrence,
                                  doc="In order for geometry to be transformed correctly, an Occurrence for creation needs to be specified when the Revolve is created based on geometry (e.g. a profile and/or face(s)) in another component AND (the Revolve) is not in the root component. The CreationOccurrence is analogous to the active occurrence in the UI")
    isSolid = property(_get_isSolid, _set_isSolid,
                       doc="Specifies if the revolution should be created as a solid or surface. If it's a surface then there aren't any end caps and it's open. This is initialized to true so a solid will be created if it's not changed.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")
    participantBodies = property(_get_participantBodies, _set_participantBodies,
                                 doc="Gets and sets the list of bodies that will participate in the feature when the operation is a cut or intersection. If this property has not been set, the default behavior is that all bodies that are intersected by the feature will participate. This property can return null in the case where the feature has not been fully defined so that possible intersecting bodies can be computed.")


class RevolveFeatures(core.Base):
    """
    Collection that provides access to all of the existing revolve features in a design and supports the ability to create new revolve features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return RevolveFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified revolve feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return RevolveFeature()

    def createInput(self, profile, axis, operation):
        """
        Creates a new RevolveFeatureInput object that is used to specify the input needed to create a new revolve feature.
        profile : The profile argument can be a single Profile, a single planar face, or an ObjectCollection consisting of multiple profiles and planar faces. When an ObjectCollection is used all of the profiles and faces must be co-planar. To create a surface (non-solid) revolution, you can use the createOpenProfile and createBRepEdgeProfile methods of the Component object to create an open profile. You also need to set the isSolid property of the returned RevolveFeatureInput property to False.
        axis : The axis can be a sketch line, construction axis, or linear edge. If it is not in the same plane as the profile, it is projected onto the profile plane.
        operation : The operation type to perform.
        Returns the newly created RevolveFeatureInput object or null if the creation failed.
        """
        return RevolveFeatureInput()

    def add(self, input):
        """
        Creates a new revolve feature based on the information provided by the provided RevolveFeatureInput object. To create a new revolve, use the createInput function to create a new input object and then use the methods and properties on that object to define the required input for a revolve. Once the information is defined on the input object you can pass it to the Add method to create the revolve.
        input : The RevolveFeatureInput object that specifies the input needed to create a new extrude
        Returns the newly created RevolveFeature or null if the creation failed.
        """
        return RevolveFeature()

    def itemByName(self, name):
        """
        Function that returns the specified revolve feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return RevolveFeature()

    count = property(_get_count, None, doc="The number of revolve features in the collection.")


class RibFeatures(core.Base):
    """
    Collection that provides access to all of the existing rib features in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return RibFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified Rib feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return RibFeature()

    def itemByName(self, name):
        """
        Function that returns the specified Rib feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return RibFeature()

    count = property(_get_count, None, doc="The number of Rib features in the collection.")


class RigidGroup(core.Base):
    """
    Represents a rigid group within an assembly.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return RigidGroup()

    def _get_parentComponent(self):
        return Component()

    def _set_name(self, name):
        pass

    def _get_name(self):
        return str()

    def _get_occurrences(self):
        return OccurrenceList()

    def _get_timelineObject(self):
        return TimelineObject()

    def _set_isSuppressed(self, isSuppressed):
        pass

    def _get_isSuppressed(self):
        return bool()

    def _get_nativeObject(self):
        return RigidGroup()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_attributes(self):
        return core.Attributes()

    def deleteMe(self):
        """
        Deletes this rigid group.
        Returns True if the delete was successful.
        """
        return bool()

    def setOccurrences(self, occurrences, includeChildren):
        """
        Sets which occurrences are to be part of this rigid group.
        occurrences : An ObjectCollection containing the occurrences to use in creating the rigid group.
        includeChildren : Boolean indicating if the children of the input occurrences should be included in the rigid group.
        Returns true if successful.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return RigidGroup()

    parentComponent = property(_get_parentComponent, None,
                               doc="Returns the parent component that owns this rigid group.")
    name = property(_get_name, _set_name, doc="Gets and sets the name of the rigid group as seen in the timeline.")
    occurrences = property(_get_occurrences, None,
                           doc="Returns the list of occurrences that are part of the rigid group.")
    timelineObject = property(_get_timelineObject, None,
                              doc="Returns the timeline object associated with this rigid group.")
    isSuppressed = property(_get_isSuppressed, _set_isSuppressed,
                            doc="Gets and sets if this rigid group is suppressed.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly but is already the native object.")
    attributes = property(_get_attributes, None,
                          doc="Returns the collection of attributes associated with this rigid group.")


class RigidGroupList(core.Base):
    """
    A list of rigid groups.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return RigidGroupList()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified rigid group using an index into the list.
        index : The index of the item within the list to return. The first item in the list has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return RigidGroup()

    def itemByName(self, name):
        """
        Function that returns the specified rigid group using a name.
        name : The name of the item within the list to return.
        Returns the specified item or null if an invalid name was specified.
        """
        return RigidGroup()

    count = property(_get_count, None, doc="Returns number of rigid groups in the list.")


class RigidGroups(core.Base):
    """
    The collection of rigid groups in this component. This provides access to all existing rigid groups and supports the ability to create new rigid groups.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return RigidGroups()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified rigid group using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return RigidGroup()

    def itemByName(self, name):
        """
        Function that returns the specified rigid group using a name.
        name : The name of the item within the collection to return.
        Returns the specified item or null if an invalid name was specified.
        """
        return RigidGroup()

    def add(self, occurrences, includeChildren):
        """
        Creates a new rigid group.
        occurrences : An ObjectCollection containing the occurrences to use in creating the rigid group.
        includeChildren : Boolean indicating if the children of the input occurrences should be included in the rigid group.
        Returns the new RigidGroup object or null in the case of failure.
        """
        return RigidGroup()

    count = property(_get_count, None, doc="Returns number of joint origins in the collection.")


class RuleFilletFeatures(core.Base):
    """
    Collection that provides access to all of the existing rule fillet features in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return RuleFilletFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified rule fillet feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return RuleFilletFeature()

    def itemByName(self, name):
        """
        Function that returns the specified rule fillet feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return RuleFilletFeature()

    count = property(_get_count, None, doc="The number of rule fillet features in the collection.")


class ScaleFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a scale feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ScaleFeatureInput()

    def _set_inputEntities(self, inputEntities):
        pass

    def _get_inputEntities(self):
        return core.ObjectCollection()

    def _set_point(self, point):
        pass

    def _get_point(self):
        return core.Base()

    def _set_scaleFactor(self, scaleFactor):
        pass

    def _get_scaleFactor(self):
        return core.ValueInput()

    def _get_isUniform(self):
        return bool()

    def _get_xScale(self):
        return core.ValueInput()

    def _get_yScale(self):
        return core.ValueInput()

    def _get_zScale(self):
        return core.ValueInput()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    def setToNonUniform(self, xScale, yScale, zScale):
        """
        Sets the scale factor for the x, y, z directions to define a non-uniform scale. Calling this method will cause the isUniform property to be set to false. This will fail if the inputEntities collection contains sketches or components.
        xScale : A ValueInput object that defines the scale in the X direction.
        yScale : A ValueInput object that defines the scale in the Y direction.
        zScale : A ValueInput object that defines the scale in the Z direction.
        Returns true if successful.
        """
        return bool()

    inputEntities = property(_get_inputEntities, _set_inputEntities,
                             doc="Gets and sets the input entities. This collection can contain sketches, BRep bodies and T-Spline bodies in parametric modeling. It can contain sketches, BRep bodies, T-Spline bodies, mesh bodies, root component and occurrences in non-parametric modeling. If the scaling is non-uniform (the isUniform property is false), this collection cannot contain sketches or components.")
    point = property(_get_point, _set_point,
                     doc="Gets and sets the origin point of the scale. This can be a BRepVertex, a SketchPoint or a ConstructionPoint.")
    scaleFactor = property(_get_scaleFactor, _set_scaleFactor,
                           doc="Gets and sets the scale factor used for a uniform scale. Setting this value will cause the isUniform property to be set to true.")
    isUniform = property(_get_isUniform, None, doc="Gets if the scale is uniform.")
    xScale = property(_get_xScale, None, doc="Gets the scale in X direction.")
    yScale = property(_get_yScale, None, doc="Gets the scale in Y direction.")
    zScale = property(_get_zScale, None, doc="Gets the scale in Z direction.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class ScaleFeatures(core.Base):
    """
    Collection that provides access to all of the existing scale features in a component and supports the ability to create new scale features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ScaleFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified scale feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return ScaleFeature()

    def createInput(self, inputEntities, point, scaleFactor):
        """
        Creates a ScaleFeatureInput object. Use properties and methods on this object to define the scale you want to create and then use the Add method, passing in the ScaleFeatureInput object.
        inputEntities : This collection can contain sketches, BRep bodies and T-Spline bodies in parametric modeling. It can contain sketches, BRep bodies, T-Spline bodies, mesh bodies, root component and occurrences in non-parametric modeling.
        point : Input a point as reference to scale. This can be a BRepVertex, a SketchPoint or a ConstructionPoint.
        scaleFactor : The ValueInput object that defines the scale factor for uniform scale.
        Returns the newly created ScaleFeatureInput object or null if the creation failed.
        """
        return ScaleFeatureInput()

    def add(self, input):
        """
        Creates a new scale feature.
        input : A ScaleFeatureInput object that defines the desired scale. Use the createInput method to create a new ScaleFeatureInput object and then use methods on it (the ScaleFeatureInput object) to define the scale.
        Returns the newly created ScaleFeature object or null if the creation failed. Returns nothing in the case where the feature is non-parametric.
        """
        return ScaleFeature()

    def itemByName(self, name):
        """
        Function that returns the specified scale feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return ScaleFeature()

    count = property(_get_count, None, doc="The number of scale features in the collection.")


class ShellFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a shell feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ShellFeatureInput()

    def _set_inputEntities(self, inputEntities):
        pass

    def _get_inputEntities(self):
        return core.ObjectCollection()

    def _set_isTangentChain(self, isTangentChain):
        pass

    def _get_isTangentChain(self):
        return bool()

    def _set_insideThickness(self, insideThickness):
        pass

    def _get_insideThickness(self):
        return core.ValueInput()

    def _set_outsideThickness(self, outsideThickness):
        pass

    def _get_outsideThickness(self):
        return core.ValueInput()

    def _set_creationOccurrence(self, creationOccurrence):
        pass

    def _get_creationOccurrence(self):
        return Occurrence()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    inputEntities = property(_get_inputEntities, _set_inputEntities,
                             doc="Gets and sets the input faces/bodies. If IsTangentChain is true, all the faces that are tangentially connected to the input faces (if any) will also be included. Fails if any faces are input, and the owning bodies of the faces are also input.")
    isTangentChain = property(_get_isTangentChain, _set_isTangentChain,
                              doc="Gets and sets if any faces that are tangentially connected to any of the input faces will also be included in setting InputEntities. It defaults to true.")
    insideThickness = property(_get_insideThickness, _set_insideThickness, doc="Gets and sets the inside thickness.")
    outsideThickness = property(_get_outsideThickness, _set_outsideThickness,
                                doc="Gets and sets the outside thickness.")
    creationOccurrence = property(_get_creationOccurrence, _set_creationOccurrence,
                                  doc="In order for geometry to be transformed correctly, an Occurrence for creation needs to be specified when the shell is created based on geometry (e.g. a profile and/or face(s)) in another component AND (the shell) is not in the root component. The CreationOccurrence is analogous to the active occurrence in the UI")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class ShellFeatures(core.Base):
    """
    Collection that provides access to all of the existing shell features in a component and supports the ability to create new shell features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ShellFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified shell feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return ShellFeature()

    def createInput(self, inputEntities, isTangentChain):
        """
        Creates a ShellFeatureInput object. Use properties and methods on this object to define the shell you want to create and then use the Add method, passing in the ShellFeatureInput object.
        inputEntities : The collection contains the faces to remove and the bodies to perform shell. Fails if any faces are input, and the owning bodies of the faces are also input.
        isTangentChain : A boolean value for setting whether or not faces that are tangentially connected to the input faces (if any) will also be included. It defaults to true.
        Returns the newly created ShellFeatureInput object or null if the creation failed.
        """
        return ShellFeatureInput()

    def add(self, input):
        """
        Creates a new shell feature.
        input : A ShellFeatureInput object that defines the desired shell. Use the createInput method to create a new ShellFeatureInput object and then use methods on it (the ShellFeatureInput object) to define the shell.
        Returns the newly created ShellFeature object or null if the creation failed.
        """
        return ShellFeature()

    def itemByName(self, name):
        """
        Function that returns the specified shell feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return ShellFeature()

    count = property(_get_count, None, doc="The number of shell features in the collection.")


class SilhouetteSplitFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a silhouette split feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SilhouetteSplitFeatureInput()

    def _set_targetBody(self, targetBody):
        pass

    def _get_targetBody(self):
        return BRepBody()

    def _set_viewDirection(self, viewDirection):
        pass

    def _get_viewDirection(self):
        return core.Base()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return SilhouetteSplitOperations()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    targetBody = property(_get_targetBody, _set_targetBody, doc="Gets and sets the solid body to split.")
    viewDirection = property(_get_viewDirection, _set_viewDirection,
                             doc="Gets and sets the entity that defines the silhouette view direction, which can be a construction axis, linear BRepEdge, planar BRepFace or a construction plane.")
    operation = property(_get_operation, _set_operation,
                         doc="Gets and sets the type of silhouette split operation to perform.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class SilhouetteSplitFeatures(core.Base):
    """
    Collection that provides access to all of the existing Silhouette Split features in a component and supports the ability to create new Silhouette Split features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SilhouetteSplitFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified silhouette split feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SilhouetteSplitFeature()

    def createInput(self, viewDirection, targetBody, operation):
        """
        Creates a SilhouetteSplitFeatureInput object. Use properties and methods on this object to define the silhouette split you want to create and then use the Add method, passing in the SilhouetteSplitFeatureInput object.
        viewDirection : A construction axis, linear BRepEdge, planar BRepFace or a construction plane that defines the view direction where the silhouette is calculated.
        targetBody : Input the single solid body to split
        operation : The type of silhouette split operation to perform.
        Returns the newly created SilhouetteSplitFeatureInput object or null if the creation failed.
        """
        return SilhouetteSplitFeatureInput()

    def add(self, input):
        """
        Creates a new silhouette split feature.
        input : A SilhouetteSplitFeatureInput object that defines the desired silhouette split feature. Use the createInput method to create a new SilhouetteSplitFeatureInput object and then use methods on it (the SilhouetteSplitFeatureInput object) to define the silhouette split.
        Returns the newly created SilhouetteSplitFeature object or null if the creation failed.
        """
        return SilhouetteSplitFeature()

    def itemByName(self, name):
        """
        Function that returns the specified silhouette split feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return SilhouetteSplitFeature()

    count = property(_get_count, None, doc="The number of Silhouette Split features in the collection.")


class SilhouetteSplitOperations:
    """
    List of Silhouette Split feature operations.
    """

    def __init__(self):
        pass

    SilhouetteSplitFacesOnlyOperation = 0
    SilhouetteSplitShelledBodyOperation = 1
    SilhouetteSplitSolidBodyOperation = 2


class Sketch(core.Base):
    """
    Represents a sketch within a component.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return Sketch()

    def _set_name(self, name):
        pass

    def _get_name(self):
        return str()

    def _get_sketchPoints(self):
        return SketchPoints()

    def _get_sketchCurves(self):
        return SketchCurves()

    def _get_sketchDimensions(self):
        return SketchDimensions()

    def _get_geometricConstraints(self):
        return GeometricConstraints()

    def _set_transform(self, transform):
        pass

    def _get_transform(self):
        return core.Matrix3D()

    def _get_isParametric(self):
        return bool()

    def _set_isVisible(self, isVisible):
        pass

    def _get_isVisible(self):
        return bool()

    def _set_areDimensionsShown(self, areDimensionsShown):
        pass

    def _get_areDimensionsShown(self):
        return bool()

    def _set_areProfilesShown(self, areProfilesShown):
        pass

    def _get_areProfilesShown(self):
        return bool()

    def _get_origin(self):
        return core.Point3D()

    def _get_xDirection(self):
        return core.Vector3D()

    def _get_yDirection(self):
        return core.Vector3D()

    def _set_referencePlane(self, referencePlane):
        pass

    def _get_referencePlane(self):
        return core.Base()

    def _set_isComputeDeferred(self, isComputeDeferred):
        pass

    def _get_isComputeDeferred(self):
        return bool()

    def _get_profiles(self):
        return Profiles()

    def _get_timelineObject(self):
        return TimelineObject()

    def _get_parentComponent(self):
        return Component()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_nativeObject(self):
        return Sketch()

    def _get_boundingBox(self):
        return core.BoundingBox3D()

    def _get_sketchTexts(self):
        return SketchTexts()

    def _get_originPoint(self):
        return SketchPoint()

    def _get_isFullyConstrained(self):
        return bool()

    def _get_attributes(self):
        return core.Attributes()

    def _get_baseOrFormFeature(self):
        return core.Base()

    def _get_healthState(self):
        return FeatureHealthStates()

    def _get_errorOrWarningMessage(self):
        return str()

    def _get_revisionId(self):
        return str()

    def _set_areConstraintsShown(self, areConstraintsShown):
        pass

    def _get_areConstraintsShown(self):
        return bool()

    def _set_arePointsShown(self, arePointsShown):
        pass

    def _get_arePointsShown(self):
        return bool()

    def _set_isLightBulbOn(self, isLightBulbOn):
        pass

    def _get_isLightBulbOn(self):
        return bool()

    def project(self, entity):
        """
        Projects the specified entity onto the x-y plane of the sketch and returns the created sketch entity(s).
        entity : The entity to project. This can be a sketch entity, an edge, a face to get all of its edges, a vertex, a construction axis, a construction point, or a construction plane that is perpendicular to the sketch to create a line.
        Returns a collection of the sketch entities that were created as a result of the projection.
        """
        return core.ObjectCollection()

    def projectCutEdges(self, body):
        """
        Intersects the specified body with the sketch plane and creates new curves representing the intersection.
        body : The body to be intersected by the sketch.
        Returns a collection of the sketch entities that were created a a result of the cut.
        """
        return core.ObjectCollection()

    def include(self, entity):
        """
        Creates new sketch curves and points that represent the specified entity as sketch geometry. The sketch geometry is not projected but is created in the same location in space as the input geometry.
        entity : The entity to include into the sketch. This can be a sketch entity from another sketch, edge, face (which results in getting all of its edges, a vertex, construction axis, or construction point.
        Returns a collection of the sketch entities that were created as a result of the include. When including this curves it will be a single sketch curve, but for faces, multiple sketch curves will be created; one for each edge.
        """
        return core.ObjectCollection()

    def findConnectedCurves(self, curve):
        """
        Finds the sketch curves that are end connected to the input curve. This can be useful for many cases but is especially useful in gathering the input when creating an offset.
        curve : The initial sketch curve that will be used to find the connected curves.
        A collection of the connected curves. They are returned in their connected order with the original input curve being one of the curves.
        """
        return core.ObjectCollection()

    def offset(self, curves, directionPoint, offset):
        """
        Creates offset curves for the set of input curves. If the offset distance is not provided, the offset distance is defined by the direction point.
        curves : A set of end connected curves. The Sketch.FindConnectedCurves method is a convenient way to get this set of curves.
        directionPoint : Defines which side of the input curves to create the offset on
        offset : The distance to offset the curves in centimeters.
        A collection of the new offset sketch curves created
        """
        return core.ObjectCollection()

    def modelToSketchSpace(self, modelCoordinate):
        """
        A specified point in model space returns the equivalent point in sketch space. This is sensitive to the assembly context.
        modelCoordinate : A coordinate in model space.
        Returns the equivalent point in sketch space.
        """
        return core.Point3D()

    def sketchToModelSpace(self, sketchCoordinate):
        """
        A specified point in sketch space returns the equivalent point in model space. This is sensitive to the assembly context.
        sketchCoordinate : A coordinate in sketch space.
        Returns the equivalent point in model space.
        """
        return core.Point3D()

    def move(self, sketchEntities, transform):
        """
        Moves the specified sketch entities using the specified transform. Transform respects any constraints that would normally prohibit the move.
        sketchEntities : A collection of sketch entities to transform.
        transform : The transform that defines the move, rotate or scale.
        Returns true if the move was successful.
        """
        return bool()

    def copy(self, sketchEntities, transform, targetSketch):
        """
        Copies the specified sketch entities, applying the specified transform. Any geometric or dimension constraints associated with the entities will automatically be copied, if possible. For example, if there is a horizontal dimension and the transform defines a rotation then it will not be included in the result. This same behavior can be seen when performing a copy/paste operation in the user interface.
        sketchEntities : The collection of sketch entities to copy. They must all exist in this sketch.
        transform : The transform to apply to the copied entities.
        targetSketch : Optionally specifies the sketch to copy the entities to. If not provided the entities are copied to this sketch.
        Returns a collection of the new sketch entities that were created as a result of the copy.
        """
        return core.ObjectCollection()

    def deleteMe(self):
        """
        Deletes the sketch.
        Returns true if the delete was successful.
        """
        return bool()

    def saveAsDXF(self, fullFilename):
        """
        Saves the contents of the sketch to a specified DXF file.
        fullFilename : The full filename, including the path, of the DXF file.
        Returns true if the operation was successful.
        """
        return bool()

    def importSVG(self, fullFilename, xPosition, yPosition, scale):
        """
        Imports the contents of an SVG file into the active sketch.
        fullFilename : The full filename, including the path, of the SVG file.
        xPosition : The X offset in centimeters in the sketch for the origin of the SVG data relative to the sketch origin.
        yPosition : The Y offset in centimeters in the sketch for the origin of the SVG data relative to the sketch origin.
        scale : The scale value to apply to the imported SVG data.
        Returns true if the import was successful.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return Sketch()

    def redefine(self, planarEntity):
        """
        Changes which plane the sketch is based on.
        planarEntity : A construction plane or planar face that defines the sketch plane
        Returns true if the operation was successful.
        """
        return bool()

    def intersectWithSketchPlane(self, entities):
        """
        Intersects the specified entities (BRepBody, BRepFace, BRepEdge, BRepVertex, SketchCurve, ConstructionPoint, ConstructionAxis, and ConstructionPlane) with the sketch plane and creates sketch geometry that represents the intersection.
        entities : An array containing the entities to intersect with the sketch plane.
        An array returning the sketch entities that were created as a result of the intersections. It's possible that this can come back empty in the case where the input entities don't intersect the sketch plane.
        """
        return SketchEntity()

    def projectToSurface(self, faces, curves, projectType, directionEntity):
        """
        Projects the specified set of curves onto the specified set of faces using the specified method of projection. if the projection type is along a vector, then the directionEntity argument must be supplied. if the projectionType is the closest point method, the directionEntity argument is ignored.
        faces : An array of BRepFace objects that the curves will be projected onto.
        curves : An array of various curve objects that will be projected onto the faces. The curves can be sketch curves and points, BRepEdge objects, ConstructionAxis objects, and ConstructionPoint objects.
        projectType : Specifies which projection type to use which defines the direction of projection. If this is set to AlongVectorSurfaceProjectType the directionEntity argument must be provided.
        directionEntity : if the projectType argument is AlongVectorSurfaceProjectType, this argument must be specified and defines the direction of projection. It can be a linear BRepEdge, a BRepFace where the normal will be used, a SketchLine, or a ConstructionLine.
        Returns an array of the sketch entities that were created as a result of projection the specified curves onto the faces.
        """
        return SketchEntity()

    name = property(_get_name, _set_name,
                    doc="Gets and sets the name of this sketch as seen in the browser and timeline.")
    sketchPoints = property(_get_sketchPoints, None,
                            doc="Returns the sketch points collection associated with this sketch. This provides access to the existing sketch points and supports the creation of new sketch points.")
    sketchCurves = property(_get_sketchCurves, None,
                            doc="Returns the sketch curves collection associated with this sketch. This provides access to the existing sketch curves which is all geometry in the sketch except for sketch points. It is through this collection that new sketch geometry gets created.")
    sketchDimensions = property(_get_sketchDimensions, None,
                                doc="Returns the sketch dimensions collection associated with this sketch. This provides access to the existing sketch dimensions and supports the creation of new sketch dimensions.")
    geometricConstraints = property(_get_geometricConstraints, None,
                                    doc="Returns the sketch constraints collection associated with this sketch. This provides access to the existing sketch constraints and supports the creation of new sketch constraints.")
    transform = property(_get_transform, _set_transform,
                         doc="Gets and sets the transform of the sketch with respect to model space. This defines the transform from the parent component space to the sketch space. For example, if you have point coordinates in the space of the parent component and apply this transform it will result in the coordinates of the equivalent position in sketch space. The transform is sensitive to the assembly context. Setting the transform will fail in the case where the sketch is parametric")
    isParametric = property(_get_isParametric, None,
                            doc="Indicates if this sketch is parametric or not. For parametric sketches, you can also get the construction plane or face it is associative to using the ReferencePlane property.")
    isVisible = property(_get_isVisible, _set_isVisible,
                         doc="Gets if this sketch is currently visible in the graphics window. Use the isLightBulbOn to change if the light bulb beside the sketch node in the browser is on or not. Parent nodes in the browser can have their light bulb off which affects all of their children. This property indicates the final result and whether this body is actually visible or not.")
    areDimensionsShown = property(_get_areDimensionsShown, _set_areDimensionsShown,
                                  doc="Indicates if the dimensions of the sketch are displayed when the sketch is not active (in sketch edit mode)")
    areProfilesShown = property(_get_areProfilesShown, _set_areProfilesShown,
                                doc="Indicates if the profiles of the sketch are displayed")
    origin = property(_get_origin, None, doc="Returns the origin point of the sketch in model space.")
    xDirection = property(_get_xDirection, None, doc="Returns the X direction of the sketch as defined in model space.")
    yDirection = property(_get_yDirection, None, doc="Returns the Y direction of the sketch as defined in model space.")
    referencePlane = property(_get_referencePlane, _set_referencePlane,
                              doc="Gets and sets the construction plane or planar face the sketch is associated to. This is only valid when the IsParametric property is True otherwise this returns null and setting the property will fail. Setting this property is the equivalent of the Redefine command.")
    isComputeDeferred = property(_get_isComputeDeferred, _set_isComputeDeferred,
                                 doc="Temporarily turns off the compute of the sketch. This is used to increase the performance as sketch geometry is created. Once the sketch is drawn the this property should be set to false to allow the sketch to recompute. This setting is not saved by the file and is always false when a file is opened.")
    profiles = property(_get_profiles, None, doc="Returns the profiles currently computed for the sketch.")
    timelineObject = property(_get_timelineObject, None, doc="Returns the timeline object associated with this sketch.")
    parentComponent = property(_get_parentComponent, None, doc="Returns the parent Component.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly. but is already the native object.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    boundingBox = property(_get_boundingBox, None, doc="Returns the 3D bounding box of the sketch")
    sketchTexts = property(_get_sketchTexts, None,
                           doc="Returns the sketch text collection associated with this sketch. This provides access to existing text and supports the creation of new text.")
    originPoint = property(_get_originPoint, None,
                           doc="Returns the sketch point that was automatically created by projecting the origin construction point into the sketch.")
    isFullyConstrained = property(_get_isFullyConstrained, None, doc="Indicates if this sketch is fully constrained.")
    attributes = property(_get_attributes, None, doc="Returns the collection of attributes associated with this face.")
    baseOrFormFeature = property(_get_baseOrFormFeature, None,
                                 doc="This property returns the base or form feature that this sketch is associated with. It returns null in the case wher the sketch is parametrically defined and is not related to a base or form feature. It also returns null in the case where the modeling design history is not being captured (direct edit model).")
    healthState = property(_get_healthState, None, doc="Returns the current health state of this sketch.")
    errorOrWarningMessage = property(_get_errorOrWarningMessage, None,
                                     doc="Returns the error or warning message in the case where the healthState property returns either WarningFeatureHealthState or ErrorFeatureHealthState. Otherwise this property returns an empty string.")
    revisionId = property(_get_revisionId, None,
                          doc="Returns the current revision ID of the sketch. This ID changes any time the sketch is modified in any way. By getting and saving the ID when you create any data that is dependent on the sketch, you can then compare the saved ID with the current ID to determine if the sketch has changed to know if you should update your data.")
    areConstraintsShown = property(_get_areConstraintsShown, _set_areConstraintsShown,
                                   doc="Indicates if the constraints of the sketch are displayed when the sketch is active.")
    arePointsShown = property(_get_arePointsShown, _set_arePointsShown,
                              doc="Indicates if the sketch points in the sketch are displayed. Points that are not connected to any other geometry will continue to be shown.")
    isLightBulbOn = property(_get_isLightBulbOn, _set_isLightBulbOn,
                             doc="Gets and set if the light bulb beside the sketch node in the browser is on or not. Parent nodes in the browser can have their light bulb off which affects all of their children so this property does not indicate if the body is actually visible, just that it should be visible if all of it's parent nodes are also visible. Use the isVisible property to determine if it's actually visible.")


class SketchArcs(core.Base):
    """
    The collection of arcs in a sketch. This provides access to the existing arcs and supports the methods to create new arcs.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchArcs()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified sketch arc using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SketchArc()

    def addByCenterStartSweep(self, centerPoint, startPoint, sweepAngle):
        """
        Creates a sketch arc that is always parallel to the x-y plane of the sketch and is centered at the specified point.
        centerPoint : The center point of the arc. This can be either an existing SketchPoint or a Point3D object.
        startPoint : The start point of the arc. The distance between this point and the center defines the radius of the arc. This can be either an existing SketchPoint or a Point3D object.
        sweepAngle : The sweep of the arc. This is defined in radians and a positive value defines a counter-clockwise sweep.
        Returns the newly created SketchArc object or null if the creation failed.
        """
        return SketchArc()

    def addByThreePoints(self, startPoint, point, endPoint):
        """
        Creates a sketch arc that passes through the three points.
        startPoint : The start point of the arc. This can be either an existing SketchPoint or a Point3D object.
        point : A point along the arc. This is a Point3D object.
        endPoint : The end point of the arc. This can be either an existing SketchPoint or a Point3D object.
        Returns the newly created SketchArc or null in the case of a failure.
        """
        return SketchArc()

    def addFillet(self, firstEntity, firstEntityPoint, secondEnitity, secondEntityPoint, radius):
        """
        Creates a fillet between two sketch entities The side (quadrant) the fillet is created on is determined by the points specified. The point for each entity can be its startSketchPoint or endSketchPoint
        firstEntity : The first curve for the fillet definition. The curve must be open.
        firstEntityPoint : A point on or closer to one end of the first curve that indicates the side to create the fillet on
        secondEnitity : The second curve for the fillet definition. The curve must be open.
        secondEntityPoint : A point on or closer to one end of the second curve that indicates the side to create the fillet on
        radius : radius of the arc in centimeters
        Returns the newly created SketchArc object (fillet) if the operation was successful or null if it failed.
        """
        return SketchArc()

    count = property(_get_count, None, doc="Returns the number of arcs in the sketch.")


class SketchCircles(core.Base):
    """
    The collection of circles in a sketch. This provides access to the existing circles and supports the methods to create new circles.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchCircles()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified sketch circle using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SketchCircle()

    def addByCenterRadius(self, centerPoint, radius):
        """
        Creates a sketch circle that is always parallel to the x-y plane of the sketch and is centered at the specified point.
        centerPoint : The center point of the circle. It can be an existing SketchPoint or a Point3D object.
        radius : The radius of the circle in centimeters.
        Returns the newly created SketchCircle object or null if the creation failed.
        """
        return SketchCircle()

    def addByTwoPoints(self, pointOne, pointTwo):
        """
        Creates a sketch circle where the circle passes through the two points and the distance between the two points is the diameter of the circle.
        pointOne : A Point3D object that defines a point is sketch space and lies on the x-y plane of the sketch.
        pointTwo : A Point3D object that defines a point is sketch space and lies on the x-y plane of the sketch.
        Returns the newly created SketchCircle object or null if the creation failed.
        """
        return SketchCircle()

    def addByThreePoints(self, pointOne, pointTwo, pointThree):
        """
        Creates a sketch circle that passes through the three points. The three points must lie on the x-y plane of the sketch.
        pointOne : The first point that the circle will pass through. The z component must be zero.
        pointTwo : The second point that the circle will pass through. The z component must be zero.
        pointThree : The third point that the circle will pass through. The z component must be zero.
        Returns the newly created SketchCircle object or null if the creation failed.
        """
        return SketchCircle()

    def addByTwoTangents(self, tangentOne, tangentTwo, radius, hintPoint):
        """
        Creates a sketch circle that is tangent to the two input lines. The two lines must lie on the x-y plane of the sketch.
        tangentOne : The first line that the circle will be tangent to. The line must lie on the x-y plane of the sketch.
        tangentTwo : The second line that the circle will be tangent to. The line must lie on the x-y plane of the sketch and cannot be parallel to the first line.
        radius : The radius of the circle in centimeters.
        hintPoint : A point that specifies which of the possible four solutions to use when creating the circle. If you consider the two input lines to be infinite they create four quadrants which results in four possible solutions for the creation of the circle. The hint point is a point anywhere within the quadrant where you want the circle created.
        Returns the newly created SketchCircle object or null if the creation failed.
        """
        return SketchCircle()

    def addByThreeTangents(self, tangentOne, tangentTwo, tangentThree, hintPoint):
        """
        Creates a sketch circle that is tangent to the three input lines. The three lines must lie on the x-y plane of the sketch.
        tangentOne : The first line that the circle will be tangent to. The line must lie on the x-y plane of the sketch and cannot be parallel to the second or third line.
        tangentTwo : The second line that the circle will be tangent to. The line must lie on the x-y plane of the sketch and cannot be parallel to the first or third line.
        tangentThree : The third line that the circle will be tangent to. The line must lie on the x-y plane of the sketch and cannot be parallel to the first or second line.
        hintPoint : A point that specifies which of the possible multiple solutions to use when creating the circle. If you consider the three input lines to be infinite there are many possible solutions when creating a circle that is tangent to all three lines. The hint point is a point anywhere within the area defined by the three lines where the circle is to be created.
        Returns the newly created SketchCircle object or null if the creation failed.
        """
        return SketchCircle()

    count = property(_get_count, None, doc="Returns the number of circles in the sketch.")


class SketchConicCurves(core.Base):
    """
    The collection of conic curves in a sketch. This provides access to the existing conic curves and supports the method to create new conic curves.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchConicCurves()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified conic curve using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SketchConicCurve()

    count = property(_get_count, None, doc="Returns the number of conic curves in the sketch.")


class SketchCurves(core.Base):
    """
    A collection of sketch curves in a sketch. This also provides access to collections for the specific types of curves where you can get the curves based on type and create new curves.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchCurves()

    def _get_count(self):
        return int()

    def _get_sketchArcs(self):
        return SketchArcs()

    def _get_sketchCircles(self):
        return SketchCircles()

    def _get_sketchEllipses(self):
        return SketchEllipses()

    def _get_sketchEllipticalArcs(self):
        return SketchEllipticalArcs()

    def _get_sketchLines(self):
        return SketchLines()

    def _get_sketchFittedSplines(self):
        return SketchFittedSplines()

    def _get_sketchFixedSplines(self):
        return SketchFixedSplines()

    def _get_sketchConicCurves(self):
        return SketchConicCurves()

    def item(self, index):
        """
        Function that returns the specified sketch curve using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SketchCurve()

    count = property(_get_count, None, doc="Returns the number of sketch curves in the sketch.")
    sketchArcs = property(_get_sketchArcs, None,
                          doc="Returns the sketch arcs collection associated with this sketch. This provides access to the existing sketch arcs and supports the creation of new sketch arcs.")
    sketchCircles = property(_get_sketchCircles, None,
                             doc="Returns the sketch circles collection associated with this sketch. This provides access to the existing sketch circles and supports the creation of new sketch circles.")
    sketchEllipses = property(_get_sketchEllipses, None,
                              doc="Returns the sketch ellipses collection associated with this sketch. This provides access to the existing sketch ellipses and supports the creation of new sketch ellipses.")
    sketchEllipticalArcs = property(_get_sketchEllipticalArcs, None,
                                    doc="Returns the sketch elliptical arcs collection associated with this sketch. This provides access to the existing sketch elliptical arcs and supports the creation of new sketch elliptical arcs.")
    sketchLines = property(_get_sketchLines, None,
                           doc="Returns the sketch lines collection associated with this sketch. This provides access to the existing sketch lines and supports the creation of new sketch lines.")
    sketchFittedSplines = property(_get_sketchFittedSplines, None,
                                   doc="Returns the sketch splines collection associated with this sketch. This provides access to the existing sketch splines and supports the creation of new sketch splines.")
    sketchFixedSplines = property(_get_sketchFixedSplines, None,
                                  doc="Returns the fixed sketch splines collection associated with this sketch. This provides access to the existing fixed sketch splines and supports the creation of new fixed sketch splines.")
    sketchConicCurves = property(_get_sketchConicCurves, None,
                                 doc="Returns the conic curves collection associated with this sketch. This provides access to the existing conic curves and support the creation of new conic curves.")


class SketchDimension(core.Base):
    """
    The base class for the all sketch dimensions.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchDimension()

    def _get_isDeletable(self):
        return bool()

    def _set_textPosition(self, textPosition):
        pass

    def _get_textPosition(self):
        return core.Point3D()

    def _get_parentSketch(self):
        return Sketch()

    def _get_parameter(self):
        return ModelParameter()

    def _get_assemblyContext(self):
        return Occurrence()

    def _set_isDriving(self, isDriving):
        pass

    def _get_isDriving(self):
        return bool()

    def _get_attributes(self):
        return core.Attributes()

    def deleteMe(self):
        """
        Deletes this dimension. The IsDeletable property indicates if this dimension can be deleted.
        Returns true if the delete was successful.
        """
        return bool()

    isDeletable = property(_get_isDeletable, None, doc="Indicates if this dimension is deletable.")
    textPosition = property(_get_textPosition, _set_textPosition, doc="Gets and sets position of the dimension text.")
    parentSketch = property(_get_parentSketch, None, doc="Returns the parent sketch object.")
    parameter = property(_get_parameter, None,
                         doc="Returns the associated parameter or null if there is no associated parameter.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly but is already the native object.")
    isDriving = property(_get_isDriving, _set_isDriving,
                         doc="Gets and sets if the dimension is Driving or is Driven. Setting this property to true for a given dimension may fail if the result would overconstrain the sketch. Fusion 360 does not allow overconstrained sketches.")
    attributes = property(_get_attributes, None,
                          doc="Returns the collection of attributes associated with this sketch dimension.")


class SketchDimensionList(core.Base):
    """
    A list of sketch dimensions.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchDimensionList()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified sketch dimension using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SketchDimension()

    count = property(_get_count, None, doc="Returns the number of sketch dimensions in the sketch.")


class SketchDimensions(core.Base):
    """
    A collection of the dimensions in a sketch. This object also supports the methods to add new sketch dimensions.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchDimensions()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified sketch dimension using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SketchDimension()

    def addDistanceDimension(self, pointOne, pointTwo, orientation, textPoint, isDriving):
        """
        Creates a new linear dimension constraint between the two input entities.
        pointOne : The first SketchPoint to dimension to.
        pointTwo : The second SketchPoint to dimension to..
        orientation : The orientation of the dimension.
        textPoint : A Point3D object that defines the position of the dimension text.
        isDriving : Optional argument that specifies if a driving (the dimension controls the geoemtry) or a driven (the geometry controls the dimension) dimension is created. If not provided a driving dimension will be created.
        Returns the newly created dimension or null if the creation failed.
        """
        return SketchLinearDimension()

    def addOffsetDimension(self, line, entityTwo, textPoint, isDriving):
        """
        Creates a new linear dimension constraint between the two input entities. The first input entity must be a sketch line. The second entity can be a point or a line that is parallel to the first. The dimension controls the distance as measured perpendicular to the first input line.
        line : The SketchLine to dimension to.
        entityTwo : The parallel SketchLine or SketchPoint to dimension to. If a SketchLine is used it must be parallel to the first line.
        textPoint : A Point3D object that defines the position of the dimension text.
        isDriving : Optional argument that specifies if a driving (the dimension controls the geoemtry) or a driven (the geometry controls the dimension) dimension is created. If not provided a driving dimension will be created.
        Returns the newly created dimension or null if the creation failed.
        """
        return SketchOffsetDimension()

    def addAngularDimension(self, lineOne, lineTwo, textPoint, isDriving):
        """
        Creates a new angular dimension constraint between the two input lines. The position of the text controls which of the four quadrants will be dimensioned.
        lineOne : The first SketchLine to dimension to.
        lineTwo : The second SketchLine to dimension to.
        textPoint : A Point3D object that defines the position of the dimension text. The position of this text defines which quadrant will be dimensioned.
        isDriving : Optional argument that specifies if a driving (the dimension controls the geoemtry) or a driven (the geometry controls the dimension) dimension is created. If not provided a driving dimension will be created.
        Returns the newly created dimension or null if the creation failed.
        """
        return SketchAngularDimension()

    def addDiameterDimension(self, entity, textPoint, isDriving):
        """
        Creates a new diameter dimension constraint on the arc or circle.
        entity : The SketchCircle or SketchArc to dimension.
        textPoint : A Point3D object that defines the position of the dimension text.
        isDriving : Optional argument that specifies if a driving (the dimension controls the geoemtry) or a driven (the geometry controls the dimension) dimension is created. If not provided a driving dimension will be created.
        Returns the newly created dimension or null if the creation failed.
        """
        return SketchDiameterDimension()

    def addRadialDimension(self, entity, textPoint, isDriving):
        """
        Creates a new radial dimension constraint on the arc or circle.
        entity : The SketchCircle or SketchArc to dimension.
        textPoint : A Point3D object that defines the position of the dimension text.
        isDriving : Optional argument that specifies if a driving (the dimension controls the geoemtry) or a driven (the geometry controls the dimension) dimension is created. If not provided a driving dimension will be created.
        Returns the newly created dimension or null if the creation failed.
        """
        return SketchRadialDimension()

    def addEllipseMajorRadiusDimension(self, ellipse, textPoint, isDriving):
        """
        Creates a new dimension constraint on the major radius of an ellipse.
        ellipse : The SketchEllipse to dimension.
        textPoint : A Point3D object that defines the position of the dimension text.
        isDriving : Optional argument that specifies if a driving (the dimension controls the geoemtry) or a driven (the geometry controls the dimension) dimension is created. If not provided a driving dimension will be created.
        Returns the newly created dimension or null if the creation failed.
        """
        return SketchEllipseMajorRadiusDimension()

    def addEllipseMinorRadiusDimension(self, ellipse, textPoint, isDriving):
        """
        Creates a new dimension constraint on the minor radius of an ellipse.
        ellipse : The SketchEllipse to dimension.
        textPoint : A Point3D object that defines the position of the dimension text.
        isDriving : Optional argument that specifies if a driving (the dimension controls the geoemtry) or a driven (the geometry controls the dimension) dimension is created. If not provided a driving dimension will be created.
        Returns the newly created dimension or null if the creation failed.
        """
        return SketchEllipseMinorRadiusDimension()

    def addConcentricCircleDimension(self, circleOne, circleTwo, textPoint, isDriving):
        """
        Creates a new dimension constraint between to concentric circles or arcs.
        circleOne : The first SketchCircle or SketchArc to dimension.
        circleTwo : The second SketchCircle or SketchArc to dimension.
        textPoint : A Point3D object that defines the position of the dimension text.
        isDriving : Optional argument that specifies if a driving (the dimension controls the geoemtry) or a driven (the geometry controls the dimension) dimension is created. If not provided a driving dimension will be created.
        Returns the newly created dimension or null if the creation failed.
        """
        return SketchConcentricCircleDimension()

    count = property(_get_count, None, doc="Returns the number of sketch dimensions in the sketch.")


class SketchEllipses(core.Base):
    """
    The collection of ellipses in a sketch. This provides access to the existing ellipses and supports the methods to create new ellipses.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchEllipses()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified sketch ellipse using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SketchEllipse()

    def add(self, centerPoint, majorAxisPoint, point):
        """
        Creates a sketch ellipse using the center point, a point defining the major axis and a third point anywhere along the ellipse. The created ellipse is parallel to the x-y plane of the sketch.
        centerPoint : The center point of the ellipse. This can be either an existing SketchPoint or a Point3D object.
        majorAxisPoint : A point3D object that defines both the major axis direction and major axis radius.
        point : A point3D object that the ellipse will pass through.
        Returns the newly created SketchEllipse object if the creation was successful or null if it failed.
        """
        return SketchEllipse()

    count = property(_get_count, None, doc="Returns the number of ellipses in the sketch.")


class SketchEllipticalArcs(core.Base):
    """
    The collection of elliptical arcs in a sketch. This provides access to the existing elliptical arcs and supports the methods to create new elliptical arcs.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchEllipticalArcs()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified sketch elliptical arc using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SketchEllipticalArc()

    count = property(_get_count, None, doc="Returns the number of elliptical arcs in the sketch.")


class SketchEntity(core.Base):
    """
    This object represents all geometry in a sketch, including points and lines and the various curves.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchEntity()

    def _get_parentSketch(self):
        return Sketch()

    def _get_sketchDimensions(self):
        return SketchDimensionList()

    def _get_geometricConstraints(self):
        return GeometricConstraintList()

    def _get_is2D(self):
        return bool()

    def _set_isReference(self, isReference):
        pass

    def _get_isReference(self):
        return bool()

    def _set_isFixed(self, isFixed):
        pass

    def _get_isFixed(self):
        return bool()

    def _get_isVisible(self):
        return bool()

    def _get_boundingBox(self):
        return core.BoundingBox3D()

    def _get_referencedEntity(self):
        return core.Base()

    def _get_assemblyContext(self):
        return Occurrence()

    def _get_isDeletable(self):
        return bool()

    def _get_isFullyConstrained(self):
        return bool()

    def _get_attributes(self):
        return core.Attributes()

    def deleteMe(self):
        """
        Deletes the entity from the sketch.
        Returns true is the delete was successful.
        """
        return bool()

    parentSketch = property(_get_parentSketch, None, doc="Returns the parent sketch.")
    sketchDimensions = property(_get_sketchDimensions, None,
                                doc="Returns the sketch dimensions that are attached to this curve.")
    geometricConstraints = property(_get_geometricConstraints, None,
                                    doc="Returns the sketch constraints that are attached to this curve.")
    is2D = property(_get_is2D, None, doc="Indicates if this curve lies entirely on the sketch x-y plane.")
    isReference = property(_get_isReference, _set_isReference,
                           doc="Indicates if this geometry is a reference. Changing this property from true to false removes the reference. This property can not be set to true if it is already false.")
    isFixed = property(_get_isFixed, _set_isFixed, doc="Indicates if this geometry is 'fixed'.")
    isVisible = property(_get_isVisible, None,
                         doc="When a sketch is created, geometry is sometimes automatically added to the sketch. For example a sketch point that references the origin point is always included and if a face was selected to create the sketch on, geometry from the face is also included. This automatically created geometry behaves in a special way in that it is invisible but is available for selection and it also participates in profile calculations. It's not possible to make them visible but they can be deleted and they can be used for any other standard sketch operation.")
    boundingBox = property(_get_boundingBox, None, doc="Returns the bounding box of the entity in sketch space.")
    referencedEntity = property(_get_referencedEntity, None,
                                doc="Returns the referenced entity in the case where IsReference is true. However, this property can also return null when IsReference is true in the case where the reference is not parametric.")
    assemblyContext = property(_get_assemblyContext, None,
                               doc="Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly but is already the native object.")
    isDeletable = property(_get_isDeletable, None,
                           doc="Indicates if this sketch entity can be deleted. There are cases, especially with sketch points where another entity is dependent on an entity so deleting it is not allowed. For example, you can't delete the center point of circle by itself but deleting the circle will delete the point. The same is true for the end points of a line.")
    isFullyConstrained = property(_get_isFullyConstrained, None,
                                  doc="Indicates if this sketch entity is fully constrained.")
    attributes = property(_get_attributes, None, doc="Returns the collection of attributes associated with this face.")


class SketchEntityList(core.Base):
    """
    A list of sketch entities.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchEntityList()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified sketch entity using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SketchEntity()

    count = property(_get_count, None, doc="Returns the number of sketch entities in the list.")


class Sketches(core.Base):
    """
    Provides access to the sketches within a design and provides methods to create new sketches.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return Sketches()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified sketch using an index into the collection. index : The index of the item
        within the collection to return. The first item in the collection has an index of 0. Returns the specified
        item or null if an invalid index was specified.
        """
        return Sketch()

    def itemByName(self, name):
        """
        Returns the sketch with the specified name.
        name : The name of the sketch as seen in the browser and the timeline.
        Returns the sketch or null if there isn't a sketch with that name.
        """
        return Sketch()

    def add(self, planarEntity, occurrenceForCreation):
        """
        Creates a new sketch on the specified planar entity.
        planarEntity : A construction plane or planar face that defines the sketch plane
        occurrenceForCreation : A creation occurrence is needed if the planarEntity is in another component AND the sketch is not in the root component. The occurrenceForCreation is analogous to the active occurrence in the UI.
        Returns the newly created Sketch or null if the creation failed.
        """
        return Sketch()

    def addToBaseOrFormFeature(self, planarEntity, targetBaseOrFormFeature, includeFaceEdges):
        """
        Creates a parametric sketch that is associated with a base feature. Because of a current limitation, if you want to create a sketch associated with a base feature, you must first call the edit method of the base feature, use this method to create the sketch, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.
        planarEntity : A construction plane or planar face that defines the sketch plane.
        targetBaseOrFormFeature : The existing base feature that you want to associate this sketch with.
        includeFaceEdges : When a BrepFace is used as the planarEntity argument, this defines if the edges of the face should be included in the sketch.
        Returns the newly created Sketch or null if the creation failed.
        """
        return Sketch()

    def addWithoutEdges(self, planarEntity, occurrenceForCreation):
        """
        Creates a new sketch on the specified planar entity. If a BRepFace is provided, the edges of the face are not projected into the sketch so the result of creating a new sketch with this method will always be a new empty sketch.
        planarEntity : A construction plane or planar face that defines the sketch plane.
        occurrenceForCreation : A creation occurrence is needed if the planarEntity is in another component AND the sketch is not in the root component. The occurrenceForCreation is analogous to the active occurrence in the UI.
        Returns the newly created Sketch or null if the creation failed.
        """
        return Sketch()

    count = property(_get_count, None, doc="Returns the number of sketches in a component")


class SketchFittedSplines(core.Base):
    """
    The collection of fitted splines in a sketch. This provides access to the existing fitted splines and supports the methods to create new fitted splines.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchFittedSplines()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified sketch fitted spline using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SketchFittedSpline()

    def add(self, fitPoints):
        """
        Creates a new fitted spline through the specified points.
        fitPoints : A collection of points that the curve will fit through. They can be any combination of existing SketchPoint or Point3D objects.
        Returns the newly created SketchFittedSpline object if the creation was successful or null if it failed.
        """
        return SketchFittedSpline()

    def addByNurbsCurve(self, nurbsCurve):
        """
        Creates a new fitted spline using the input NurbsCurve3D to define the shape. Fit points are created to create a curve that exactly matches the input curve.
        nurbsCurve : A NurbsCurve3D object that defines a valid NURBS curve.
        Returns the newly created SketchFittedSpline object if the creation was successful or null if it failed.
        """
        return SketchFittedSpline()

    count = property(_get_count, None, doc="Returns the number of fitted splines in the sketch.")


class SketchFixedSplines(core.Base):
    """
    The collection of fixed splines in a sketch. Fixed splines are splines that were created as the result of some operation (i.e. intersection) and is not directly editable.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchFixedSplines()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified sketch fixed spline using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SketchFixedSpline()

    count = property(_get_count, None, doc="Returns the number of fitted splines in the sketch.")


class SketchLineList(core.Base):
    """
    A list of sketch lines.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchLineList()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified sketch line using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SketchLine()

    count = property(_get_count, None, doc="Returns the number of sketch lines in the list.")


class SketchLines(core.Base):
    """
    The collection of lines in a sketch. This provides access to the existing lines and supports the methods to create new lines.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchLines()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified sketch line using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SketchLine()

    def addByTwoPoints(self, startPoint, endPoint):
        """
        Creates a sketch line between the two input points. The input points can be either existing SketchPoints or Point3D objects. If a SketchPoint is used the new line will be based on that sketch point and update if the sketch point is modified.
        startPoint : The start point of the line. It can be a SketchPoint or Point3D object.
        endPoint : The end point of the line. It can be a SketchPoint or Point3D object.
        Returns the newly created SketchLine object or null if the creation failed.
        """
        return SketchLine()

    def addTwoPointRectangle(self, pointOne, pointTwo):
        """
        Creates four sketch lines representing a rectangle where the two points are the opposing corners of the rectangle. The input points can be either existing SketchPoints or Point3D objects. If a SketchPoint is used the new lines will be based on that sketch point and update if the sketch point is modified.
        pointOne : The first corner of the rectangle. It can be a SketchPoint or Point3D object.
        pointTwo : The second corner of the rectangle. It can be a SketchPoint or Point3D object.
        Returns the four new sketch lines or null if the creation failed.
        """
        return SketchLineList()

    def addThreePointRectangle(self, pointOne, pointTwo, pointThree):
        """
        Creates four sketch lines representing a rectangle where the first two points are the base corners of the rectangle and the third point defines the height.
        pointOne : The first corner of the rectangle. It can be a SketchPoint or Point3D object.
        pointTwo : The first corner of the rectangle. It can be a SketchPoint or Point3D object.
        pointThree : The first corner of the rectangle. a Point3D object defining the height of the rectangle.
        Returns the four new sketch lines or null if the creation failed.
        """
        return SketchLineList()

    def addCenterPointRectangle(self, centerPoint, cornerPoint):
        """
        Creates four sketch lines representing a rectangle where the first point represents the center of the rectangle. The second point is the corner of the rectangle and can be either an existing SketchPoint or Point3D object. The four sketch lines are returned.
        centerPoint : The center point of the rectangle
        cornerPoint : The corner of the rectangle. It can be a SketchPoint or Point3D object.
        Returns the four new sketch lines or null if the creation failed.
        """
        return SketchLineList()

    count = property(_get_count, None, doc="Returns the number of lines in the sketch.")


class SketchPointList(core.Base):
    """
    A list of sketch points.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchPointList()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified sketch point using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SketchPoint()

    count = property(_get_count, None, doc="Returns the number of sketch points in the list.")


class SketchPoints(core.Base):
    """
    A collection of sketch points.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchPoints()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified sketch using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SketchPoint()

    def add(self, point):
        """
        Creates a point at the specified location. This is the equivalent of creating a sketch point using the Point command in the user interface and will create a visible point in the graphics window.
        point : The coordinate location to create the sketch point.
        Returns the new sketch point or null if the creation fails.
        """
        return SketchPoint()

    count = property(_get_count, None, doc="Returns the number of sketch points in the sketch.")


class SketchTextInput(core.Base):
    """
    The SketchTextInput object is equivalent to the Sketch Text dialog in that it collects all of the input required to create sketch text. Once the properties of the SketchTextInput object have been defined, use the add method to create the sketch text. A SketchTextInput object is created by using the createInput of the SketchTexts object.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchTextInput()

    def _set_height(self, height):
        pass

    def _get_height(self):
        return float()

    def _set_text(self, text):
        pass

    def _get_text(self):
        return str()

    def _set_position(self, position):
        pass

    def _get_position(self):
        return core.Point3D()

    def _set_fontName(self, fontName):
        pass

    def _get_fontName(self):
        return str()

    def _set_angle(self, angle):
        pass

    def _get_angle(self):
        return float()

    def _set_textStyle(self, textStyle):
        pass

    def _get_textStyle(self):
        return TextStyles()

    height = property(_get_height, _set_height, doc="Gets and sets the height of the text in centimeters.")
    text = property(_get_text, _set_text, doc="Gets and sets the text.")
    position = property(_get_position, _set_position,
                        doc="Gets and sets the position of the text on the x-y plane of the sketch. The text must lie on the x-y plane so the Z component of the point is ignored and always treated as zero.")
    fontName = property(_get_fontName, _set_fontName, doc="Gets and sets the name of the font to use.")
    angle = property(_get_angle, _set_angle,
                     doc="Gets and sets the angle of the text relative to the x-axis of the x-y plane of the sketch.")
    textStyle = property(_get_textStyle, _set_textStyle,
                         doc="Gets and sets the text style to apply to the entire text. This is a bitwise enum so styles can be combined to apply multiple styles. For example you can apply bold and underline.")


class SketchTexts(core.Base):
    """
    The collection of text blocks in a sketch. This provides access to the existing text blocks and supports creating new text blocks.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchTexts()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified sketch text using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SketchText()

    def createInput(self, formattedText, height, position):
        """
        Creates a SketchTextInput object that can be used to define additional settings when creating sketch text. The SketchTextInput object is equivalent to the Sketch Text dialog in that it collects all of the input required to create sketch text. Once the properties of the SketchTextInput object have been defined, use the add method to create the sketch text.
        formattedText : The text used for the sketch text. This is a simple string as no additional formatting is currently supported.
        height : The height of the text in centimeters.
        position : The position of the text on the x-y plane of the sketch. The text must lie on the x-y plane so the Z component of the point is ignored and always treated as zero.
        Returns a SketchTextInput object that can be used to set additional formatting and is used as input to the add method.
        """
        return SketchTextInput()

    def add(self, input):
        """
        Creates a sketch text.
        input : A SketchTextInput object created using the SketchTexts.createInput method.
        Returns the newly created SketchText object or null in the case of failure.
        """
        return SketchText()

    count = property(_get_count, None, doc="Returns the number of texts in the sketch.")


class Snapshot(core.Base):
    """
    Object that represents a Snapshot in the timeline
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return Snapshot()

    def _set_name(self, name):
        pass

    def _get_name(self):
        return str()

    def _get_timelineObject(self):
        return TimelineObject()

    def deleteMe(self):
        """
        Deletes this snapshot.
        Returns true if the delete was successful.
        """
        return bool()

    name = property(_get_name, _set_name, doc="Gets and sets the name of the snapshot as seen in the timeline.")
    timelineObject = property(_get_timelineObject, None,
                              doc="Returns the timeline object associated with this snapshot.")


class Snapshots(core.Base):
    """
    Provides access to the Snapshots within a design and provides methods to create new Snapshots.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return Snapshots()

    def _get_count(self):
        return int()

    def _get_hasPendingSnapshot(self):
        return bool()

    def add(self):
        """
        Creates a new snapshot. Creating a snapshot is only valid when the HasPendingTransforms property returns true.
        Returns the newly created snapshot.
        """
        return Snapshot()

    def item(self, index):
        """
        Function that returns the specified snapshot in the collection using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return Snapshot()

    def revertPendingSnapshot(self):
        """
        Reverts and changes that have been made that can be snapshot. This effectively reverts the design back to the last snapshot. This is only valid when the HasPendingSnapshot property returns true.
        Returns true if the revert was successful.
        """
        return bool()

    count = property(_get_count, None, doc="The number of items in the collection.")
    hasPendingSnapshot = property(_get_hasPendingSnapshot, None,
                                  doc="Indicates if there are any changes that have been made than can be snapshot.")


class SphereFeatures(core.Base):
    """
    Collection that provides access to all of the existing torus features in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SphereFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified sphere feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SphereFeature()

    def itemByName(self, name):
        """
        Function that returns the specified sphere feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return SphereFeature()

    count = property(_get_count, None, doc="The number of sphere features in the collection.")


class SplitBodyFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a split body feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SplitBodyFeatureInput()

    def _set_splitBodies(self, splitBodies):
        pass

    def _get_splitBodies(self):
        return core.Base()

    def _set_splittingTool(self, splittingTool):
        pass

    def _get_splittingTool(self):
        return core.Base()

    def _set_isSplittingToolExtended(self, isSplittingToolExtended):
        pass

    def _get_isSplittingToolExtended(self):
        return bool()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    splitBodies = property(_get_splitBodies, _set_splitBodies,
                           doc="Gets and sets the input solid or open bodies to be split. This can be a single BRepBody or an ObjectCollection if multiple bodies are to be split.")
    splittingTool = property(_get_splittingTool, _set_splittingTool,
                             doc="Gets and sets the entity that defines the splitting tool. The splitting tool is a single entity that can be either a solid or open BRepBody, construction plane, profile, or a face.")
    isSplittingToolExtended = property(_get_isSplittingToolExtended, _set_isSplittingToolExtended,
                                       doc="Gets and sets whether or not the splitting tool is to be automatically extended (if possible) so as to completely intersect the bodyToSplit.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class SplitBodyFeatures(core.Base):
    """
    Collection that provides access to all of the existing split body features in a component and supports the ability to create new split body features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SplitBodyFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified split body feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SplitBodyFeature()

    def createInput(self, splitBodies, splittingTool, isSplittingToolExtended):
        """
        Creates a SplitBodyFeatureInput object. Use properties and methods on this object to define the split body you want to create and then use the Add method, passing in the SplitBodyFeatureInput object.
        splitBodies : Input solid body or open bodies to be split. This can be a single BRepBody or an ObjectCollection if multliple bodies are to be split.
        splittingTool : Input entity that defines the splitting tool. The splitting tool is a single entity that can be either a solid or open BRepBody, construction plane, profile, or a face.
        isSplittingToolExtended : A boolean value for setting whether or not the splitting tool is to be automatically extended (if possible) so as to completely intersect the bodyToSplit.
        Returns the newly created SplitBodyFeatureInput object or null if the creation failed.
        """
        return SplitBodyFeatureInput()

    def add(self, input):
        """
        Creates a new split body feature.
        input : A SplitBodyFeatureInput object that defines the desired split body feature. Use the createInput method to create a new SplitBodyFeatureInput object and then use methods on it (the SplitBodyFeatureInput object) to define the split body.
        Returns the newly created SplitBodyFeature object or null if the creation failed.
        """
        return SplitBodyFeature()

    def itemByName(self, name):
        """
        Function that returns the specified split body feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return SplitBodyFeature()

    count = property(_get_count, None, doc="The number of split body features in the collection.")


class SplitFaceFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a split face feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SplitFaceFeatureInput()

    def _set_facesToSplit(self, facesToSplit):
        pass

    def _get_facesToSplit(self):
        return core.ObjectCollection()

    def _set_splittingTool(self, splittingTool):
        pass

    def _get_splittingTool(self):
        return core.Base()

    def _set_isSplittingToolExtended(self, isSplittingToolExtended):
        pass

    def _get_isSplittingToolExtended(self):
        return bool()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    def _get_splitType(self):
        return SplitFaceSplitTypes()

    def setAlongVectorSplitType(self, directionEntity):
        """
        Sets the split type to project the splitting tool along the direction defined by the specified entity.
        directionEntity : An entity that defines the direction of projection of the splitting tool. This can be a linear BRepEdge, SketchLine, ConstructionLine, or a planar face where the face normal is used.
        Returns true is setting the split type was successful.
        """
        return bool()

    def setClosestPointSplitType(self):
        """
        Sets the split type to be a curve that defined by projecting the splitting curve to the closest point on the surface.
        Returns true is setting the split type was successful.
        """
        return bool()

    def setSurfaceIntersectionSplitType(self, isSplittingToolExtended):
        """
        Set the split type to be a surface to surface intersection. If the split tool is a curve it will be extruded into a surface to use in the split. If it's a surface, the surface will be used and optionally extended to fully intersect the faces to be split.
        isSplittingToolExtended : Specifies if the splitting tool should be extended so that is fully intersects the faces to be split.
        Returns true is setting the split type was successful.
        """
        return bool()

    facesToSplit = property(_get_facesToSplit, _set_facesToSplit,
                            doc="Gets and sets the faces to be split. The collection can contain one or more faces selected from solid and/or open bodies.")
    splittingTool = property(_get_splittingTool, _set_splittingTool,
                             doc="Gets and sets the entity(s) that define the splitting tool(s). The splitting tool can be a single entity or an ObjectCollection containing solid and/or open bodies, construction planes, faces, or sketch curves that partially or fully intersect the faces that are being split.")
    isSplittingToolExtended = property(_get_isSplittingToolExtended, _set_isSplittingToolExtended,
                                       doc="Gets and sets whether or not the splittingTool is to be automatically extended (if possible) so as to completely intersect the facesToSplit.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")
    splitType = property(_get_splitType, None, doc="Returns the type of split type currently defined.")


class SplitFaceFeatures(core.Base):
    """
    Collection that provides access to all of the existing split face features in a component and supports the ability to create new split face features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SplitFaceFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified split face feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SplitFaceFeature()

    def createInput(self, facesToSplit, splittingTool, isSplittingToolExtended):
        """
        Creates a SplitFaceFeatureInput object. Use properties and methods on this object to define the split face you want to create and then use the Add method, passing in the SplitFaceFeatureInput object. A newly created SplitFaceFeatureInput object defaults to creating a split face feature using the 'Split with Surface' option. You can use functions on the SplitFaceFeatureInput object to define a different type of split type.
        facesToSplit : Input the faces to be split. The collection can contain one or more faces from solid and/or open bodies.
        splittingTool : Input entity(s) that defines the splitting tool. The splitting tool can be a single entity or an ObjectCollection containing solid and/or open bodies, construction planes, faces, or sketch curves that partially or fully intersect the faces that are being split.
        isSplittingToolExtended : A boolean value for setting whether or not the splittingTool is to be automatically extended (if possible) so as to completely intersect the faces that are to be split. This is only used when the split type is 'split with surface' which is the default type when a new createInput is created. Use functions on the returned SplitFaceFeatureInput to define a different type of split type.
        Returns the newly created SplitFaceFeatureInput object or null if the creation failed.
        """
        return SplitFaceFeatureInput()

    def add(self, input):
        """
        Creates a new split face feature.
        input : A SplitFaceFeatureInput object that defines the desired split face feature. Use the createInput method to create a new SplitFaceFeatureInput object and then use methods on it (the SplitFaceFeatureInput object) to define the split face.
        Returns the newly created SplitFaceFeature object or null if the creation failed.
        """
        return SplitFaceFeature()

    def itemByName(self, name):
        """
        Function that returns the specified split face feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return SplitFaceFeature()

    count = property(_get_count, None, doc="The number of split face features in the collection.")


class SplitFaceSplitTypes:
    """
    List of the ways to split a face using the split face feature.
    """

    def __init__(self):
        pass

    surfaceIntersectionSplitType = 0
    alongVectorSplitType = 1
    closestPointSplitType = 2


class StitchFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a stitch feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return StitchFeatureInput()

    def _set_stitchSurfaces(self, stitchSurfaces):
        pass

    def _get_stitchSurfaces(self):
        return core.ObjectCollection()

    def _set_tolerance(self, tolerance):
        pass

    def _get_tolerance(self):
        return core.ValueInput()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return FeatureOperations()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    stitchSurfaces = property(_get_stitchSurfaces, _set_stitchSurfaces,
                              doc="Gets and sets the surfaces to stitch together.")
    tolerance = property(_get_tolerance, _set_tolerance,
                         doc="Gets and sets the ValueInput object that defines the stitching tolerance. It must define a length.")
    operation = property(_get_operation, _set_operation,
                         doc="Gets and sets the feature operation to perform. This property value is only valid if the isSolid property returns true. Otherwise the value of this property is ignored.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class StitchFeatures(core.Base):
    """
    Collection that provides access to all of the existing Stitch features in a component and supports the ability to create new Stitch features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return StitchFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified stitch feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return StitchFeature()

    def createInput(self, stitchSurfaces, tolerance, operation):
        """
        Creates a StitchFeatureInput object. Use properties and methods on this object to define the stitch feature you want to create and then use the Add method, passing in the StitchFeatureInput object.
        stitchSurfaces : The surfaces (open BRepBodies) to stitch together. Stitching surfaces can form multiple closed volumes resulting in multiple solids. Stitch Surfaces can form multiple BRepShells (entirely connected set of entities) that would result in a single non-solid BRepBody.
        tolerance : ValueInput object that defines the stitching tolerance. It must define a distance value.
        operation : Specifies the operation type for the result when the final result is a closed solid. Otherwise this argument is ignored.
        Returns the newly created StitchFeatureInput object or null if the creation failed.
        """
        return StitchFeatureInput()

    def add(self, input):
        """
        Creates a new stitch feature.
        input : A StitchFeatureInput object that defines the desired stitch feature. Use the createInput method to create a new StitchFeatureInput object and then use methods on it (the StitchFeatureInput object) to define the stitch feature.
        Returns the newly created StitchFeature object or null if the creation failed.
        """
        return StitchFeature()

    def itemByName(self, name):
        """
        Function that returns the specified stitch feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return StitchFeature()

    count = property(_get_count, None, doc="The number of Stitch features in the collection.")


class SurfaceContinuityTypes:
    """
    List of Surface Continuity Types.
    """

    def __init__(self):
        pass

    ConnectedSurfaceContinuityType = 0
    TangentSurfaceContinuityType = 1
    CurvatureSurfaceContinuityType = 2


class SurfaceDeleteFaceFeatures(core.Base):
    """
    Collection that provides access to all of the existing SurfaceDeleteFaceFeature features in a component and supports the ability to create new SurfaceDeleteFaceFeature features. The SurfaceDeleteFaceFeature and DeleteFaceFeature differ in that the SurfaceDeleteFaceFeature can delete any face without any restrictions. If the body is a solid, it will become a surface when the first face is deleted. The specified face is deleted without any other changes being made to the body. The DeleteFaceFeature deletes the specified face and also modifies the other faces in the body to heal or fill in the area of the deleted face. This means that a solid body will remain solid.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SurfaceDeleteFaceFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified SurfaceDeleteFaceFeature object using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SurfaceDeleteFaceFeature()

    def itemByName(self, name):
        """
        Function that returns the specified SurfaceDeleteFaceFeature object using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return SurfaceDeleteFaceFeature()

    def add(self, facesToDelete):
        """
        Creates a new SurfaceDeleteFaceFeature feature. This deletes the specified faces from their bodies without any attempt to heal the openings. This is equivalent to selecting and deleting faces when in the Patch workspace.
        facesToDelete : A single BRepFace or an ObjectCollection containing multiple BRepFace objects.
        Returns the newly created SurfaceDeleteFaceFeature object or null if the creation failed.
        """
        return SurfaceDeleteFaceFeature()

    count = property(_get_count, None, doc="The number of SurfaceDeleteFaceFeature objects in the collection.")


class SurfaceExtendTypes:
    """
    List of Surface Extend Types.
    """

    def __init__(self):
        pass

    NaturalSurfaceExtendType = 0
    TangentSurfaceExtendType = 1
    PerpendicularSurfaceExtendType = 2


class SurfaceProjectTypes:
    """
    Used by the Sketch.projectToSurface method when defined how to project a curve onto a surface.
    """

    def __init__(self):
        pass

    ClosestPointSurfaceProjectType = 0
    AlongVectorSurfaceProjectType = 1


class SweepFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a sweep feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SweepFeatureInput()

    def _set_profile(self, profile):
        pass

    def _get_profile(self):
        return core.Base()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return FeatureOperations()

    def _set_path(self, path):
        pass

    def _get_path(self):
        return Path()

    def _set_distanceOne(self, distanceOne):
        pass

    def _get_distanceOne(self):
        return core.ValueInput()

    def _set_distanceTwo(self, distanceTwo):
        pass

    def _get_distanceTwo(self):
        return core.ValueInput()

    def _set_orientation(self, orientation):
        pass

    def _get_orientation(self):
        return SweepOrientationTypes()

    def _set_creationOccurrence(self, creationOccurrence):
        pass

    def _get_creationOccurrence(self):
        return Occurrence()

    def _set_isSolid(self, isSolid):
        pass

    def _get_isSolid(self):
        return bool()

    def _set_guideRail(self, guideRail):
        pass

    def _get_guideRail(self):
        return Path()

    def _set_isDirectionFlipped(self, isDirectionFlipped):
        pass

    def _get_isDirectionFlipped(self):
        return bool()

    def _set_profileScaling(self, profileScaling):
        pass

    def _get_profileScaling(self):
        return SweepProfileScalingOptions()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    def _set_participantBodies(self, participantBodies):
        pass

    def _get_participantBodies(self):
        return BRepBody()

    def _set_taperAngle(self, taperAngle):
        pass

    def _get_taperAngle(self):
        return core.ValueInput()

    def _set_twistAngle(self, twistAngle):
        pass

    def _get_twistAngle(self):
        return core.ValueInput()

    profile = property(_get_profile, _set_profile,
                       doc="Gets and sets the profiles or planar faces used to define the shape of the sweep. This property can return or be set with a single Profile, a single planar face, or an ObjectCollection consisting of multiple profiles and planar faces. When an ObjectCollection is used all of the profiles and faces must be co-planar.")
    operation = property(_get_operation, _set_operation,
                         doc="Gets and sets the type of operation performed by the sweep.")
    path = property(_get_path, _set_path, doc="Gets and sets the path to create the sweep.")
    distanceOne = property(_get_distanceOne, _set_distanceOne,
                           doc="Gets and sets the distance for the first side. The distance is a value from 0 to 1 indicating the position along the path where 0 is at the start and 1 is at the end. The value is default to 1.0.")
    distanceTwo = property(_get_distanceTwo, _set_distanceTwo,
                           doc="Gets and sets the distance for the second side. The distance is a value from 0 to 1 indicating the position along the path where 0 is at the start and 1 is at the end. The value defaults to 0 in the case where the path is closed, otherwise it defaults to 1.0. It is ignored if the path is only on one side of the profile or if the sweep definition includes a guide rail. It's always the distance against the normal of the profile if available.")
    orientation = property(_get_orientation, _set_orientation,
                           doc="Gets and sets the sweep orientation. It defaults to PerpendicularOrientationType. This property is ignored when a guide rail has been specified.")
    creationOccurrence = property(_get_creationOccurrence, _set_creationOccurrence,
                                  doc="In order for geometry to be transformed correctly, an Occurrence for creation needs to be specified when the sweep is created based on geometry (e.g. a profile and/or face(s)) in another component AND (the sweep) is not in the root component. The CreationOccurrence is analogous to the active occurrence in the UI")
    isSolid = property(_get_isSolid, _set_isSolid,
                       doc="Specifies if the sweep should be created as a solid or surface. If it's a surface then there aren't any end caps and it's open. This is initialized to true so a solid will be created if it's not changed.")
    guideRail = property(_get_guideRail, _set_guideRail,
                         doc="Gets and sets the guide rail to create the sweep. This can be set to null to remove the guide rail definition and have a single path sweep feature.")
    isDirectionFlipped = property(_get_isDirectionFlipped, _set_isDirectionFlipped,
                                  doc="Gets and sets if the direction of the sweep is flipped. This property only applies to sweep features that include a guide rail and whose path runs on both sides of the profile.")
    profileScaling = property(_get_profileScaling, _set_profileScaling,
                              doc="Gets and sets the sweep profile scaling option. It defaults to SweepProfileScaleOption. This property is only used when a guide rail has been specified.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")
    participantBodies = property(_get_participantBodies, _set_participantBodies,
                                 doc="Gets and sets the list of bodies that will participate in the feature when the operation is a cut or intersection. If this property has not been set, the default behavior is that all bodies that are intersected by the feature will participate. This property can return null in the case where the feature has not been fully defined so that possible intersecting bodies can be computed.")
    taperAngle = property(_get_taperAngle, _set_taperAngle,
                          doc="Gets and sets the taper angle of the sweep. This property is initialized with a taper angle of zero. A negative angle will taper the sweep inward while a positive value will taper the sweep outward. This property is valid for both parametric and non-parametric extrusions.")
    twistAngle = property(_get_twistAngle, _set_twistAngle,
                          doc="Gets and sets the taper angle of the sweep. This property is initialized with a taper angle of zero. A negative angle will taper the sweep inward while a positive value will taper the sweep outward. This property is valid for both parametric and non-parametric extrusions.")


class SweepFeatures(core.Base):
    """
    Collection that provides access to all of the existing sweep features in a component and supports the ability to create new sweep features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SweepFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified sweep feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return SweepFeature()

    def createInput(self, profile, path, operation):
        """
        Creates a SweepFeatureInput object for defining a simple sweep feature with only a path and no guide rail. Use properties and methods on this object to define the sweep you want to create and then use the Add method, passing in the SweepFeatureInput object.
        profile : The profile argument can be a single Profile, a single planar face, or an ObjectCollection consisting of multiple profiles and planar faces. When an ObjectCollection is used all of the profiles and faces must be co-planar.
        path : The path to create the sweep.
        operation : The feature operation to perform
        Returns the newly created SweepFeatureInput object or null if the creation failed.
        """
        return SweepFeatureInput()

    def add(self, input):
        """
        Creates a new sweep feature.
        input : A SweepFeatureInput object that defines the desired sweep. Use the createInput method to create a new SweepFeatureInput object and then use methods on it (the SweepFeatureInput object) to define the sweep.
        Returns the newly created SweepFeature object or null if the creation failed.
        """
        return SweepFeature()

    def itemByName(self, name):
        """
        Function that returns the specified sweep feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return SweepFeature()

    count = property(_get_count, None, doc="The number of sweep features in the collection.")


class SweepOrientationTypes:
    """
    List of the types of sweep orientation.
    """

    def __init__(self):
        pass

    ParallelOrientationType = 0
    PerpendicularOrientationType = 1


class SweepProfileScalingOptions:
    """
    List of the sweep profile scaling options.
    """

    def __init__(self):
        pass

    SweepProfileScaleOption = 0
    SweepProfileStretchOption = 1
    SweepProfileNoScalingOption = 2


class TemporaryBRepManager(core.Base):
    """
    A utility object that provides functionality to create and manipulate B-Rep data outside the context of a document. The provides direct access to the modeling core without the overhead of parametrics, persistence, transactions, or graphics. It also provides a way of directly defining and creating B-Rep data.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TemporaryBRepManager()

    @staticmethod
    def get():
        """
        Gets the TempoaryBRepManager object. This object provides access to functionality to create an manipulate temporary B-Rep data outside the context of a document.
        Returns the TemporaryBRepManager object.
        """
        return TemporaryBRepManager()

    def copy(self, bRepEntity):
        """
        Creates a temporary copy of the input BRepBody, BRepFace, or BRepEdge object.
        bRepEntity : The BRepBody, BRepFace, BRepLoop, or BRepEdge to create a copy of. This can be a parametric B-Rep entity or a temporary B-Rep entity.
        Returns a BRepBody that contains the result. If a BRepBody is input the copy is of the entire body. If a BRepFace is input, then the result is a BRepBody that contains a single face. If a BRepLoop is input then the result is a BRepBody that contains a wire where each edge in the loop will have a corresponding edge in the wire. If a BRepEdge is input then the result is a BRepBody that contains a wire that contains the single edge.
        """
        return BRepBody()

    def planeIntersection(self, body, plane):
        """
        Calculates the intersection between the input body and plane and creates a wire body that represents the intersection curves.
        body : The BRepBody to intersection.
        plane : The geometry Plane to intersect with the body.
        Returns a BRepBody that contains a wire body that represents the intersection.
        """
        return BRepBody()

    def createRuledSurface(self, sectionOne, sectionTwo):
        """
        Creates a new body by creating a ruled surface between the two input wire bodies.
        sectionOne : BRepWire that defines the shape of the first section.
        sectionTwo : BRepWire that defines the shape of the second section.
        Returns the created ruled surface as a BRepBody object.
        """
        return BRepBody()

    def createSilhouetteCurves(self, face, viewDirection, returnCoincidentSilhouettes):
        """
        Calculates the silhouette curve geometry for a given face as viewed from a given direction.
        face : Input BRepFace object to calculate the silhouette curve for.
        viewDirection : Input Vector3D object that defines the view direction to calculate the silhouette curve relative to. The silhouette curve(s) will lie along the path where the face normal is perpendicular to the view direction.
        returnCoincidentSilhouettes : Input Boolean that specifies if silhouette curves that are coincident to the edges of the face should be returned or not. If true, these curves will be returned.
        Returns a SurfaceBody object that will contain one or more BRepWire objects that represent the silhouette curve(s). This method can return null in the case where there is not a silhouette curve for the specified face.
        """
        return BRepBody()

    def deleteFaces(self, faces, deleteSpecifiedFaces):
        """
        Deletes one or more faces from a temporary BRepBody. The body that will be modified is determined by getting the parent body of the input faces.
        faces : An array of BRepFace objects to delete. If more than one face is provided, all of the faces must exist within the same body.
        deleteSpecifiedFaces : This allows you to either delete the faces that were input or to keep those faces and delete all the other faces in the body.
        Returns true if the operation was successful.
        """
        return bool()

    def booleanOperation(self, targetBody, toolBody, booleanType):
        """
        Performs the specified Boolean operation between the two input bodies. The input bodies need not be solid but can be faces that are combined or trimmed.
        targetBody : The target body that will be modified as a result of the Boolean operation.
        toolBody : The tool body that will be used to operate on the target body.
        booleanType : The type of Boolean operation to perform.
        Returns true if the operation was successful. If successful, the target body is modified as a result of the Boolean operation. Because of this the targetBody must always be a temporary BRepBody. The toolbody is not modified. This is analogous to a machining operation where you have the target that is being machined and the tool that removes material.
        """
        return bool()

    def transform(self, body, transform):
        """
        Transforms the input body using the specified transformation matrix.
        body : The BRepBody object to transform.
        transform : The transformation matrix that defines the transform to apply to the body.
        Returns true if the specified transform was successfully applied to the body.
        """
        return bool()

    def createFromFile(self, filename):
        """
        Creates new BRepBody objects based on the contents of the specified file.
        filename : The full path and name of the file to read in. This can be a SMT, SMB, SAT, or SAB file.
        A BRepBodies collection object is returned which can contain multiple BRepBody objects. null is returned in the case where it was unable to read the file.
        """
        return BRepBodies()

    def exportToFile(self, bodies, filename):
        """
        Exports the input bodies to the specified file.
        bodies : An array of BRepBody objects that you want to export.
        filename : The filename to write the BRepBody objects to. The type of file to create is inferred from the extension of the file. The valid extensions are '.sat' and '.smt'.
        Returns true if the export was successful.
        """
        return bool()

    def createBox(self, box):
        """
        Creates a new temporary solid box BRepBody object.
        box : The OrientedBoundingBox3D object that defines the position, orientation, and size of the box to crate.
        Returns the newly created temporary BRepBody object or null in the case of failure.
        """
        return BRepBody()

    def createCylinderOrCone(self, pointOne, pointOneRadius, pointTwo, pointTwoRadius):
        """
        Creates a temporary solid cylinder or cone BRepBody object.
        pointOne : A point at one end of the cylinder or cone.
        pointOneRadius : The radius of the cylinder or cone at the point one end, in centimeters.
        pointTwo : A point at the opposite end of the cylinder or cone.
        pointTwoRadius : The radius of the cylinder or cone at the point two end, in centimeters. For a cylinder the pointTwoRadius should be equal to the pointOneRadius.
        Returns the newly created temporary BRepBody object or null in the case of failure.
        """
        return BRepBody()

    def createEllipticalCylinderOrCone(self, pointOne, pointOneMajorRadius, pointOneMinorRadius, pointTwo,
                                       pointTwoMajorRadius, majorAxisDirection):
        """
        Creates a temporary elliptical solid cylinder or cone BrepBody object.
        pointOne : A point at one end of the cylinder or cone.
        pointOneMajorRadius : The major radius of the cylinder or cone at the point one end, in centimeters.
        pointOneMinorRadius : The minor radius of the cylinder or cone at the point one end, in centimeters.
        pointTwo : A point at the opposite end of the cone.
        pointTwoMajorRadius : The major radius of the cylinder or cone at the point two end, in centimeters. The minor radius is automatically determined using the point one ratio of the minor and major radii.
        majorAxisDirection : A Vector3D object that defines the direction of the major axis.
        Returns the newly created temporary BRepBody object or null in the case of failure.
        """
        return BRepBody()

    def createSphere(self, center, radius):
        """
        Creates a temporary spherical BRepBody object.
        center : The center point of the sphere.
        radius : The radius of the sphere in centimeters.
        Returns the newly created temporary BRepBody object or null in the case of failure.
        """
        return BRepBody()

    def createTorus(self, center, axis, majorRadius, minorRadius):
        """
        Creates a temporary torioidal BRepBody object.
        center : The center point of the torus.
        axis : The axis of the torus.
        majorRadius : The radius, in centimeters, of the major radius of the torus. If the torus was created by sweeping a circle around another cirlce this would be the radius of the path circle.
        minorRadius : The radius, in centimeters, of the minor radius of the torus. If the torus was created by sweeping a circle around another cirlce this would be the radius of the profile circle.
        Returns the newly created temporary BRepBody object or null in the case of failure.
        """
        return BRepBody()

    def createFaceFromPlanarWires(self, wireBodies):
        """
        Creates a body from multiple wires that all lie within the same plane. Multiple wires are used when creating a plane with interior holes. One wire defines the outer shape and the other wires define the interior loops of the created face.
        wireBodies : An array of bodies that contiain planar wires. Each wire must be closed, they should not overlap, and they should all lie on the same plane.
        Returns a BRepBody containing the created BRepFace object or null in the case of failure.
        """
        return BRepBody()

    def imprintOverlapBodies(self, bodyOne, bodyTwo, imprintCoincidentEdges, tolerance):
        """
        <p>Method that finds regions of faces on two bodies which overlap and creates new bodies where the faces are split at the edges of the overlaps. This does not modify the original bodies but creates new temporary bodies that contain the imprints.</p> <p>The picture below shows an example of imprinting. The picture on the left shows the initial two bodies that are positioned so there are coincident faces. The picture on the right shows the two bodies individually so you can see the result of the imprint and how the coincident faces were split. </p> <br/><br/><center><img src='../Images/ImprintBodies.png'></center><br/> <p>The ability to imprint solids can be important to applications that need to mesh models. By creating edges at the poins where solids connect, it guarantees that there will be mesh nodes along those boundaries.</p>
        bodyOne : Input BRepBody that will participate in the imprint operation. This body can be either a parametric or temporary body.
        bodyTwo : Input BRepBody that will participate in the imprint operation. This body can be either a parametric or temporary body.
        imprintCoincidentEdges : <p>Input Boolean that indicates if overlapping edges should be included in the result. The picture below shows an example of when this argument will make a difference. The two bodies have overlapping faces and there is also an overlapping edge. If this argument is true, then the edge shown in red below will be included in the output as an overlapping edge. If False it will not be included and only the edges of the overlapping faces will be in the overlapping faces collections.</p> <br/><br/><center><img src='../Images/ImprintOverlappingEdges.png'></center>
        resultBodyOne : Output temporary BRepBody that contains the imprinted body that corresponds to the body provided through the bodyOne argument.
        resultBodyTwo : Output temporary BRepBody that contains the imprinted body that corresponds to the body provided through the bodyTwo argument.
        bodyOneOverlappingFaces : Output array of BRepFace objects that represent the overlapping faces that are part of resultBodyOne. Faces at the same index within the collection returned here and that returned by the bodyTwoOverlappingFaces are overlapping.
        bodyTwoOverlappingFaces : Output array of BRepFace objects that represent the overlapping faces that are part of resultBodyTwo. Faces at the same index within the collection returned here and that returned by the bodyOneOverlappingFaces are overlapping.
        bodyOneOverlappingEdges : Output array of BRepEdge objects that represent the overlapping edges that are part of resultBodyOne. Edges at the same index within the collection returned here and that returned by the bodyTwoOverlappingEdges are overlapping.
        bodyTwoOverlappingEdges : Output array of BRepEdge objects that represent the overlapping edges that are part of resultBodyTwo. Edges at the same index within the collection returned here and that returned by the bodyOneOverlappingEdges are overlapping.
        tolerance : Optional Input double that specifies the tolerance, in centimeters, to use when comparing the bodies. If not specified, or a value of zero is specified, the internal modeling tolerance will be used.
        Returns true if the imprint calculation was successful.
        """
        return bool(), BRepBody(), BRepBody(), BRepFace(), BRepFace(), BRepEdge(), BRepEdge()

    def createWireFromCurves(self, curves, allowSelfIntersections):
        """
        Give an array of curve geometry objects, this method creates a new wire body.
        curves : An array containing the input Curve3D objects. These can be Arc3D, Circle3D, Ellipse3D, EllipticalArc3D or Line3D objects.
        edgeMap : An array of edges in the returned body. The order that the edges are in this collection is the same order as the original corresponding Curve3D object is in the input curves array. This allows you to map between the original input curve and created edge.
        allowSelfIntersections : Specifies if you want to allow self-intersection in the input curves or not.
        Returns the B-Rep body containing the created wire or null in the case of failure.
        """
        return BRepBody(), BRepEdge()

    def createHelixWire(self, axisPoint, axisVector, startPoint, pitch, turns, taperAngle):
        """
        Creates a B-Rep body that contains a wire with a single edge that represents a helical curve.
        axisPoint : A Point3D object that defines a point along the axis of the helix.
        axisVector : A Vector3D object that defines the direction of the axis of the hellix.
        startPoint : A Point3D that defines the start point of the helix. This is a point on the helix and defines the starting point of the helix. The distance of this point to the axis defines the starting radius of the helix.
        pitch : The pitch of the helix, or the distance between each of the turns, in centimeters.
        turns : The number of turns of the helix.
        taperAngle : The taper angle of the helix in radians.
        """
        return BRepBody()


class TextStyles:
    """
    Defines the various text style formatting options that can be applied to text. These are bitwise values to they can be combined.
    """

    def __init__(self):
        pass

    TextStyleBold = 0
    TextStyleItalic = 1
    TextStyleUnderline = 2


class TextureImage(core.Base):
    """
    Provides access to the image data associated with a texture map.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TextureImage()

    def _get_transform(self):
        return core.Matrix2D()

    transform = property(_get_transform, None, doc="The transform of the texture image in parametric space.")


class ThickenFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a Thicken feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ThickenFeatureInput()

    def _set_inputFaces(self, inputFaces):
        pass

    def _get_inputFaces(self):
        return core.ObjectCollection()

    def _set_thickness(self, thickness):
        pass

    def _get_thickness(self):
        return core.ValueInput()

    def _set_isSymmetric(self, isSymmetric):
        pass

    def _get_isSymmetric(self):
        return bool()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return FeatureOperations()

    def _set_isChainSelection(self, isChainSelection):
        pass

    def _get_isChainSelection(self):
        return bool()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    inputFaces = property(_get_inputFaces, _set_inputFaces,
                          doc="An ObjectCollection containing the face and/or patch bodies to thicken.")
    thickness = property(_get_thickness, _set_thickness,
                         doc="Gets and sets the ValueInput object that defines the thickness distance.")
    isSymmetric = property(_get_isSymmetric, _set_isSymmetric,
                           doc="Gets and sets whether to add thickness symetrically or only on one side of the face/s to thicken")
    operation = property(_get_operation, _set_operation, doc="Gets and sets the feature operation to perform.")
    isChainSelection = property(_get_isChainSelection, _set_isChainSelection,
                                doc="Get and sets whether faces that are tangentially connected to the input faces will be included in the thicken feature.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class ThickenFeatures(core.Base):
    """
    Collection that provides access to all of the existing Thicken features in a component and supports the ability to create new Thicken features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ThickenFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified Thicken feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return ThickenFeature()

    def createInput(self, inputFaces, thickness, isSymmetric, operation, isChainSelection):
        """
        Creates a ThickenFeatureInput object. Use properties and methods on this object to define the Thicken feature you want to create and then use the Add method, passing in the ThickenFeatureInput object to create the feature.
        inputFaces : The faces or patch bodies to thicken. Faces need not be from the same component or body, nor do they need to be connected or touching one another.
        thickness : ValueInput object that defines the thickness.
        isSymmetric : A boolean value for setting whether to add thickness symetrically or only on one side of the face/s to thicken
        operation : The feature operation to perform.
        isChainSelection : A boolean value for setting whether or not faces that are tangentially connected to the input faces (if any) will be included in the thicken. The default value is true.
        Returns the newly created ThickenFeatureInput object or null if the creation failed.
        """
        return ThickenFeatureInput()

    def add(self, input):
        """
        Creates a new Thicken feature.
        input : A FeatureInput object that defines the desired Thicken feature. Use the createInput method to create a new ThickenFeatureInput object and then use methods on it (the ThickenFeatureInput object) to define the Thicken feature.
        Returns the newly created ThickenFeature object or null if the creation failed.
        """
        return ThickenFeature()

    def itemByName(self, name):
        """
        Function that returns the specified thicken feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return ThickenFeature()

    count = property(_get_count, None, doc="The number of Thicken features in the collection.")


class ThreadDataQuery(core.Base):
    """
    This object provides methods to query the thread data contained in the XML files under ThreadData folder.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ThreadDataQuery()

    def _get_allThreadTypes(self):
        return str()

    def _get_defaultInchThreadType(self):
        return str()

    def _get_defaultMetricThreadType(self):
        return str()

    def allSizes(self, threadType):
        """
        Method that returns all the available thread sizes for a given thread type.
        threadType : Specify the thread type.
        Returns the specified thread sizes or empty array if an invalid thread type was specified.
        """
        return str()

    def allDesignations(self, threadType, size):
        """
        Method that returns all the available thread designations for a thread type of a given size.
        threadType : Specify the thread type.
        size : Specify the thread size.
        Returns the specified thread designations or empty array if an invalid thread type or size was specified.
        """
        return str()

    def allClasses(self, isInternal, threadType, designation):
        """
        Method that returns all the available classes for a thread type of a given thread designation.
        isInternal : Indicates if the thread is an internal or external thread.
        threadType : Specify the thread type.
        designation : Specify the thread designation.
        Returns the specified thread classes or empty array if an invalid thread type or designation was specified.
        """
        return str()

    def threadTypeCustomName(self, threadType):
        """
        Method that returns the custom name for a given thread type.
        threadType : Thread type identifier string.
        Returns the specified custom name or empty string if an invalid thread type was specified.
        """
        return str()

    def threadTypeUnit(self, threadType):
        """
        Method that returns the unit for a given thread type.
        threadType : Specify the thread type.
        Returns the specified unit or empty string if an invalid thread type was specified.
        """
        return str()

    def recommendThreadData(self, modelDiameter, isInternal, threadType):
        """
        Method that gets the recommended thread data for a given model diameter.
        modelDiameter : The model diameter. The unit is centimeter.
        isInternal : Indicates if the thread is an internal or external thread.
        threadType : Specifies the thread type to query the thread data.
        designation : The output thread designation.
        threadClass : The output thread class.
        Returns true if successful.
        """
        return bool(), str(), str()

    allThreadTypes = property(_get_allThreadTypes, None, doc="Gets all the available thread types (families).")
    defaultInchThreadType = property(_get_defaultInchThreadType, None, doc="Gets the default inch thread type.")
    defaultMetricThreadType = property(_get_defaultMetricThreadType, None, doc="Gets the default metric thread type.")


class ThreadFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a thread feature.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ThreadFeatureInput()

    def _set_inputCylindricalFace(self, inputCylindricalFace):
        pass

    def _get_inputCylindricalFace(self):
        return BRepFace()

    def _set_isModeled(self, isModeled):
        pass

    def _get_isModeled(self):
        return bool()

    def _set_isFullLength(self, isFullLength):
        pass

    def _get_isFullLength(self):
        return bool()

    def _set_threadLength(self, threadLength):
        pass

    def _get_threadLength(self):
        return core.ValueInput()

    def _set_threadOffset(self, threadOffset):
        pass

    def _get_threadOffset(self):
        return core.ValueInput()

    def _set_threadLocation(self, threadLocation):
        pass

    def _get_threadLocation(self):
        return ThreadLocations()

    def _set_threadInfo(self, threadInfo):
        pass

    def _get_threadInfo(self):
        return ThreadInfo()

    def _set_isRightHanded(self, isRightHanded):
        pass

    def _get_isRightHanded(self):
        return bool()

    def _set_inputCylindricalFaces(self, inputCylindricalFaces):
        pass

    def _get_inputCylindricalFaces(self):
        return core.ObjectCollection()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    inputCylindricalFace = property(_get_inputCylindricalFace, _set_inputCylindricalFace,
                                    doc="Gets and sets the threaded face. In the case where there are multiple faces, only the first one is returned. Setting this results in a thread being applied to only a single face. It is recommended that you use the inputCylindricalfaces property in order to have full access to the collection of faces to be threaded.")
    isModeled = property(_get_isModeled, _set_isModeled,
                         doc="Gets and sets if the thread is physical or cosmetic thread. A value of true indicates a physical thread. It defaults to false.")
    isFullLength = property(_get_isFullLength, _set_isFullLength,
                            doc="Gets and sets if this thread is the full length of the cylinder. It defaults to true.")
    threadLength = property(_get_threadLength, _set_threadLength,
                            doc="Gets and sets the thread length. It is only used in the case where the isFullLength property is false.")
    threadOffset = property(_get_threadOffset, _set_threadOffset,
                            doc="Gets and sets the thread offset. The offset is the distance along the axis of the cylinder from the edge to the start of the thread. It is only used in the case where the isFullLength property is false. Returns nothing in the case where the feature is non-parametric.")
    threadLocation = property(_get_threadLocation, _set_threadLocation,
                              doc="Gets and sets where the thread length is measured from. This property is only used in the case where the isFullLength property is false.")
    threadInfo = property(_get_threadInfo, _set_threadInfo, doc="Gets and sets the thread data.")
    isRightHanded = property(_get_isRightHanded, _set_isRightHanded,
                             doc="Gets and sets if the thread is right or left-handed thread. A value of true indicates a right-handed thread. It defaults to true.")
    inputCylindricalFaces = property(_get_inputCylindricalFaces, _set_inputCylindricalFaces,
                                     doc="Gets and sets the cylindrical input faces.")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class ThreadFeatures(core.Base):
    """
    Collection that provides access to all of the existing thread features in a component and supports the ability to create new thread features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ThreadFeatures()

    def _get_count(self):
        return int()

    def _get_threadDataQuery(self):
        return ThreadDataQuery()

    def item(self, index):
        """
        Function that returns the specified thread feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return ThreadFeature()

    def createInput(self, inputCylindricalFaces, threadInfo):
        """
        Creates a ThreadFeatureInput object. Use properties and methods on this object to define the thread you want to create and then use the Add method, passing in the ThreadFeatureInput object.
        inputCylindricalFaces : A single cylindrical BRep face or a collection of cylindrical BRep faces to thread. A collection of faces must all be from either holes (for internal threading) or all from cylinders (for external threading). Both internal and external threads cannot be created in the same feature. The faces in a collection can come from different bodies or components.
        threadInfo : The thread data to create the thread.
        Returns the newly created ThreadFeatureInput object or null if the creation failed.
        """
        return ThreadFeatureInput()

    def createThreadInfo(self, isInternal, threadType, threadDesignation, threadClass):
        """
        Method that creates a new ThreadInfo object that can be used in creating thread features.
        isInternal : Input Boolean that indicates if the thread is an internal or external thread. A value of true indicates an internal thread.
        threadType : Input string that defines the thread type.
        threadDesignation : Input string that contains the thread designation. This is input as the full thread designation that will be used in a drawing for the thread callout. The nominal size and pitch information are extracted from the designation.
        threadClass : Input string that defines the thread class.
        Returns the newly created ThreadInfo object or null if the creation failed.
        """
        return ThreadInfo()

    def add(self, input):
        """
        Creates a new thread feature.
        input : A ThreadFeatureInput object that defines the desired thread. Use the createInput method to create a new ThreadFeatureInput object and then use methods on it (the ThreadFeatureInput object) to define the thread.
        Returns the newly created ThreadFeature object or null if the creation failed.
        """
        return ThreadFeature()

    def itemByName(self, name):
        """
        Function that returns the specified thread feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return ThreadFeature()

    count = property(_get_count, None, doc="The number of thread features in the collection.")
    threadDataQuery = property(_get_threadDataQuery, None,
                               doc="Property that returns the ThreadDataQuery object. This object has methods to query the thread data contained in the XML files under ThreadData folder. It's a singleton object.")


class ThreadInfo(core.Base):
    """
    This class defines the methods and properties that pertain to the thread data of a thread feature. If the ThreadInfo object is returned from a thread feature, setting this ThreadInfo will cause the thread feature to be edited.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ThreadInfo()

    def _set_threadType(self, threadType):
        pass

    def _get_threadType(self):
        return str()

    def _get_threadSize(self):
        return str()

    def _set_threadDesignation(self, threadDesignation):
        pass

    def _get_threadDesignation(self):
        return str()

    def _set_threadClass(self, threadClass):
        pass

    def _get_threadClass(self):
        return str()

    def _set_isInternal(self, isInternal):
        pass

    def _get_isInternal(self):
        return bool()

    def _get_threadAngle(self):
        return float()

    def _get_threadPitch(self):
        return float()

    def _get_majorDiameter(self):
        return float()

    def _get_minorDiameter(self):
        return float()

    def _get_pitchDiameter(self):
        return float()

    threadType = property(_get_threadType, _set_threadType,
                          doc="Gets and sets the string that defines the thread type.")
    threadSize = property(_get_threadSize, None, doc="Gets the string that defines the thread size.")
    threadDesignation = property(_get_threadDesignation, _set_threadDesignation,
                                 doc="Gets and sets the string that defines the thread designation.")
    threadClass = property(_get_threadClass, _set_threadClass,
                           doc="Gets and sets the string that defines the thread class.")
    isInternal = property(_get_isInternal, _set_isInternal,
                          doc="Gets and sets if the thread is an internal or external thread. A value of true indicates an internal thread. It defaults to true.")
    threadAngle = property(_get_threadAngle, None, doc="Gets the value that defines the thread angle.")
    threadPitch = property(_get_threadPitch, None, doc="Gets the value that defines the thread pitch.")
    majorDiameter = property(_get_majorDiameter, None, doc="Gets the value that defines the major diameter.")
    minorDiameter = property(_get_minorDiameter, None, doc="Gets the value that defines the minor diameter.")
    pitchDiameter = property(_get_pitchDiameter, None, doc="Gets the value that defines the pitch diameter.")


class ThreadLocations:
    """
    List of the types of thread location.
    """

    def __init__(self):
        pass

    HighEndThreadLocation = 0
    LowEndThreadLocation = 1


class Timeline(core.Base):
    """
    A collection of TimelineObjects in a parametric design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return Timeline()

    def _set_markerPosition(self, markerPosition):
        pass

    def _get_markerPosition(self):
        return int()

    def _get_count(self):
        return int()

    def _get_timelineGroups(self):
        return TimelineGroups()

    def moveToBeginning(self):
        """
        Moves the marker to the beginning of the timeline.
        Returns true if the move is successful
        """
        return bool()

    def moveToEnd(self):
        """
        Moves the marker to the end of the timeline.
        Returns true if the move is successful
        """
        return bool()

    def movetoNextStep(self):
        """
        Moves the marker to the next step in the timeline.
        Returns true if the move is successful
        """
        return bool()

    def moveToPreviousStep(self):
        """
        Moves the marker to the previous step in the timeline.
        Returns true if the move is successful
        """
        return bool()

    def play(self):
        """
        Plays the timeline beginning at the current position of the marker.
        Returns true if playing the timeline was successful
        """
        return bool()

    def item(self, index):
        """
        Function that returns the specified item in the timeline using an index into the collection. The items are returned in the order they appear in the timeline.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return TimelineObject()

    def deleteAllAfterMarker(self):
        """
        Deletes all objects in the timeline that are after the current position of the marker.
        Returns true if successful.
        """
        return bool()

    markerPosition = property(_get_markerPosition, _set_markerPosition,
                              doc="Gets and sets the current position of the marker where 0 is at the beginning of the timeline and the value of Timeline.count is the end of the timeline.")
    count = property(_get_count, None, doc="Returns the number of items in the collection.")
    timelineGroups = property(_get_timelineGroups, None, doc="Returns the collection of groups within the timeline.")


class TimelineGroups(core.Base):
    """
    Provides access to the time line groups within a design and provides methods to create new groups.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TimelineGroups()

    def _get_count(self):
        return int()

    def add(self, startIndex, endIndex):
        """
        Creates a new group within the timeline. The sequential set of items defined by the start and end indices will be included in the group. A group cannot contains another group so none of the items being grouped can be a group of this will fail.
        startIndex : The index of the first item in the timeline that will be added to the group.
        endIndex : The index of the last item in the timeline that will be added to the group.
        Returns the created TimelineGroup object or null in the case of failure.
        """
        return TimelineGroup()

    def item(self, index):
        """
        Function that returns the specified timeline group using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return TimelineGroup()

    count = property(_get_count, None, doc="Returns the number of items in the collection.")


class TimelineObject(core.Base):
    """
    Represents an object in the timeline.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TimelineObject()

    def _set_isSuppressed(self, isSuppressed):
        pass

    def _get_isSuppressed(self):
        return bool()

    def _get_parentGroup(self):
        return TimelineGroup()

    def _get_index(self):
        return int()

    def _get_isRolledBack(self):
        return bool()

    def _get_entity(self):
        return core.Base()

    def _get_isGroup(self):
        return bool()

    def _set_name(self, name):
        pass

    def _get_name(self):
        return str()

    def _get_healthState(self):
        return FeatureHealthStates()

    def _get_errorOrWarningMessage(self):
        return str()

    def rollTo(self, rollBefore):
        """
        Rolls the timeline by repositioning the marker to either before or after this object. This method will fail if this is a timelineGroup object and the group is expanded.
        rollBefore : Set rollBefore to true to reposition the marker before this object or to false to reposition the marker after this object
        Returns true if the move was successful
        """
        return bool()

    def canReorder(self, beforeIndex):
        """
        Checks to see if this object can be reordered to the specified position. The default value of -1 indicates the end of the timeline. This method will fail if this is a timelineGroup object and the group is expanded.
        beforeIndex : The index number of the position in the timeline to check
        Returns true if the object can be reordered to the specified position
        """
        return bool()

    def reorder(self, beforeIndex):
        """
        Reorders this object to the position specified. The default value of -1 indicates the end of the timeline.
        beforeIndex : The index number of the position in the timeline to place this object before
        Returns true if the reorder operation was successful This method will fail and return false if this is a timelineGroup object and the group is expanded.
        """
        return bool()

    isSuppressed = property(_get_isSuppressed, _set_isSuppressed, doc="Gets and sets if this object is suppressed.")
    parentGroup = property(_get_parentGroup, None,
                           doc="Returns the parent group, if this object is part of a group. Returns null if this object is not part of a group.")
    index = property(_get_index, None,
                     doc="Returns the position of this item within the timeline where the first item has an index of 0. This property can return -1 in the two cases where this object is not currently represented in the timeline. The two cases are: 1. When this is a TimelineGroup object and the group is expanded. 2. When this object is part of a group and the group is collapsed.")
    isRolledBack = property(_get_isRolledBack, None,
                            doc="Indicates if this item is currently not being computed because it has been rolled back. If this is a timelineGroup object and the group is expanded the value of this property should be ignored.")
    entity = property(_get_entity, None,
                      doc="Returns the entity associated with this timeline object. Edit operations can be performed by getting the object representing the associated entity and using the methods and properties on that entity to make changes. Returns null if this is a TimelineGroup object")
    isGroup = property(_get_isGroup, None,
                       doc="Indicates if this TimelineObject represents a group. If True you can operate on this object as a TimelineGroup object.")
    name = property(_get_name, _set_name,
                    doc="Gets and sets the name of this timeline object. This name is shared by the object the timeline object represents. For example, if the TimelineObject represents a Sketch and you change the name using the TimelineObject, the name of the sketch in the browser is also changed. The reverse is also true. Setting the name of an object; sketch, feature construction geometry, etc, will also change the name of the associated node in the timeline.")
    healthState = property(_get_healthState, None,
                           doc="Returns the current health state of the object associated with this TimelineObject.")
    errorOrWarningMessage = property(_get_errorOrWarningMessage, None,
                                     doc="Returns the error or warning message in the case where the healthState property returns either WarningFeatureHealthState or ErrorFeatureHealthState. Otherwise this property returns an empty string.")


class TorusFeatures(core.Base):
    """
    Collection that provides access to all of the existing torus features in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TorusFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified torus feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return TorusFeature()

    def itemByName(self, name):
        """
        Function that returns the specified torus feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return TorusFeature()

    count = property(_get_count, None, doc="The number of torus features in the collection.")


class TriangleMesh(core.Base):
    """
    The TriangleMesh object represents all of the data defining a triangular mesh.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TriangleMesh()

    def _get_nodeCount(self):
        return int()

    def _get_nodeCoordinatesAsDouble(self):
        return float()

    def _get_nodeCoordinatesAsFloat(self):
        return float

    def _get_nodeCoordinates(self):
        return core.Point3D()

    def _get_triangleCount(self):
        return int()

    def _get_normalVectorsAsDouble(self):
        return float()

    def _get_normalVectorsAsFloat(self):
        return float

    def _get_normalVectors(self):
        return core.Vector3D()

    def _get_nodeIndices(self):
        return int()

    def _get_hasTexture(self):
        return bool()

    def _get_textureCoordinatesAsDouble(self):
        return float()

    def _get_textureCoordinatesAsFloat(self):
        return float

    def _get_textureCoordinates(self):
        return core.Point2D()

    def _get_textureImage(self):
        return TextureImage()

    def _get_surfaceTolerance(self):
        return float()

    nodeCount = property(_get_nodeCount, None, doc="Returns the total number of nodes in the mesh.")
    nodeCoordinatesAsDouble = property(_get_nodeCoordinatesAsDouble, None,
                                       doc="Returns the node coordinates as an array of doubles where they are the x, y, z components of each coordinate.")
    nodeCoordinatesAsFloat = property(_get_nodeCoordinatesAsFloat, None,
                                      doc="Returns the node coordinates as an array of floats where they are the x, y, z components of each coordinate.")
    nodeCoordinates = property(_get_nodeCoordinates, None,
                               doc="Returns the node coordinates as an array of Point3D objects.")
    triangleCount = property(_get_triangleCount, None, doc="Returns the number of triangles in the mesh.")
    normalVectorsAsDouble = property(_get_normalVectorsAsDouble, None,
                                     doc="Returns the normal vectors of the mesh where there is a normal vector at each node. The normals are returned as an array of doubles where they are the x, y, z components of each vector.")
    normalVectorsAsFloat = property(_get_normalVectorsAsFloat, None,
                                    doc="Returns the normal vectors of the mesh where there is a normal vector at each node. The normals are returned as an array of floats where they are the x, y, z components of each vector.")
    normalVectors = property(_get_normalVectors, None,
                             doc="Returns the normal vectors of the mesh where there is a normal vector at each node. The normals are returned as an array of Vector3D objects.")
    nodeIndices = property(_get_nodeIndices, None,
                           doc="Returns an array of indices that define which nodes are used for each triangle. This is used to look-up the coordinates in the NodeCoordinates array to get the three coordinates of each triangle.")
    hasTexture = property(_get_hasTexture, None,
                          doc="Indicates if the associated face has an image based texture. This can only return true when this TriangleMesh object was obtained from a BRepFace object. If false, the TextureCoordinates and TextureMap properties should be ignored. A texture is returned by a face when an appearance has been applied that has an associated image based texture.")
    textureCoordinatesAsDouble = property(_get_textureCoordinatesAsDouble, None,
                                          doc="Returns the texture coordinates used when mapping a texture to this face. The coordinates are returned as an array of doubles where they are the u and v components of each coordinate as defined in parametric space. There is a texture coordinate for each vertex in the face mesh.")
    textureCoordinatesAsFloat = property(_get_textureCoordinatesAsFloat, None,
                                         doc="Returns the texture coordinates used when mapping a texture to this face. The coordinates are returned as an array of floats where they are the u and v components of each coordinate as defined in parametric space. There is a texture coordinate for each vertex in the face mesh.")
    textureCoordinates = property(_get_textureCoordinates, None,
                                  doc="Returns the texture coordinates used when mapping a texture to this face. The coordinates are returned as an array of Point2D objects where the x and y properties of the point are u and v coordinates as defined in parametric space. There is a texture coordinate for each vertex in the face mesh.")
    textureImage = property(_get_textureImage, None, doc="Returns the texture image associated with the texture.")
    surfaceTolerance = property(_get_surfaceTolerance, None,
                                doc="Returns the surface tolerance that was used to generate this mesh. This is most useful when using display meshes that have already been calculated.")


class TriangleMeshCalculator(core.Base):
    """
    Used to calculate new meshes for a B-Rep or T-Spline using defined criteria.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TriangleMeshCalculator()

    def _set_surfaceTolerance(self, surfaceTolerance):
        pass

    def _get_surfaceTolerance(self):
        return float()

    def _set_maxSideLength(self, maxSideLength):
        pass

    def _get_maxSideLength(self):
        return float()

    def _set_maxAspectRatio(self, maxAspectRatio):
        pass

    def _get_maxAspectRatio(self):
        return float()

    def _set_maxNormalDeviation(self, maxNormalDeviation):
        pass

    def _get_maxNormalDeviation(self):
        return float()

    def _get_parentMeshManager(self):
        return MeshManager()

    def setQuality(self, triangleMeshQuality):
        """
        This is a simplified way to set the various settings that control the resulting mesh. When used it automatically adjusts all of the property values appropriately. It does this for the given geometry by computing its bounding box diameter. Then the surface tolerance is calculated as shown below where the meshLOD is the 'Level of Detail' and is described in more detail below. The diameter is the bounding box diameter. double nodeApproximateSize = std::pow(2.0, meshLOD); double fracTol = 1.0 / nodeApproximateSize; surfaceTolerance = fracTol * diameter;
        triangleMeshQuality : The mesh quality is specified by using an item from the enum list where the following items result in a corresponding mesh LOD that's used in the equation above. LowQualityTriangleMesh: 8 NormalQualityTriangleMesh: 11 HighQualityTriangleMesh: 13 VeryHighQualityTriangleMesh: 15
        Returns true if setting the quality was successful.
        """
        return bool()

    def calculate(self):
        """
        Calculates a new triangle mesh based on the current settings.
        Returns the new TriangleMesh object or null in the case where the calculation failed.
        """
        return TriangleMesh()

    surfaceTolerance = property(_get_surfaceTolerance, _set_surfaceTolerance,
                                doc="Specifies the maximum distance that the mesh can deviate from the smooth surface. The value is in centimeters. Smaller values can result in a much greater number of facets being returned and will require more processing time to calculate.")
    maxSideLength = property(_get_maxSideLength, _set_maxSideLength,
                             doc="Specifies the maximum side of any triangle in the mesh. A value of 0 (the default) indicates that no maximum length is specified. The value is specified in centimeters.")
    maxAspectRatio = property(_get_maxAspectRatio, _set_maxAspectRatio,
                              doc="Specifies the maximum length to height ratio that a triangle can have. This helps to avoid long skinny triangles. A value of 0 (the default) indicates that no maximum aspect ratio is specified.")
    maxNormalDeviation = property(_get_maxNormalDeviation, _set_maxNormalDeviation,
                                  doc="Specifies the maximum deviation between adjacent vertex normals. This value is the maximum angle allowed between normals and is specified in radians. A value of 0 (the default) indicates that no normal deviation is specified.")
    parentMeshManager = property(_get_parentMeshManager, None, doc="Returns the parent MeshManager object.")


class TriangleMeshList(core.Base):
    """
    Provides access to a set of triangle meshes.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TriangleMeshList()

    def _get_bestMesh(self):
        return TriangleMesh()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Returns the specified triangle meshes.
        index : The index of the mesh to return where the first item has an index of 0.
        Returns the specified mesh or null in the case of invalid index.
        """
        return TriangleMesh()

    bestMesh = property(_get_bestMesh, None,
                        doc="Returns the mesh with the tightest surface tolerance. This can return null in the case the list is empty, ie. Count is 0.")
    count = property(_get_count, None, doc="Returns the number of meshes in the collection.")


class TriangleMeshQualityOptions:
    """
    Types that indicate the level of quality of a triangle mesh.
    """

    def __init__(self):
        pass

    LowQualityTriangleMesh = 0
    NormalQualityTriangleMesh = 1
    HighQualityTriangleMesh = 2
    VeryHighQualityTriangleMesh = 3


class TrimFeatureInput(core.Base):
    """
    This class defines the methods and properties that pertain to the definition of a TrimFeatureInput.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TrimFeatureInput()

    def _get_bRepCells(self):
        return BRepCells()

    def _set_trimTool(self, trimTool):
        pass

    def _get_trimTool(self):
        return core.Base()

    def _set_targetBaseFeature(self, targetBaseFeature):
        pass

    def _get_targetBaseFeature(self):
        return BaseFeature()

    def cancel(self):
        """
        To determine the possible boundaries and allow you to choose which cells to keep, the trim
        feature does a partial compute when the input object is created. To do this it starts a trim
        feature transaction and completes the transaction when you call the add method. If you don't
        call the add method it leaves Fusion 360 in a bad state and there will be undo problems and it
        will possibly crash. If you have created a TrimFeatureInput object and don't want to finish
        the feature creation, you need to call the cancel method on the TrimFeatureInput object to
        safely abort the current trim feature transaction.
        """
        return bool()

    bRepCells = property(_get_bRepCells, None,
                         doc="Returns the collection of the valid cells that have been calculated based on the trim tool. Use this collection to specify which cells to trim away.")
    trimTool = property(_get_trimTool, _set_trimTool,
                        doc="Gets and sets the entity (a patch body, B-Rep face, construction plane or sketch curve) that intersects the trim tool")
    targetBaseFeature = property(_get_targetBaseFeature, _set_targetBaseFeature,
                                 doc="When creating a feature that is owned by a base feature, set this property to the base feature you want to associate the new feature with. By default, this is null, meaning it will not be associated with a base feature. Because of a current limitation, if you want to create a feature associated with a base feature, you must set this property AND call the startEdit method of the base feature, create the feature, and then call the finishEdit method of the base feature. The base feature must be in an 'edit' state to be able to add any additional items to it.")


class TrimFeatures(core.Base):
    """
    Collection that provides access to all of the existing trim features in a component and supports the ability to create new trim features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TrimFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified trim feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return TrimFeature()

    def createInput(self, trimTool):
        """
        Creates a TrimFeatureInput object. Use properties and methods on this object to define the trim feature you want to create and then use the Add method, passing in the TrimFeatureInput object. To determine the possible boundaries and allow you to choose which cells to keep, the trim feature does a partial compute when the input object is created. To do this it starts a trim feature transaction and completes the transaction when you call the add method. If you don't call the add method to finish the transaction it leaves Fusion 360 in a bad state and there will be undo problems and possibly a crash. If you have created a TrimFeatureInput object and don't want to finish the feature creation, you need to call the cancel method on the TrimFeatureInput object to safely abort the current boundary fill transaction.
        trimTool : A patch body, B-Rep face, construction plane or sketch curve that intersects the surface or surfaces to be trimmed
        Returns the newly created TrimFeatureInput object or null if the creation failed.
        """
        return TrimFeatureInput()

    def add(self, input):
        """
        Creates a new trim feature.
        input : A TrimFeatureInput object that defines the desired trim feature. Use the createInput method to create a new TrimFeatureInput object and then use methods on it (the TrimFeatureInput object) to define the trim feature.
        Returns the newly created TrimFeature object or null if the creation failed.
        """
        return TrimFeature()

    def itemByName(self, name):
        """
        Function that returns the specified trim feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return TrimFeature()

    count = property(_get_count, None, doc="The number of trim features in the collection.")


class TSplineBodies(core.Base):
    """
    A collection of TSpline bodies.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TSplineBodies()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified T-Spline body using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return TSplineBody()

    def itemByName(self, name):
        """
        Returns a TSplineBody by specifying the name of the body as seen in the browser.
        name : The name of the body, as seen in the browser. This is case sensitive.
        Returns the specified item or null if a body with that name was not found.
        """
        return TSplineBody()

    def addByTSMFile(self, tsmFilename):
        """
        Creates a new TSplineBody by reading in a TSM file from disk.
        tsmFilename : The full filename of the TSM file on disk.
        Returns the newly created TSplineBody if successful or null in the case of failure.
        """
        return TSplineBody()

    def addByTSMDescription(self, tsmDescription):
        """
        Creates a new TSplineBody using the T-Spline description provided by the input string which contains TSM formatted text.
        tsmDescription : A string that contains a T-Spline description in TSM form.
        Returns the newly created TSplineBody if successful or null in the case of failure.
        """
        return TSplineBody()

    count = property(_get_count, None, doc="The number of bodies in the collection.")


class TSplineBody(core.Base):
    """
    A TSpline body.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TSplineBody()

    def _set_name(self, name):
        pass

    def _get_name(self):
        return str()

    def _get_parentFormFeature(self):
        return FormFeature()

    def getTSMDescription(self):
        """
        Returns the T-Spline body as a string in the form of a TSM description.
        Returns the string formatted using the TSM format.
        """
        return str()

    def saveAsTSMFile(self, filename):
        """
        Saves the body as a TSM file.
        filename : The full filename of the file to save the body to. If the file already exists, it will be overwritten.
        Returns true if the file was successfully created.
        """
        return bool()

    name = property(_get_name, _set_name,
                    doc="Gets and sets the name of the body. If setting this property, there is the side-effect that the B-Rep body created from this T-Spline body is also renamed.")
    parentFormFeature = property(_get_parentFormFeature, None, doc="Returns the owning form feature.")


class UnstitchFeatures(core.Base):
    """
    Collection that provides access to all of the existing Unstitch features in a component and supports the ability to create new Unstitch features.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return UnstitchFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified Unstitch feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return UnstitchFeature()

    def add(self, faces, isChainSelection):
        """
        Creates a new Unstitch feature.
        faces : The faces and/or bodies to Unstitch. Individual faces can be unstitched from solid and/or patch bodies. The faces being unstitched need not all come from the same body.
        isChainSelection : A boolean value for setting whether or not faces that are connected and adjacent to the input faces will be included in the selection. The default value is true.
        Returns the newly created UnstitchFeature object or null if the creation failed.
        """
        return UnstitchFeature()

    def itemByName(self, name):
        """
        Function that returns the specified unstitch feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return UnstitchFeature()

    count = property(_get_count, None, doc="The number of Unstitch features in the collection.")


class UserParameters(core.Base):
    """
    Provides access to the User Parameters within a design and provides methods to create new user parameters.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return UserParameters()

    def _get_count(self):
        return int()

    def _get_design(self):
        return Design()

    def item(self, index):
        """
        Function that returns the specified User Parameter using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return UserParameter()

    def itemByName(self, name):
        """
        Function that returns the specified User Parameter using the name of the parameter as it is displayed in the parameters dialog.
        name : The name of the User Parameter as it is displayed in the parameters dialog
        Returns the specified item or null if an invalid name was specified.
        """
        return UserParameter()

    def add(self, name, value, units, comment):
        """
        Adds a new user parameter to the collection.
        name : The name of the parameter. This is the name shown in the parameters dialog
        value : ValueInput object that specifies the offset distance. If the ValueInput was created using a real, the value will be interpreted using the internal unit for the unit type specified by the 'units' argument. For example, if the ValueInput was created using the real value 5 and the input to a 'units' argument is any valid length unit the value will be interpreted at 5 centimeters. If the 'units' argument is a valid angle unit then the value will be interpreted as 5 radians. If the ValueInput was created using a string, the string is used as-is for the expression of the parameter. This means it must evaluate to the same unit type as that specified by the 'units' argument and if no type is specified it will use the current default units specified for the current document. For example, if the ValueInput was created with the string '5 in', then the 'units' argument must define any valid length so they are compatible. If the 'units' argument is 'cm' a parameter with the unit type of centimeter will be created and it will have the expression '5 in'. When using a ValueInput created using a string, it's the same as creating a ValueInput in the user-interface. You can specify any valid expression, i.e. '5', '5 in', '5 in / 2', '5 + Length', etc. and you can choose from many different types of units. The only requirement is that the units must match in type. For example, they must both be lengths, or they must both be angles, etc.
        units : The units to use for the value of the parameter. Units specified must match the units specified (if any) in the ValueInput object. To create a parameter with no units you can specify either an empty string.
        comment : The comment to display in the parameters dialog. Specify an empty string ('') for no comment
        Returns the newly created UserParameter or null if the creation failed.
        """
        return UserParameter()

    count = property(_get_count, None, doc="Returns the number of parameters in the collection.")
    design = property(_get_design, None, doc="Returns the design that owns the user parameters collection.")


class ViewCorners:
    """
    Specifies which of the four view corners custom graphics will be drawn in relation to. The notUsedViewCorner setting indicates the graphics are not positioned with respect to the view.
    """

    def __init__(self):
        pass

    upperLeftViewCorner = 0
    upperRightViewCorner = 1
    lowerLeftViewCorner = 2
    lowerRightViewCorner = 3


class WebFeatures(core.Base):
    """
    Collection that provides access to all of the existing web features in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return WebFeatures()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified web feature using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return WebFeature()

    def itemByName(self, name):
        """
        Function that returns the specified web feature using the name of the feature.
        name : The name of the feature within the collection to return. This is the name seen in the timeline.
        Returns the specified item or null if the specified name was not found.
        """
        return WebFeature()

    count = property(_get_count, None, doc="The number of web features in the collection.")


class AllExtentDefinition(ExtentDefinition):
    """
    Defines the inputs for a AllExtentDefinition object. This defines a feature extent where the direction can be positive, negative, or symmetric. Setting the direction to Symmetric specifies that the extrusion is through-all, and goes in both directions.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return AllExtentDefinition()

    def _set_direction(self, direction):
        pass

    def _get_direction(self):
        return ExtentDirections()

    direction = property(_get_direction, _set_direction, doc="Gets and sets the direction of the extent.")


class AngleExtentDefinition(ExtentDefinition):
    """
    Defines the inputs for a AngleExtentDefinition object. This feature extent is defined by an angle as well as whether the extent is symmetric or only in one direction. If the extent is not symmetric, a positive or negative angle can be used to control the direction.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return AngleExtentDefinition()

    def _set_isSymmetric(self, isSymmetric):
        pass

    def _get_isSymmetric(self):
        return bool()

    def _get_angle(self):
        return ModelParameter()

    isSymmetric = property(_get_isSymmetric, _set_isSymmetric,
                           doc="Gets and sets if the angle extent is in one direction or symmetric. For a hole this property will always return false and setting it is ignored.")
    angle = property(_get_angle, None,
                     doc="Gets the ModelParameter that defines the angle. The value of the angle can be edited by using the properties on the ModelParameter object to edit the parameter.")


class AtCenterHolePositionDefinition(HolePositionDefinition):
    """
    Provides positioning information for a hole that is positioned at the center of a circular or elliptical edge.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return AtCenterHolePositionDefinition()

    def _get_planarEntity(self):
        return core.Base()

    def _get_centerEdge(self):
        return BRepEdge()

    planarEntity = property(_get_planarEntity, None,
                            doc="Returns the plane that defines the orientation and start of the hole.")
    centerEdge = property(_get_centerEdge, None, doc="Returns the circular or elliptical edge the hole is centered at.")


class BallJointMotion(JointMotion):
    """
    Represents the set of information specific to a ball joint.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BallJointMotion()

    def _set_pitchDirection(self, pitchDirection):
        pass

    def _get_pitchDirection(self):
        return JointDirections()

    def _set_customPitchDirectionEntity(self, customPitchDirectionEntity):
        pass

    def _get_customPitchDirectionEntity(self):
        return core.Base()

    def _get_pitchDirectionVector(self):
        return core.Vector3D()

    def _set_yawDirection(self, yawDirection):
        pass

    def _get_yawDirection(self):
        return JointDirections()

    def _set_customYawDirectionEntity(self, customYawDirectionEntity):
        pass

    def _get_customYawDirectionEntity(self):
        return core.Base()

    def _get_yawDirectionVector(self):
        return core.Vector3D()

    def _get_rollDirectionVector(self):
        return core.Vector3D()

    def _set_pitchValue(self, pitchValue):
        pass

    def _get_pitchValue(self):
        return float()

    def _get_pitchLimits(self):
        return JointLimits()

    def _set_yawValue(self, yawValue):
        pass

    def _get_yawValue(self):
        return float()

    def _get_yawLimits(self):
        return JointLimits()

    def _set_rollValue(self, rollValue):
        pass

    def _get_rollValue(self):
        return float()

    def _get_rollLimits(self):
        return JointLimits()

    pitchDirection = property(_get_pitchDirection, _set_pitchDirection,
                              doc="Gets and sets the direction that the pitch is measured from. This can only be set to ZAxisJointDirection and can return ZAxisJointDirection or CustomJointDirection. If this returns CustomJointDirection then the customNormalDirectionEntity will return an entity that defines the direction. If there is a custom direction defined and this property is set to ZAxisJointDirection, the custom direction will be removed and customNormalDirectionEntity will return null.")
    customPitchDirectionEntity = property(_get_customPitchDirectionEntity, _set_customPitchDirectionEntity,
                                          doc="This property defines a custom pitch direction and can be set using various types of entities that can infer a direction. For example, a linear edge, sketch line, planar face, and cylindrical face.This property is only valid in the case where the pitchDirection property returns CustomJointDirection. Setting this property will automatically set the pitchDirection property to CustomJointDirection.")
    pitchDirectionVector = property(_get_pitchDirectionVector, None,
                                    doc="Returns the direction that the pitch angle is measured from. This property will return null in the case where the BallJointMotion object was obtained from a JointInput object.")
    yawDirection = property(_get_yawDirection, _set_yawDirection,
                            doc="Gets and sets the direction that the pitch is measured from. This can only be set to XAxisJointDirection and can return XAxisJointDirection or CustomJointDirection. If this returns CustomJointDirection then the customYawDirectionEntity will return an entity that defines the direction. If there is a custom direction defined and this property is set to XAxisJointDirection, the custom direction will be removed and customYawDirectionEntity will return null.")
    customYawDirectionEntity = property(_get_customYawDirectionEntity, _set_customYawDirectionEntity,
                                        doc="This property defines a custom yaw direction and can be set using various types of entities that can infer a direction. For example, a linear edge, sketch line, planar face, and cylindrical face.This property is only valid in the case where the yawDirection property returns CustomJointDirection. Setting this property will automatically set the yawDirection property to CustomJointDirection.")
    yawDirectionVector = property(_get_yawDirectionVector, None,
                                  doc="Returns the direction that the yaw angle is measured from. This property will return null in the case where the BallJointMotion object was obtained from a JointInput object.")
    rollDirectionVector = property(_get_rollDirectionVector, None,
                                   doc="Returns the direction that the roll angle is measured from. This property will return null in the case where the BallJointMotion object was obtained from a JointInput object.")
    pitchValue = property(_get_pitchValue, _set_pitchValue,
                          doc="Gets and sets the pitch value. This is in radians. Setting this value is the equivalent of using the Drive Joints command.")
    pitchLimits = property(_get_pitchLimits, None,
                           doc="Returns a JointLimits object that defines the limits of rotation for the pitch. Use the functionality of the returned JointLimits object to get, set, and modify the joint limits.")
    yawValue = property(_get_yawValue, _set_yawValue,
                        doc="Gets and sets the yaw value. This is in radians. Setting this value is the equivalent of using the Drive Joints command.")
    yawLimits = property(_get_yawLimits, None,
                         doc="Returns a JointLimits object that defines the limits of rotation for the yaw. Use the functionality of the returned JointLimits object to get, set, and modify the joint limits.")
    rollValue = property(_get_rollValue, _set_rollValue,
                         doc="Gets and sets the roll value. This is in radians. Setting this value is the equivalent of using the Drive Joints command.")
    rollLimits = property(_get_rollLimits, None,
                          doc="Returns a JointLimits object that defines the limits of rotation for the roll. Use the functionality of the returned JointLimits object to get, set, and modify the joint limits.")


class BaseFeature(Feature):
    """
    The BaseFeature class represents a direct edit feature within a parametric design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BaseFeature()

    def _get_constructionPlanes(self):
        return ConstructionPlane()

    def _get_constructionAxes(self):
        return ConstructionAxis()

    def _get_constructionPoints(self):
        return ConstructionPoint()

    def _get_sketches(self):
        return Sketch()

    def _get_meshBodies(self):
        return MeshBody()

    def startEdit(self):
        """
        Set the user-interface so that the base body is in edit mode.
        Returns true if successful.
        """
        return bool()

    def finishEdit(self):
        """
        Exits from edit mode in the user-interface. If this base feature in not in edit mode, then nothing happens.
        Returns true if successful.
        """
        return bool()

    constructionPlanes = property(_get_constructionPlanes, None,
                                  doc="Returns an array of the construction planes associated with this base feature.")
    constructionAxes = property(_get_constructionAxes, None,
                                doc="Returns an array of the construction axes associated with this base feature.")
    constructionPoints = property(_get_constructionPoints, None,
                                  doc="Returns an array of the construction points associated with this base feature.")
    sketches = property(_get_sketches, None, doc="Returns an array of the sketches associated with this base feature.")
    meshBodies = property(_get_meshBodies, None,
                          doc="Returns an array of the mesh bodies associated with this base feature.")


class BoundaryFillFeature(Feature):
    """
    Object that represents an existing boundary fill feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BoundaryFillFeature()

    def _set_tools(self, tools):
        pass

    def _get_tools(self):
        return core.ObjectCollection()

    def _get_bRepCells(self):
        return BRepCells()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return FeatureOperations()

    def _get_nativeObject(self):
        return BoundaryFillFeature()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return BoundaryFillFeature()

    def applyCellChanges(self):
        """
        After making any changes to the set of selected cells you must call this method to indicate all changes have been made and to apply those changes to the feature.
        Returns true if the apply was successful.
        """
        return bool()

    tools = property(_get_tools, _set_tools,
                     doc="A collection of construction planes and open or closed BRepBody objects that define the set of boundaries that have been used in the calculation of available closed boundaries. Setting this property will clear all currently selected tools.")
    bRepCells = property(_get_bRepCells, None,
                         doc="Gets the set of closed boundaries that have been calculated based on the current set of tools. To get this collection the model must be in the state it was when the feature was initially computed, which means the timeline marker must be positioned to immediately before this feature. After changing any selected cells you must call the applyCellChanges method to update the feature with the changes.")
    operation = property(_get_operation, _set_operation,
                         doc="Gets and sets the type of operation performed by the boundary fill feature.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class BoxFeature(Feature):
    """
    Object that represents an existing box feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return BoxFeature()


class ChamferFeature(Feature):
    """
    Object that represents an existing chamfer feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ChamferFeature()

    def _set_edges(self, edges):
        pass

    def _get_edges(self):
        return core.ObjectCollection()

    def _set_isTangentChain(self, isTangentChain):
        pass

    def _get_isTangentChain(self):
        return bool()

    def _get_chamferType(self):
        return ChamferTypes()

    def _get_chamferTypeDefinition(self):
        return ChamferTypeDefinition()

    def _get_nativeObject(self):
        return ChamferFeature()

    def setEqualDistance(self, distance):
        """
        Changes the type of chamfer to be an equal distance chamfer.
        distance : A ValueInput object that defines the distance of the chamfer. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '2 in'). If no units are specified it is interpreted using the current default units for length.
        Returns true if the feature is successfully changed
        """
        return bool()

    def setTwoDistances(self, distanceOne, distanceTwo):
        """
        Changes the type of chamfer to be a two distances chamfer.
        distanceOne : A ValueInput object that defines the distanceOne of the chamfer. This distance is along the face which is on the left of the selected edge. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '2 in'). If no units are specified it is interpreted using the current default units for length.
        distanceTwo : A ValueInput object that defines the distanceTwo of the chamfer. This distance is along the face which is on the right of the selected edge. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '2 in'). If no units are specified it is interpreted using the current default units for length.
        Returns true if the feature is successfully changed
        """
        return bool()

    def setDistanceAndAngle(self, distance, angle):
        """
        Changes the type of chamfer to be a distance and angle chamfer.
        distance : A ValueInput object that defines the distance of the chamfer. This distance is along the face which is on the right of the selected edge. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '2 in'). If no units are specified it is interpreted using the current default units for length.
        angle : A valueInput object that defines the angle. The direction will be towards to the face which is on the left of the selected edge. This can be a string or a value. If it's a string it is interpreted using the current document units and can include equations. For example all of the following are valid as long as they result in angle units; '45', '45 deg', 'a1 / 2'. If a value is input it is interpreted as radians. It cannot be negative.
        Returns true if the feature is successfully changed
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return ChamferFeature()

    edges = property(_get_edges, _set_edges,
                     doc="Gets and sets the edges being chamfered. In order to access (get) the input edges of a chamfer, you must roll the timeline back to just before the chamfer feature whose edges you want to access. When setting the edges, if the IsTangentChain property is true then all edges that are tangent to the input edges will be include in the chamfer. This property returns nothing in the case where the feature is non-parametric.")
    isTangentChain = property(_get_isTangentChain, _set_isTangentChain,
                              doc="Gets and sets whether or not edges that are tangentially connected to the input edges (if any) will also be chamfered.")
    chamferType = property(_get_chamferType, None,
                           doc="Gets an enum indicating how the chamfer was defined. The valid return values are EqualDistanceType, TwoDistancesType and DistanceAndAngleType. This property returns nothing in the case where the feature is non-parametric.")
    chamferTypeDefinition = property(_get_chamferTypeDefinition, None,
                                     doc="Gets the definition object that is defining the type of chamfer. Modifying the definition object will cause the chamfer to recompute. Various types of definition objects can be returned depending on how the chamfer is defined. The ChamferType property can be used to determine which type of definition will be returned. This property returns nothing in the case where the feature is non-parametric.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class ChordLengthFilletEdgeSet(FilletEdgeSet):
    """
    Provides access to the edges and the parameter associated with a chord length fillet.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ChordLengthFilletEdgeSet()

    def _set_edges(self, edges):
        pass

    def _get_edges(self):
        return core.ObjectCollection()

    def _get_chordLength(self):
        return ModelParameter()

    edges = property(_get_edges, _set_edges,
                     doc="Gets and sets the edges that will be filleted. In order to access (get) the input edges of a fillet, you must roll the timeline back to just before the fillet feature whose edges you want to access.")
    chordLength = property(_get_chordLength, None,
                           doc="Returns the model parameter that controls the chord length of the fillet. You can edit the chord length by using the properties on the returned ModelParameter object.")


class CircularPatternConstraint(GeometricConstraint):
    """
    A circular pattern constraint in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CircularPatternConstraint()


class CircularPatternFeature(Feature):
    """
    Object that represents an existing circular pattern feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CircularPatternFeature()

    def _set_inputEntities(self, inputEntities):
        pass

    def _get_inputEntities(self):
        return core.ObjectCollection()

    def _set_axis(self, axis):
        pass

    def _get_axis(self):
        return core.Base()

    def _get_totalAngle(self):
        return ModelParameter()

    def _set_isSymmetric(self, isSymmetric):
        pass

    def _get_isSymmetric(self):
        return bool()

    def _get_quantity(self):
        return ModelParameter()

    def _set_suppressedElementsIds(self, suppressedElementsIds):
        pass

    def _get_suppressedElementsIds(self):
        return int()

    def _get_patternElements(self):
        return PatternElements()

    def _get_resultFeatures(self):
        return core.ObjectCollection()

    def _get_nativeObject(self):
        return CircularPatternFeature()

    def _get_patternEntityType(self):
        return PatternEntityTypes()

    def _set_patternComputeOption(self, patternComputeOption):
        pass

    def _get_patternComputeOption(self):
        return PatternComputeOptions()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return CircularPatternFeature()

    inputEntities = property(_get_inputEntities, _set_inputEntities,
                             doc="Gets and sets the input entities. The collection can contain faces, features, bodies or occurrences. All of the entities must be of a single type. For example, it can't contain features and occurrences but only features or occurrences.")
    axis = property(_get_axis, _set_axis,
                    doc="Gets and sets the axis of circular pattern. This can be a sketch line, linear edge, construction axis, an edge/sketch curve that defines an axis (circle, etc.) or a face that defines an axis (cylinder, cone, torus, etc.).")
    totalAngle = property(_get_totalAngle, None,
                          doc="Returns the parameter controlling the total angle. To edit the angle use properties on the parameter to edit its value. This property returns null in the case where the feature is non-parametric. A negative value can be used to change the direction of the pattern.")
    isSymmetric = property(_get_isSymmetric, _set_isSymmetric,
                           doc="Gets and sets if the angle extent is in one direction or symmetric.")
    quantity = property(_get_quantity, None,
                        doc="Returns the parameter controlling the number of pattern elements, including any suppressed elements. To edit the quantity use properties on the parameter to edit its value. This property returns null in the case where the feature is non-parametric.")
    suppressedElementsIds = property(_get_suppressedElementsIds, _set_suppressedElementsIds,
                                     doc="Gets and sets the id's of the elements to suppress.")
    patternElements = property(_get_patternElements, None,
                               doc="Gets the PatternElements collection that contains the elements created by this pattern.")
    resultFeatures = property(_get_resultFeatures, None,
                              doc="Returns the features that were created as a result of this pattern. This is only valid for a direct edit model and this returns null in the case where the feature is parametric.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    patternEntityType = property(_get_patternEntityType, None,
                                 doc="Returns the type of entities the pattern consists of. This can be used to help determine the type of results that will be found in the pattern elements.")
    patternComputeOption = property(_get_patternComputeOption, _set_patternComputeOption,
                                    doc="Gets and sets the compute option for this pattern feature. This property only applies when patterning features and is ignored in the direct modeling environment.")


class CoilFeature(Feature):
    """
    Object that represents an existing coil primitive feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CoilFeature()


class CoincidentConstraint(GeometricConstraint):
    """
    A coincident constraint in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CoincidentConstraint()

    def _get_point(self):
        return SketchPoint()

    def _get_entity(self):
        return SketchEntity()

    def _get_nativeObject(self):
        return CoincidentConstraint()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return CoincidentConstraint()

    point = property(_get_point, None, doc="Returns the sketch point that is constrained.")
    entity = property(_get_entity, None, doc="The sketch curve or point the point is constrained to.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class CollinearConstraint(GeometricConstraint):
    """
    A collinear constraint in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CollinearConstraint()

    def _get_lineOne(self):
        return SketchLine()

    def _get_lineTwo(self):
        return SketchLine()

    def _get_nativeObject(self):
        return CollinearConstraint()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return CollinearConstraint()

    lineOne = property(_get_lineOne, None, doc="Returns the first line.")
    lineTwo = property(_get_lineTwo, None, doc="Returns the second line.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class CombineFeature(Feature):
    """
    Object that represents an existing Combine feature in a design. In non-parametric environment this object does not exist.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CombineFeature()

    def _set_targetBody(self, targetBody):
        pass

    def _get_targetBody(self):
        return BRepBody()

    def _set_toolBodies(self, toolBodies):
        pass

    def _get_toolBodies(self):
        return core.ObjectCollection()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return FeatureOperations()

    def _get_isNewComponent(self):
        return bool()

    def _set_isKeepToolBodies(self, isKeepToolBodies):
        pass

    def _get_isKeepToolBodies(self):
        return bool()

    def _get_nativeObject(self):
        return CombineFeature()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return CombineFeature()

    targetBody = property(_get_targetBody, _set_targetBody,
                          doc="Gets and sets the BRep Body object that represents the blank body.")
    toolBodies = property(_get_toolBodies, _set_toolBodies,
                          doc="Gets and sets the BRep Body objects that represent the tool bodies.")
    operation = property(_get_operation, _set_operation,
                         doc="Gets and sets the type of operation performed by the combine. The valid values are JoinFeatureOperation, CutFeatureOperation and IntersectFeatureOperation.")
    isNewComponent = property(_get_isNewComponent, None,
                              doc="Gets a boolean value for whether or not a new component was created when this feature was created.")
    isKeepToolBodies = property(_get_isKeepToolBodies, _set_isKeepToolBodies,
                                doc="Gets and sets a boolean value for whether or not the tool bodies are retrained after the combine results.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class Component(BaseComponent):
    """
    Represents a component in the data model. A component represents a set of geometry, features, and parameters that make up an item in the design. A component can be referenced multiple times into a design with a Occurrence object.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return Component()

    def _get_sketches(self):
        return Sketches()

    def _get_features(self):
        return Features()

    def _get_meshBodies(self):
        return MeshBodies()

    def _get_modelParameters(self):
        return ModelParameters()

    def _set_isOriginFolderLightBulbOn(self, isOriginFolderLightBulbOn):
        pass

    def _get_isOriginFolderLightBulbOn(self):
        return bool()

    def _set_isConstructionFolderLightBulbOn(self, isConstructionFolderLightBulbOn):
        pass

    def _get_isConstructionFolderLightBulbOn(self):
        return bool()

    def _set_isSketchFolderLightBulbOn(self, isSketchFolderLightBulbOn):
        pass

    def _get_isSketchFolderLightBulbOn(self):
        return bool()

    def _get_xYConstructionPlane(self):
        return ConstructionPlane()

    def _get_xZConstructionPlane(self):
        return ConstructionPlane()

    def _get_yZConstructionPlane(self):
        return ConstructionPlane()

    def _get_xConstructionAxis(self):
        return ConstructionAxis()

    def _get_yConstructionAxis(self):
        return ConstructionAxis()

    def _get_zConstructionAxis(self):
        return ConstructionAxis()

    def _get_originConstructionPoint(self):
        return ConstructionPoint()

    def _set_partNumber(self, partNumber):
        pass

    def _get_partNumber(self):
        return str()

    def _set_description(self, description):
        pass

    def _get_description(self):
        return str()

    def _get_joints(self):
        return Joints()

    def _get_jointOrgins(self):
        return JointOrigins()

    def _get_asBuiltJoints(self):
        return AsBuiltJoints()

    def _get_rigidGroups(self):
        return RigidGroups()

    def _set_material(self, material):
        pass

    def _get_material(self):
        return core.Material()

    def _get_physicalProperties(self):
        return PhysicalProperties()

    def _get_boundingBox(self):
        return core.BoundingBox3D()

    def _set_isJointsFolderLightBulbOn(self, isJointsFolderLightBulbOn):
        pass

    def _get_isJointsFolderLightBulbOn(self):
        return bool()

    def _get_attributes(self):
        return core.Attributes()

    def _set_isBodiesFolderLightBulbOn(self, isBodiesFolderLightBulbOn):
        pass

    def _get_isBodiesFolderLightBulbOn(self):
        return bool()

    def _get_allJoints(self):
        return Joint()

    def _get_allAsBuiltJoints(self):
        return AsBuiltJoint()

    def _get_allJointOrigins(self):
        return JointOrigin()

    def _get_allRigidGroups(self):
        return RigidGroup()

    def _set_opacity(self, opacity):
        pass

    def _get_opacity(self):
        return float()

    def _get_jointOrigins(self):
        return JointOrigins()

    def _get_customGraphicsGroups(self):
        return CustomGraphicsGroups()

    def _get_revisionId(self):
        return str()

    def createOpenProfile(self, curves, chainCurves):
        """
        Creates an open profile based on the input curve(s).
        curves : A SketchCurve or an ObjectCollection containing multiple sketch entities. If a single sketch curve is input the chainCurves argument is checked to determine if connected curves (they do not need to be tangent) should be automatically found. If multiple curves are provided the chainCurves argument is always treated as false so you must provide all of the curves in the object collection that you want included in the profile. The provided curves must all connect together in a single path. The input curves do not need to be in the same sketch, but they do need to geometrically connect for a valid profile to be created.
        chainCurves : If true, this finds any curves within the same sketch that connect to the single input curve and automatically includes them in the profile. If false, only the curves provided will be used to define the profile. This argument is ignored and treated as false if multiple curves are input.
        Returns the new Profile object or null in the case of a failure.
        """
        return Profile()

    def createBRepEdgeProfile(self, edges, chainEdges):
        """
        Creates a profile based on the outside open edges of a BRepFace.
        edges : A single BRepEdge object or an ObjectCollection containing multiple BRepEdge objects, or a BRepLoop object. If a single edge is input, the chainEdges argument is checked to determine if connected edges (they do not need to be tangent) should be automatically found. If multiple edges are provided the chainEdges argument is always treated as false so you must provide all of the edges in the object collection that you want included in the profile. and the edges must all connect together in a single path. if a BRepLoop object is provided, all of the edges in the loop are included in the profile and the chainEdges argument is ignored.
        chainEdges : If true, this finds any edges that connect to the single input edge and automatically includes them in the profile. If false, only the edges provided will be used to define the profile. This argument is ignored and treated as false if multipled edges or a BRepLoop is input.
        Returns the new Profile object or null in the case of a failure.
        """
        return Profile()

    def saveCopyAs(self, name, dataFolder, description, tag):
        """
        Performs a Save Copy As on this component. This saves the specified component as a new document in the specified location.
        name : The name to use for the new document. If this is an empty string, Fusion 360 will use the name of the component being saved.
        dataFolder : The data folder to save the new document to.
        description : The description string of the document. This can be an empty string.
        tag : The tag string of the document. This can be an empty string.
        Returns a DataFileFuture object that can be used to track the progress of the upload and get the resulting DataFile once it's available on A360.
        """
        return core.DataFileFuture()

    def getPhysicalProperties(self, accuracy):
        """
        Returns the PhysicalProperties object that has properties for getting the area, density, mass, volume, moments, etc of this component.
        accuracy : Specifies the desired level of computational accuracy of the property calculations. The default value of 'LowCalculationAccuracy' returns results within a +/- 1% error margin.
        """
        return PhysicalProperties()

    def transformOccurrences(self, occurrences, transforms, ignoreJoints):
        """
        Transforms a set of occurrences in one step. This provides better performance than transforming them one at a time. This method is only valid when called on the root component because Fusion 360 flattens the entire assembly structure when manipulating the assembly so all transforms are relative to the root component.
        occurrences : An array of Occurrence objects that you want to transform. These must all be in the context of the root component which means proxies must be used for occurrences that are in sub-components.
        transforms : An array of Matrix3D objects that defines the transform to apply to each occurrence. This array must be the same size as the array provided for the occurrences argument and the transform will be applied to the occurrence at the same index in the occurrences array.
        ignoreJoints : Specifies if the joints are to be ignored and the occurrences are to be positioned based on then specified transform or if the joints should be used and the occurrence is transformed the best it can while still honoring the joints.
        Returns true if the transform was successful.
        """
        return bool()

    sketches = property(_get_sketches, None,
                        doc="Returns the sketches collection associated with this component. This provides access to the existing sketches and supports the creation of new sketches.")
    features = property(_get_features, None,
                        doc="Returns the collection that provides access to all of the features associated with this component.")
    meshBodies = property(_get_meshBodies, None,
                          doc="Returns the mesh bodies collection associated with this component.")
    modelParameters = property(_get_modelParameters, None,
                               doc="Returns the collection of model parameters in the Component.")
    isOriginFolderLightBulbOn = property(_get_isOriginFolderLightBulbOn, _set_isOriginFolderLightBulbOn,
                                         doc="Gets and sets if the light bulb of the origin folder as seen in the browser is on or off. This controls the visibility of the origin construction geometry.")
    isConstructionFolderLightBulbOn = property(_get_isConstructionFolderLightBulbOn,
                                               _set_isConstructionFolderLightBulbOn,
                                               doc="Gets and sets if the light bulb of the construction folder as seen in the browser is on or off. This controls the visibility of the (non-origin) construction geometry (i.e. planes, points, axes).")
    isSketchFolderLightBulbOn = property(_get_isSketchFolderLightBulbOn, _set_isSketchFolderLightBulbOn,
                                         doc="Gets and sets if the light bulb of the sketch folder as seen in the browser is on or off. This controls the visibility of the sketches in this component.")
    xYConstructionPlane = property(_get_xYConstructionPlane, None, doc="Returns the XY origin construction plane.")
    xZConstructionPlane = property(_get_xZConstructionPlane, None, doc="Returns the XZ origin construction plane.")
    yZConstructionPlane = property(_get_yZConstructionPlane, None, doc="Returns the YZ origin construction plane.")
    xConstructionAxis = property(_get_xConstructionAxis, None, doc="Returns the X origin construction axis.")
    yConstructionAxis = property(_get_yConstructionAxis, None, doc="Returns the Y origin construction axis.")
    zConstructionAxis = property(_get_zConstructionAxis, None, doc="Returns the Z origin construction axis.")
    originConstructionPoint = property(_get_originConstructionPoint, None, doc="Returns the origin construction point.")
    partNumber = property(_get_partNumber, _set_partNumber,
                          doc="Gets and sets the part number associated with this component. Setting this to an empty string will reset it to be the same as the component name.")
    description = property(_get_description, _set_description,
                           doc="Gets and sets the description associated with this component.")
    joints = property(_get_joints, None, doc="Returns the collection of joints associated with this component.")
    jointOrgins = property(_get_jointOrgins, None,
                           doc="This property was incorrectly spelled and has been replaced with the JointOrigins property. However, this needs to remain in the implementation to continue to support programs that already used it, but it will be hidden in the documentation.")
    asBuiltJoints = property(_get_asBuiltJoints, None,
                             doc="Returns the collection of as-built joints associated with this component.")
    rigidGroups = property(_get_rigidGroups, None,
                           doc="Returns the collection of rigid groups associated with this component.")
    material = property(_get_material, _set_material,
                        doc="Gets and sets the physical material assigned to this component.")
    physicalProperties = property(_get_physicalProperties, None,
                                  doc="Returns the PhysicalProperties object that has properties for getting the area, density, mass, volume, moments, etc of this component. Property values will be calulated using the 'LowCalculationAccuracy' setting when using this property to get the PhysicalProperties object. To specify a higher calculation tolerance, use the getPhysicalProperties method instead.")
    boundingBox = property(_get_boundingBox, None,
                           doc="Returns the bounding box of this component. This is always in world space of the component.")
    isJointsFolderLightBulbOn = property(_get_isJointsFolderLightBulbOn, _set_isJointsFolderLightBulbOn,
                                         doc="Gets and sets if the light bulb of the joints folder as seen in the browser is on or off. This controls the visibility of the joints in this occurrence. The light bulb for the folder is component specific and will turn off the joints for all occurrences referencing the component.")
    attributes = property(_get_attributes, None, doc="Returns the collection of attributes associated with this face.")
    isBodiesFolderLightBulbOn = property(_get_isBodiesFolderLightBulbOn, _set_isBodiesFolderLightBulbOn,
                                         doc="Gets and sets if the light bulb of the bodies folder as seen in the browser is on or off. This controls the visibility of the solid/surface bodies and the mesh bodies in this component.")
    allJoints = property(_get_allJoints, None,
                         doc="Returns all joints in this component and any sub components. The joints returned are all in the context of this component so any joints in sub components will be proxies. This is primarily useful when used from the root component because Fusion 360 flattens the assembly structure, including joints, when manipulating an assembly.")
    allAsBuiltJoints = property(_get_allAsBuiltJoints, None,
                                doc="Returns all joint origins in this component and any sub components. The joint origins returned are all in the context of this component so any joint origins in sub components will be proxies. This is primarily useful when used from the root component because Fusion 360 flattens the assembly structure, including joint origins, when manipulating an assembly.")
    allJointOrigins = property(_get_allJointOrigins, None,
                               doc="Returns all as-built joints in this component and any sub components. The as-built joints returned are all in the context of this component so any as-built joints in sub components will be proxies. This is primarily useful when used from the root component because Fusion 360 flattens the assembly structure, including as-built joints, when manipulating an assembly.")
    allRigidGroups = property(_get_allRigidGroups, None,
                              doc="Returns all rigid groups in this component and any sub components. The rigid groups returned are all in the context of this component so any rigid groups in sub components will be proxies. This is primarily useful when used from the root component because Fusion 360 flattens the assembly structure, including rigid groups, when manipulating an assembly.")
    opacity = property(_get_opacity, _set_opacity,
                       doc="Gets and sets the opacity override assigned to this component. A value of 1.0 specifies that is it completely opaque and a value of 0.0 specifies that is it completely transparent. This is only applicable for a non-root local component. This value is not necessarily related to what the user sees because the opacity is inherited. For example, if you have TopComponent and it has a component in it called SubComponent and you set the opacity of TopComponent to be 0.5, SubComponent will also be shown as slightly transparent even though the opacity property for it will return 1.0. Because a component can be referenced as an occurrence in other components and they can have different opacity settings, it's possible that different instances of the same component can display using different opacity levels. To get the opacity that it is being displayed with use the Occurrence.visibleOpacity property.")
    jointOrigins = property(_get_jointOrigins, None,
                            doc="Returns the collection of joint origins associated with this component.")
    customGraphicsGroups = property(_get_customGraphicsGroups, None,
                                    doc="Returns the customGraphicsGroups object in this component.")
    revisionId = property(_get_revisionId, None,
                          doc="Returns the current revision ID of the component. This ID changes any time the component is modified in any way. By getting and saving the ID when you create any data that is dependent on the component, you can then compare the saved ID with the current ID to determine if the component has changed to know if you should update your data.")


class ConcentricConstraint(GeometricConstraint):
    """
    A concentric constraint in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConcentricConstraint()

    def _get_entityOne(self):
        return SketchCurve()

    def _get_entityTwo(self):
        return SketchCurve()

    def _get_nativeObject(self):
        return ConcentricConstraint()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return ConcentricConstraint()

    entityOne = property(_get_entityOne, None, doc="Returns the first curve.")
    entityTwo = property(_get_entityTwo, None, doc="Returns the second curve.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class ConstantRadiusFilletEdgeSet(FilletEdgeSet):
    """
    Provides access to the edges and the parameter associated with a constant radius fillet.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstantRadiusFilletEdgeSet()

    def _set_edges(self, edges):
        pass

    def _get_edges(self):
        return core.ObjectCollection()

    def _get_radius(self):
        return ModelParameter()

    edges = property(_get_edges, _set_edges,
                     doc="Gets and sets the edges that will be filleted. In order to access (get) the input edges of a fillet, you must roll the timeline back to just before the fillet feature whose edges you want to access.")
    radius = property(_get_radius, None,
                      doc="Returns the model parameter that controls the radius of the fillet. You can edit the radius by using the properties on the returned ModelParameter object.")


class ConstructionAxisByLineDefinition(ConstructionAxisDefinition):
    """
    The definition for a non-parametric construction axis. In a non-parametric design all construction planes will return this type of definition regardless of how they were initially created.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionAxisByLineDefinition()

    def _set_axis(self, axis):
        pass

    def _get_axis(self):
        return core.InfiniteLine3D()

    axis = property(_get_axis, _set_axis,
                    doc="Gets and sets the infinite line that defines the position and direction of the axis")


class ConstructionAxisCircularFaceDefinition(ConstructionAxisDefinition):
    """
    The definition for a parametric construction axis created using the SetbyCircularFace method
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionAxisCircularFaceDefinition()

    def _set_circularFace(self, circularFace):
        pass

    def _get_circularFace(self):
        return BRepFace()

    circularFace = property(_get_circularFace, _set_circularFace,
                            doc="Gets and sets the cylinder, cone, or torus this work axis is parametrically dependent on.")


class ConstructionAxisEdgeDefinition(ConstructionAxisDefinition):
    """
    The definition for a parametric construction axis created using the SetbyEdge method
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionAxisEdgeDefinition()

    def _set_edgeEntity(self, edgeEntity):
        pass

    def _get_edgeEntity(self):
        return core.Base()

    edgeEntity = property(_get_edgeEntity, _set_edgeEntity,
                          doc="Gets and sets the linear edge, construction line, or sketch line that defines the construction axis.")


class ConstructionAxisNormalToFaceAtPointDefinition(ConstructionAxisDefinition):
    """
    The definition for a parametric construction axis created using the SetByNormalToFaceAtPoint method
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionAxisNormalToFaceAtPointDefinition()

    def _get_face(self):
        return core.Base()

    def _get_pointEntity(self):
        return core.Base()

    def redefine(self, face, pointEntity):
        """
        Redefines the input geometry of the construction axis.
        face : The face the axis is normal to
        pointEntity : The point that positions the axis
        Returns true if the redefinition of the construction axis is successful.
        """
        return bool()

    face = property(_get_face, None, doc="Gets the face the axis is normal to")
    pointEntity = property(_get_pointEntity, None, doc="Gets the point that positions the axis")


class ConstructionAxisPerpendicularAtPointDefinition(ConstructionAxisDefinition):
    """
    The definition for a parametric construction axis created using the SetByPerpendicularAtPoint method
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionAxisPerpendicularAtPointDefinition()

    def _get_face(self):
        return BRepFace()

    def _get_point(self):
        return core.Base()

    def redefine(self, face, pointEntity):
        """
        Redefines the input geometry of the construction axis.
        face : The face (BRepFace object) to create the axis perpendicular to.
        pointEntity : The point (sketch point, vertex, construction point) used to position the axis.
        Returns true if the redefinition of the axis is successful.
        """
        return bool()

    face = property(_get_face, None, doc="Returns the face the construction axis is perpendicular to.")
    point = property(_get_point, None, doc="Returns the point (construction or sketch point) that positions the axis.")


class ConstructionAxisTwoPlaneDefinition(ConstructionAxisDefinition):
    """
    The definition for a parametric construction axis created using the SetByTwoPlanes method
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionAxisTwoPlaneDefinition()

    def _get_planarEntityOne(self):
        return core.Base()

    def _get_planarEntityTwo(self):
        return core.Base()

    def redefine(self, planarEntityOne, planarEntityTwo):
        """
        Redefines the input geometry of the construction axis.
        planarEntityOne : The first planar face or construction plane
        planarEntityTwo : The second planar face or construction plane
        Returns true if the redefinition of the axis is successful.
        """
        return bool()

    planarEntityOne = property(_get_planarEntityOne, None, doc="Gets the first planar face or construction plane")
    planarEntityTwo = property(_get_planarEntityTwo, None, doc="Gets the second planar face or construction plane")


class ConstructionAxisTwoPointDefinition(ConstructionAxisDefinition):
    """
    The definition for a parametric construction axis created using the SetbyTwoPoints method
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionAxisTwoPointDefinition()

    def _get_pointEntityOne(self):
        return core.Base()

    def _get_pointEntityTwo(self):
        return core.Base()

    def redefine(self, pointEntityOne, pointEntityTwo):
        """
        Redefines the input geometry of the construction axis.
        pointEntityOne : The first point
        pointEntityTwo : The second point
        Returns true if the redefinition of the construction axis is successful.
        """
        return bool()

    pointEntityOne = property(_get_pointEntityOne, None, doc="Gets the first point.")
    pointEntityTwo = property(_get_pointEntityTwo, None, doc="Gets the second point.")


class ConstructionPlaneAtAngleDefinition(ConstructionPlaneDefinition):
    """
    ConstructionPlaneAtAngleDefinition defines a ConstructionPlane by...
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPlaneAtAngleDefinition()

    def _get_angle(self):
        return Parameter()

    def _get_linearEntity(self):
        return core.Base()

    def _get_planarEntity(self):
        return core.Base()

    def redefine(self, angle, linearEntity, planarEntity):
        """
        Redefines the input geometry of the construction plane.
        angle : A ValueInput object that defines the angle at which to create the construction plane
        linearEntity : The linear edge, construction line, or sketch line that defines the axis of rotation to measure the angle about
        planarEntity : A plane, planar face or construction plane the angle of the construction plane is measured from
        Returns true if the redefinition of the plane is successful.
        """
        return bool()

    angle = property(_get_angle, None,
                     doc="Returns a Value object that for a transient definition provides the current assigned value. For a definition associated with a construction plane, this provides access to the associated parameter controlling the angle.")
    linearEntity = property(_get_linearEntity, None,
                            doc="Gets the linear edge, construction line, or sketch line that defines the axis of rotation for the construction plane.")
    planarEntity = property(_get_planarEntity, None,
                            doc="Gets the planar face or construction plane the angle for this construction plane is measured from and is parametrically dependent on.")


class ConstructionPlaneByPlaneDefinition(ConstructionPlaneDefinition):
    """
    The definition for a non-parametric construction plane. All constructions planes will return this type of definition regardless of method used to initially create them.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPlaneByPlaneDefinition()

    def _set_plane(self, plane):
        pass

    def _get_plane(self):
        return core.Plane()

    plane = property(_get_plane, _set_plane, doc="Gets and sets the position of the construction plane.")


class ConstructionPlaneDistanceOnPathDefinition(ConstructionPlaneDefinition):
    """
    ConstructionDistanceOnPathDefinition defines a ConstructionPlane normal to an edge or sketch profile at a specified position along the path defined by the edge or sketch profile.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPlaneDistanceOnPathDefinition()

    def _get_pathEntity(self):
        return core.Base()

    def _get_distance(self):
        return Parameter()

    def redefine(self, pathEntity, distance):
        """
        Redefines the input defining the construction plane.
        pathEntity : The sketch curve, edge, or a profile object
        distance : The ValueInput object that defines the distance along the path
        Returns true if the redefinition of the plane is successful.
        """
        return bool()

    pathEntity = property(_get_pathEntity, None, doc="Gets the sketch curve, edge, or a profile object.")
    distance = property(_get_distance, None, doc="Gets the distance along the path.")


class ConstructionPlaneMidplaneDefinition(ConstructionPlaneDefinition):
    """
    ConstructionPlaneMidplaneDefinition defines a ConstructionPlane by...
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPlaneMidplaneDefinition()

    def _get_planarEntityOne(self):
        return core.Base()

    def _get_planarEntityTwo(self):
        return core.Base()

    def redefine(self, planarEntityOne, planarEntityTwo):
        """
        Redefines the input geometry of the construction plane.
        planarEntityOne : The first planar face or construction plane that defines this ConstructionPlane.
        planarEntityTwo : The second planar face or construction plane that defines this ConstructionPlane.
        Returns true if the redefinition of the plane is successful.
        """
        return bool()

    planarEntityOne = property(_get_planarEntityOne, None,
                               doc="Gets the first planar face or construction plane that defines this ConstructionPlane.")
    planarEntityTwo = property(_get_planarEntityTwo, None,
                               doc="Gets the second planar face or construction plane that defines this ConstructionPlane.")


class ConstructionPlaneOffsetDefinition(ConstructionPlaneDefinition):
    """
    ConstructionPlaneOffsetDefinition defines a ConstructionPlane by...
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPlaneOffsetDefinition()

    def _get_offset(self):
        return Parameter()

    def _get_planarEntity(self):
        return core.Base()

    def redefine(self, offset, planarEntity):
        """
        Redefines the input geometry of the construction plane.
        offset : ValueInput object that specifies the offset distance
        planarEntity : A plane, planar face or construction plane from which to measure the offset from
        Returns true is the operation is successful
        """
        return bool()

    offset = property(_get_offset, None,
                      doc="Returns a Value object that for a transient definition that provides the current assigned value and for a definition associated with a construction plane Provides access to the associated parameter controlling the offset.")
    planarEntity = property(_get_planarEntity, None,
                            doc="Gets the planar face or construction plane this construction plane is parametrically dependent on.")


class ConstructionPlaneTangentAtPointDefinition(ConstructionPlaneDefinition):
    """
    ConstructionPlaneTangentAtPointDefinition defines a ConstructionPlane tangent to a face and aligned to a point.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPlaneTangentAtPointDefinition()

    def _get_tangentFace(self):
        return BRepFace()

    def _get_pointEntity(self):
        return core.Base()

    def redefine(self, tangentFace, pointEntity):
        """
        Redefines the input geometry of the construction plane.
        tangentFace : The face to create the plane tangent to
        pointEntity : The point (sketch point, vertex, construction point) used to align the plane.
        Returns true if the redefinition of the plane is successful.
        """
        return bool()

    tangentFace = property(_get_tangentFace, None, doc="Gets the tangent face.")
    pointEntity = property(_get_pointEntity, None,
                           doc="Gets the point (sketch point, vertex, construction point) used to align the plane.")


class ConstructionPlaneTangentDefinition(ConstructionPlaneDefinition):
    """
    ConstructionPlaneTangentDefinition defines a ConstructionPlane tangent to a cylindrical or conical face at a point.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPlaneTangentDefinition()

    def _get_angle(self):
        return Parameter()

    def _get_tangentFace(self):
        return core.Base()

    def _get_planarEntity(self):
        return core.Base()

    def redefine(self, angle, tangentFace, planarEntity):
        """
        Redefines the input geometry of the construction plane.
        angle : A Value object that defines the angle of the construction plane
        tangentFace : The cylindrical or conical face that the construction plane is tangent to.
        planarEntity : The planar face or construction plane the angle for this construction plane is measured from
        Returns true if the redefinition of the plane is successful.
        """
        return bool()

    angle = property(_get_angle, None,
                     doc="Returns a Value object that for a transient definition provides the current assigned value. For a definition associated with a construction plane, it provides access to the associated parameter controlling the angle.")
    tangentFace = property(_get_tangentFace, None,
                           doc="Gets the cylindrical or conical face that the construction plane is tangent to.")
    planarEntity = property(_get_planarEntity, None,
                            doc="Gets the planar face or construction plane the angle for this construction plane is measured from and is parametrically dependent on.")


class ConstructionPlaneThreePointsDefinition(ConstructionPlaneDefinition):
    """
    ConstructionPlaneThreePointDefinition defines a ConstructionPlane by 3 point entities (e.g. (sketch points, vectrices or construction points) that form a triangle (i.e. no two points the same and they aren't collinear).
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPlaneThreePointsDefinition()

    def _get_pointEntityOne(self):
        return core.Base()

    def _get_pointEntityTwo(self):
        return core.Base()

    def _get_pointEntityThree(self):
        return core.Base()

    def redefine(self, pointEntityOne, pointEntityTwo, pointEntityThree):
        """
        Redefines the input geometry of the construction plane.
        pointEntityOne : Gets the first construction point, sketch point or vertex.
        pointEntityTwo : Gets the second construction point, sketch point or vertex.
        pointEntityThree : Gets the third construction point, sketch point or vertex.
        Returns true if the redefinition of the plane is successful.
        """
        return bool()

    pointEntityOne = property(_get_pointEntityOne, None,
                              doc="Gets the first construction point, sketch point or vertex.")
    pointEntityTwo = property(_get_pointEntityTwo, None,
                              doc="Gets the second construction point, sketch point or vertex.")
    pointEntityThree = property(_get_pointEntityThree, None,
                                doc="Gets the third construction point, sketch point or vertex.")


class ConstructionPlaneTwoEdgesDefinition(ConstructionPlaneDefinition):
    """
    ConstructionPlaneTwoEdgesDefinition defines a ConstructionPlane by two co-planar linear entities like edges, sketch lines or construction axis.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPlaneTwoEdgesDefinition()

    def _get_linearEntityOne(self):
        return core.Base()

    def _get_linearEntityTwo(self):
        return core.Base()

    def redefine(self, linearEntityOne, linearEntityTwo):
        """
        Redefines the input geometry of the construction plane.
        linearEntityOne : The first linear edge, construction line, or sketch line that defines the construction plane.
        linearEntityTwo : The second linear edge, construction line, or sketch line that defines the construction plane.
        """
        return bool()

    linearEntityOne = property(_get_linearEntityOne, None,
                               doc="Gets the first linear edge, construction line, or sketch line that defines the construction plane.")
    linearEntityTwo = property(_get_linearEntityTwo, None,
                               doc="Gets the second linear edge, construction line, or sketch line that defines the construction plane.")


class ConstructionPointCenterDefinition(ConstructionPointDefinition):
    """
    The definition for a parametric construction point created using the SetbyCenter method
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPointCenterDefinition()

    def _set_circularEntity(self, circularEntity):
        pass

    def _get_circularEntity(self):
        return core.Base()

    circularEntity = property(_get_circularEntity, _set_circularEntity,
                              doc="Gets and sets the spherical face (sphere or torus), circular edge or sketch arc/circle whose center defines the location for the construction point.")


class ConstructionPointEdgePlaneDefinition(ConstructionPointDefinition):
    """
    The definition for a parametric construction point created using the SetbyEdgePlane method
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPointEdgePlaneDefinition()

    def _get_edge(self):
        return core.Base()

    def _get_plane(self):
        return core.Base()

    def redefine(self, edge, plane):
        """
        Redefines the input geometry of the construction point.
        edge : A linear B-Rep edge, construction axis or sketch line.
        plane : A plane, planar B-Rep face or construction plane.
        Returns true if the redefinition of the Construction Point is successful.
        """
        return bool()

    edge = property(_get_edge, None, doc="A linear B-Rep edge, construction axis or sketch line.")
    plane = property(_get_plane, None, doc="A plane, planar B-Rep face or construction plane.")


class ConstructionPointPointDefinition(ConstructionPointDefinition):
    """
    The definition for a parametric construction point created using the SetbyPoint method All non-parametric constructions points will return this type of definition regardless of the method used to initially create them.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPointPointDefinition()

    def _set_pointEntity(self, pointEntity):
        pass

    def _get_pointEntity(self):
        return core.Base()

    pointEntity = property(_get_pointEntity, _set_pointEntity,
                           doc="Gets and sets the position of the point using a construction point, sketch point or vertex. Non-parametric points will always return a Point3D object")


class ConstructionPointThreePlanesDefinition(ConstructionPointDefinition):
    """
    The definition for a parametric construction point created using the SetbyThreePlanes method
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPointThreePlanesDefinition()

    def _get_planeOne(self):
        return core.Base()

    def _get_planeTwo(self):
        return core.Base()

    def _get_planeThree(self):
        return core.Base()

    def redefine(self, planeOne, planeTwo, planeThree):
        """
        Redefines the input geometry of the construction point.
        planeOne : The first plane or planar face to intersect
        planeTwo : The second plane or planar face to intersect
        planeThree : The third plane or planar face to intersect
        Returns true if the redefinition of the Construction Point is successful.
        """
        return bool()

    planeOne = property(_get_planeOne, None, doc="The first plane or planar face")
    planeTwo = property(_get_planeTwo, None, doc="The second plane or planar face")
    planeThree = property(_get_planeThree, None, doc="The third plane or planar face")


class ConstructionPointTwoEdgesDefinition(ConstructionPointDefinition):
    """
    The definition for a parametric construction point created using the SetbyTwoEdges method
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ConstructionPointTwoEdgesDefinition()

    def _get_edgeOne(self):
        return core.Base()

    def _get_edgeTwo(self):
        return core.Base()

    def redefine(self, edgeOne, edgeTwo):
        """
        Redefines the input geometry of the construction point.
        edgeOne : The first B-Rep edge or sketch line
        edgeTwo : The second B-Rep edge or sketch line
        Returns true if the redefinition of the Construction Point is successful.
        """
        return bool()

    edgeOne = property(_get_edgeOne, None, doc="Returns a B-Rep edge or sketch line")
    edgeTwo = property(_get_edgeTwo, None, doc="Returns a B-Rep edge or sketch line")


class CopyPasteBody(Feature):
    """
    Object that represents an existing Copy/Paste Body feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CopyPasteBody()

    def _get_sourceBody(self):
        return core.ObjectCollection()

    sourceBody = property(_get_sourceBody, None,
                          doc="Returns the bodies that were copied to create the result bodies of this feature. An ObjectCollection is returned that will contain the original bodies. It's possible that the collection can be empty or contain less than the number of bodies originally copied. This happens in the case where a body has been deleted or consumed by some other operation. If you roll the timeline to a point immediately before or after the feature was created you can access the bodies.")


class CustomGraphicsAppearanceColorEffect(CustomGraphicsColorEffect):
    """
    One of the types of color effects that can be applied to a custom graphics entity. With this type of effect, the graphics entity will display using a Fusion appearance.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsAppearanceColorEffect()

    @staticmethod
    def create(appearance):
        """
        Statically creates a new CustomGraphicsAppearanceColorEffect object. This can be used when setting the color property of the various custom graphics objects. With this coloring effect, an existing appearance is used. The appearance must be avaialable in the design where the graphics will be drawn.
        appearance : The appearance to use. The appearance must be avaialable in the design where the graphics will be drawn.
        Returns the created CustomGraphicsAppearanceColorEffect or null in case of a failure.
        """
        return CustomGraphicsAppearanceColorEffect()

    def _set_appearance(self, appearance):
        pass

    def _get_appearance(self):
        return core.Appearance()

    appearance = property(_get_appearance, _set_appearance,
                          doc="Gets and sets the appearance to use. The appearance assigned must be available in the design where the graphics will be drawn.")


class CustomGraphicsBasicMaterialColorEffect(CustomGraphicsColorEffect):
    """
    One of the types of color effects that can be applied to a custom graphics entity. With this type of effect, basic phong shading and lighting techniques are used so give the entity a 3-dimensional appearance.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsBasicMaterialColorEffect()

    @staticmethod
    def create(diffuseColor, ambientColor, specularColor, emissiveColor, glossiness, opacity):
        """
        Statically creates a new basic CustomGraphicsBasicMaterialColorEffect object. This can be used to color custom graphics entities. With this type of effect you define the basic phong shading properties so that the entity can be rendered with basic shading and lighting effects applied so that it appears 3-dimensional. If only the emmissive coloris provided, the API will automatically create values for the other colors to render the object as a single color.
        diffuseColor : The diffuse color is the color of reflected light as it scatters off of a rough surface and is the primary color of the entity. This color is always required.
        ambientColor : The ambient color is the color of the light anywhere there's not a specific light source. If not specified the same color as the diffuse color is used.
        specularColor : The specular color is the color of reflected light (highlights) as it is reflected off of a shiny surface. This is commonly white or a lighter shade of the diffuse color. If not specified, white is used.
        emissiveColor : The emissive color is the color of light that entity emits, such as in a light bulb. If not specified, black for no emissive light is used.
        glossiness : This specifies how glossy the entity is. The glossiness determines the size of highlights, and thus the apparent shininess of the material. A value of 0.0 will result in very large hightlights like you would see with a rough surface. A maximum valaue of 128.0 will result in very small highlight as from a smooth surface.
        opacity : Specifies the opacity of the entity where a value of 1.0 is completely opaque and 0.0 is completely transparent.
        Returns the created CustomGraphicsBasicMaterialColorEffect or null in case of a failure.
        """
        return CustomGraphicsBasicMaterialColorEffect()

    def _set_emissiveColor(self, emissiveColor):
        pass

    def _get_emissiveColor(self):
        return core.Color()

    def _set_ambientColor(self, ambientColor):
        pass

    def _get_ambientColor(self):
        return core.Color()

    def _set_diffuseColor(self, diffuseColor):
        pass

    def _get_diffuseColor(self):
        return core.Color()

    def _set_specularColor(self, specularColor):
        pass

    def _get_specularColor(self):
        return core.Color()

    def _set_glossiness(self, glossiness):
        pass

    def _get_glossiness(self):
        return float()

    def _set_opacity(self, opacity):
        pass

    def _get_opacity(self):
        return float()

    emissiveColor = property(_get_emissiveColor, _set_emissiveColor,
                             doc="Gets and sets the emissiveColor associated with this CustomGraphicsBasicMaterialColorEffect object. The emissive color is the primary color of the entity")
    ambientColor = property(_get_ambientColor, _set_ambientColor,
                            doc="Gets and sets the ambientColor associated with this CustomGraphicsBasicMaterialColorEffect object. The ambient color is the color of the light anywhere there's not a specific light source.")
    diffuseColor = property(_get_diffuseColor, _set_diffuseColor,
                            doc="Gets and sets the diffuseColor associated with this CustomGraphicsBasicMaterialColorEffect object. The diffuse color is the color of reflected light as it scatters off of a rough surface.")
    specularColor = property(_get_specularColor, _set_specularColor,
                             doc="Gets and sets the specularColor associated with this CustomGraphicsBasicMaterialColorEffect object. The specular color is the color of reflected light (highlights) as it is reflected off of a shiny surface. This is commonly white or a lighter shade of the emissive color.")
    glossiness = property(_get_glossiness, _set_glossiness,
                          doc="Gets and sets the glossiness associated with this CustomGraphicsBasicMaterialColorEffect object. The glossiness determines the size of highlights, and thus the apparent shininess of the material. A value of 0.0 will result in very large hightlights like you would see with a rough surface. A maximum valaue of 128.0 will result in very small highlight as from a smooth surface.")
    opacity = property(_get_opacity, _set_opacity,
                       doc="Gets and sets the opacity associated with this CustomGraphicsBasicMaterialColorEffect object. A value of 1.0 is completely opaque and 0.0 is completely transparent.")


class CustomGraphicsBRepBody(CustomGraphicsEntity):
    """
    This represents custom graphics that are based on a BRepBody.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsBRepBody()

    def _get_faces(self):
        return CustomGraphicsBRepFaces()

    def _get_edges(self):
        return CustomGraphicsBRepEdges()

    def _get_vertices(self):
        return CustomGraphicsBRepVertices()

    def _get_bRepBody(self):
        return BRepBody()

    faces = property(_get_faces, None,
                     doc="Returns the collection of CustomGraphicsBRepFace objects in the CustomGraphicsBRepBody.")
    edges = property(_get_edges, None,
                     doc="Returns the collection of CustomGraphicsBRepEdge objects in the CustomGraphicsBRepBody.")
    vertices = property(_get_vertices, None,
                        doc="Returns the collection of CustomGraphicsBRepVertex objects in the CustomGraphicsBRepBody.")
    bRepBody = property(_get_bRepBody, None,
                        doc="Returns a transient BRepBody that is being displayed as custom graphics.")


class CustomGraphicsCurve(CustomGraphicsEntity):
    """
    This represents custom graphics that are based on any object derived from Curve3D (except InfiniteLine3D). This is useful when drawing curved geometry where the alternative is to stroke the smooth curve and draw it as a series of lines. Using this you can directly use the curve and Fusion 360 will automatically take care of creating the correct display for the current level of detail.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsCurve()

    def _set_curve(self, curve):
        pass

    def _get_curve(self):
        return core.Curve3D()

    def _set_weight(self, weight):
        pass

    def _get_weight(self):
        return float()

    curve = property(_get_curve, _set_curve,
                     doc="Gets and sets the curve associated with this graphics entity. Any of the curve types derived from Curve3D is valid except for InfiniteLine3D.")
    weight = property(_get_weight, _set_weight, doc="Defines the thickness of the curve in pixels.")


class CustomGraphicsGroup(CustomGraphicsEntity):
    """
    Represents of group of custom graphics entities. A group can also own other graphics groups.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsGroup()

    def _get_count(self):
        return int()

    def item(self, index):
        """
        Function that returns the specified custom graphics entity within this group. This also includes any child graphics groups.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return CustomGraphicsEntity()

    def addGroup(self):
        """
        Creates a new, empty CustomGraphicsGroup that is owned by this CustomGraphicsGroup.
        Returns the new CustomGraphicsGroup object or null in the case of a failure.
        """
        return CustomGraphicsGroup()

    def addMesh(self, coordinates, coordinateIndexList, normalVectors, normalIndexList):
        """
        Adds a new CustomGraphicsMesh entity to this group.
        coordinates : The CustomGraphicsCoordinates object that defines the coordinates of the vertices of the mesh. A CustomGrahpicsCoordinates object can be created using the static create method of the CustomGraphicsCoordinates class.
        coordinateIndexList : An array of integers that represent indices into the coordinates to define the vertices of the triangles. If an empty array is provided, then it's assumed that the first three coordinates defines the first triangle, the next three define the second triangle, and so on.
        normalVectors : An array of doubles that represent the x, y, z components of the normals at each coordinate. There should be a normal defined for each coordinate. If an empty array is provided for the normal vectors, Fusion 360 will automatically calculate normal vectors that are 90 degrees to the face of the triangle, making it appear flat.
        normalIndexList : An array of integers that represent indices into the normal vectors to define the which vector corresponds to which vertex. This should be the same size as the vertex index list. If an empty array is input and normal vectors are provided, it is assumed that the normals match up one-to-one to each coordinate.
        Returns the new CustomGraphicsMesh object or null in the case of a failure.
        """
        return CustomGraphicsMesh()

    def addLines(self, coordinates, indexList, isLineStrip, lineStripLengths):
        """
        Adds a new CustomGraphicsLines entity to this group.
        coordinates : The CustomGraphicsCoordinates object that defines the coordinates of the vertices of the lines. A CustomGraphicsCoordinates object can be created using the static create method of the CustomGraphicsCoordinates class.
        indexList : An array of integers that represent indices into the coordinates to define the order the coordinates are used to draw the lines. If an empty array is provided, the coordinates are used in the order they're provided in the provided CustomGraphicsCoordinates object.
        isLineStrip : A boolean indicating if a series of individual lines or a connected set of lines (a line strip) is to be drawn. If individual lines are drawn, (this argument is false), each pair of coordinates defines a single line. If a line strip is drawn, (this argument is true), the first pair of coordinates define the first line and the third coordinate defines a line that connects to the second coordinate. The fourth coordinate creates a line connecting to the third coordinate, and so on.
        lineStripLengths : If isLineStrip is true, this argument is used to define the number of coordinates to use in each line strip. It is an array of integers that defines the number of coordinates for each line strip. For example, if the array [4,10] is input, 4 coordinates are connected for the first line strip and 10 are used to create a second line strip. If an empty array is provided, a single line strip is created. If isLineStrip is False, this argument is ignored.
        Returns the new CustomGraphicsLines object or null in the case of a failure.
        """
        return CustomGraphicsLines()

    def addCurve(self, curve):
        """
        Adds a new CustomGraphicsCurve entity to this group. A CustomGraphicsCurve is a wireframe graphic that is based on any object derived from Curve3D (except InfiniteLine3D). This is useful when drawing curved geometry where the alternative is to stroke the smooth curve and draw it as a series of lines. Using this you can directly use the curve and Fusion 360 will automatically take care of creating the correct display for the current level of detail.
        curve : The curve that defines the shape of the graphics entity. Any of the curve types derived from Curve3D are valid except for InfiniteLine3D.
        Returns the newly created CustomGraphicsCurve object or null in the case of failure.
        """
        return CustomGraphicsCurve()

    def addPointSet(self, coordinates, indexList, pointType, pointImage):
        """
        Adds a new CustomGraphicsPointSet entity to this group. This will be displayed as one or more points where all of the points will display using the same image.
        coordinates : The CustomGraphicsCoordinates object that defines the coordinates where the points will be displayed. A CustomGraphicsCoordinates object can be created using the static create method of the CustomGraphicsCoordinates class.
        indexList : An array of integers that represent indices into the coordinates to define which coordinates to use when drawing points. If an empty array is provided, a point is drawn for every coordinate.
        pointType : Specifies the type of point to display. Currently there are two choices; UserDefinedCustomGraphicsPointType and PointCloudCustomGraphicsPointType. When set to PointCloudCustomGraphicsPointType, each point displays as a single pixel and is the most efficient point display type for displaying sets that contain very large quantities of points. When set to UserDefinedCustomGraphicsPointType, you specify the image to display as the point. This can be any png image and is centered on the point.
        pointImage : If the pointType is PointCloudCustomGraphicsPointType this argument is ignored and can be an empty string. This argument must be specified if the pointType is UserDefinedCustomGraphicsPointType. This is the path to the png image file that will be displayed as the point. It can be either a full path to the file or a relative path that is respect to the .py, dll, or dylib file being run. There is no restriction on the size of the image, but generally very small images would be used for points.
        Returns the newly created CustomGraphicsPointSet object or null in the case of failure.
        """
        return CustomGraphicsPointSet()

    def addText(self, formattedText, font, size, transform):
        """
        Adds a new CustomGraphicsText entity to this group. This will be displayed as a single line of text. It is placed so that the upper-left corner is at the point defined and the text will be parallel to the X-Y plane of the world coordinate system and in the X direction. To change it's position relative to the input point you can change the horizontal and vertical justification on the returnsed CustomGrahicsText object. You can also reorient the text by changing the transform of the returned CustomGraphicsText object.
        formattedText : The text string to be displayed. Overall formatting can be defined using properties on the returned CustomGraphicsText object. Formatting overrides can be defined within the string using formatting codes.
        font : The name of the font to use when displaying the text.
        size : The size of the text in centimeters.
        transform : Transformation matrix that specifies the position and orientation of the text in model space.
        Returns the newly created CustomGraphicsText object or null in the case of failure.
        """
        return CustomGraphicsText()

    def addBRepBody(self, body):
        """
        Adds a new CustomGraphicsBRepBody object to this group. This displays a real or transient BRepBody object as custom graphics. No relationship exists back to the original input body so if it is changed, the custom graphics will not change. The body associated with the CustomGraphicsBRep body is a copy of the original input body. Equivalent Faces, Edges, and vertices can be found by using the indexes in the collection. For example if you have a face of the original body and find that it is at index 24 in the BRepFaces collection of that body, the equivalent face in the custom graphics body will also be at index 24. This works as long as the original body is not modified in any way.
        body : The real or transient BRepBody object to draw using custom graphics.
        Returns the newly created CustomGraphicsBRepBody object or null in the case of failure.
        """
        return CustomGraphicsBRepBody()

    count = property(_get_count, None, doc="Returns the number of graphics entities within the group.")


class CustomGraphicsLines(CustomGraphicsEntity):
    """
    Represents lines drawn in the graphics window.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsLines()

    def _set_coordinates(self, coordinates):
        pass

    def _get_coordinates(self):
        return CustomGraphicsCoordinates()

    def _set_indexList(self, indexList):
        pass

    def _get_indexList(self):
        return int()

    def _set_isLineStrip(self, isLineStrip):
        pass

    def _get_isLineStrip(self):
        return bool()

    def _set_lineStripLengths(self, lineStripLengths):
        pass

    def _get_lineStripLengths(self):
        return int()

    def _set_weight(self, weight):
        pass

    def _get_weight(self):
        return float()

    def _set_lineStyleScale(self, lineStyleScale):
        pass

    def _get_lineStyleScale(self):
        return float()

    def _set_isScreenSpaceLineStyle(self, isScreenSpaceLineStyle):
        pass

    def _get_isScreenSpaceLineStyle(self):
        return bool()

    def _set_lineStylePattern(self, lineStylePattern):
        pass

    def _get_lineStylePattern(self):
        return LineStylePatterns()

    coordinates = property(_get_coordinates, _set_coordinates,
                           doc="Gets and sets the CustomGraphicsCoordinates object that defines the coordinates of the vertices of the lines. A CustomGraphicsCoordinates object can be created using the static create method of the CustomGraphicsCoordinates class.")
    indexList = property(_get_indexList, _set_indexList,
                         doc="Gets and sets an array of integers that represent indices into the coordinates to define the order the coordinates are used to draw the lines. An empty array indicates that no index list is used and coordinates are used in the order they're provided in the provided CustomGraphicsCoordinates object.")
    isLineStrip = property(_get_isLineStrip, _set_isLineStrip,
                           doc="Defines if the coordinates are used to define a series of individual lines or a connected set of lines (line strip). If individual lines are drawn (this property is false), each pair of coordinates define a single line. If a line strip is drawn (this property is true), the first pair of coordinates define the first line and the third coordinate defines a line that connects to the second coordinate. The fourth coordinate creates a line connecting to the third coordinate, and so on.")
    lineStripLengths = property(_get_lineStripLengths, _set_lineStripLengths,
                                doc="If isLineStrip is true, this property defines the number of coordinates to use in the line strips. It is an array of integers that defines the number of coordinates for each line strip. An empty array indicates that a single line strip is to be drawn.")
    weight = property(_get_weight, _set_weight, doc="Defines the thickness of the line in pixels.")
    lineStyleScale = property(_get_lineStyleScale, _set_lineStyleScale,
                              doc="Defines the scale as it relates to how the line style is applied. The effect is to shrink or expand the line style as it is applied to the line. This does not affect the line width.")
    isScreenSpaceLineStyle = property(_get_isScreenSpaceLineStyle, _set_isScreenSpaceLineStyle,
                                      doc="Specifies if the line style is computed based on the screen or model space. The default is based on the screen which means the style is drawn the same regardless of how you zoom in or out of the view. That is the length of lines and spaces are based on pixels. If it is drawn relative to model space then the lines and spaces are defined in centimeters and will zooming in and out will change the apparent spacing.")
    lineStylePattern = property(_get_lineStylePattern, _set_lineStylePattern,
                                doc="The line style to apply to the line. The default is to draw a continuous line.")


class CustomGraphicsMesh(CustomGraphicsEntity):
    """
    Represents a custom triangle mesh drawn in the graphics window.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsMesh()

    def _set_coordinates(self, coordinates):
        pass

    def _get_coordinates(self):
        return CustomGraphicsCoordinates()

    def _set_normalVectors(self, normalVectors):
        pass

    def _get_normalVectors(self):
        return float()

    def _set_vertexIndexList(self, vertexIndexList):
        pass

    def _get_vertexIndexList(self):
        return int()

    def _set_normalIndexList(self, normalIndexList):
        pass

    def _get_normalIndexList(self):
        return int()

    def _set_textureCoordinates(self, textureCoordinates):
        pass

    def _get_textureCoordinates(self):
        return float()

    coordinates = property(_get_coordinates, _set_coordinates,
                           doc="Gets and sets the coordinates associated with this CustomGraphicsMesh.")
    normalVectors = property(_get_normalVectors, _set_normalVectors,
                             doc="Gets and sets the normal vectors of the mesh where there is a normal vector at each node. The normals are defined as an array of floats where they are the x, y, z components of each vector.")
    vertexIndexList = property(_get_vertexIndexList, _set_vertexIndexList,
                               doc="Gets and sets an array of indices that define which coordinate in the coordinate list is used for each vertex in the mesh. Each set of three indices defines a triagle. For example: Indices 0, 1, and 2 define the coordinates to use for the first triangle and indices 3, 4, and 5 define the coordinates for the second triangle, and so on.")
    normalIndexList = property(_get_normalIndexList, _set_normalIndexList,
                               doc="Gets and sets an array of indices that define which normal is associated with each vertex in the mesh. This is used to look-up the normal in the normalVectors array.")
    textureCoordinates = property(_get_textureCoordinates, _set_textureCoordinates,
                                  doc="Gets and sets the texture coordinates as an array of floats where they are the u,v components at each node. They are defined as an array of doubles where they are the u, v coordinates of each node. Defining texture coordinates for a mesh is optional.")


class CustomGraphicsPointSet(CustomGraphicsEntity):
    """
    Represents a set of one or more custom graphics points all of the same style.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsPointSet()

    def _set_coordinates(self, coordinates):
        pass

    def _get_coordinates(self):
        return CustomGraphicsCoordinates()

    def _set_indexList(self, indexList):
        pass

    def _get_indexList(self):
        return int()

    def _set_pointImage(self, pointImage):
        pass

    def _get_pointImage(self):
        return str()

    def _set_pointType(self, pointType):
        pass

    def _get_pointType(self):
        return CustomGraphicsPointTypes()

    coordinates = property(_get_coordinates, _set_coordinates,
                           doc="Gets and sets the coordinates used to define the position of the custom graphics points. If no indexList is specified, every coordinate will be drawn using a custom graphics point,")
    indexList = property(_get_indexList, _set_indexList,
                         doc="An list of indices that specify which coordinates from the coordinate list to draw points for. If this is an empty array, then all of the coordinates are used.")
    pointImage = property(_get_pointImage, _set_pointImage,
                          doc="Gets and sets the image that will be used to display the point if the point type is a custom image. The image will always be be billboarded. The file should be a png image and can use transparency. The filename can be a full path or a relative path that is relative to your runtime file. Setting this will automatically set the pointType to UserDefinedCustomGraphicsPointType. This property can also return an empty string in the case where a user defined image point is not being used.")
    pointType = property(_get_pointType, _set_pointType,
                         doc="Specifies which of the pre-defined point images to use. Attempting to set this property to UserDefinedCustomGraphicsPointType will fail. To change to a user defined point type you must set use the pointImage property to specify the image to use and this will have the side-effect of changing the value of this property to UserDefinedCustomGraphicsPointType.")


class CustomGraphicsSolidColorEffect(CustomGraphicsColorEffect):
    """
    One of the types of color effects that can be applied to a custom graphics entity. With this type of effect, the graphics entity will display as the single color without any lighting effects. For example, a sphere will display as a solid filled circle without any shading indicating it is actually spherical.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsSolidColorEffect()

    @staticmethod
    def create(color):
        """
        Statically creates a new CustomGraphicsSolidColorEffect object. This can be used as input when creating various color related custom graphics attributes. A solid color effect, colors the entity with a single color without any lighting effects. With this coloring effect, a sphere will display as a solid filled circle.
        color : The color to use for the solid color display. The opacity component of the color is ignored because the opacity of custom graphics is controlled seperately using an opacity attribute.
        Returns the created CustomGraphicsSolidColorEffect or null in case of a failure.
        """
        return CustomGraphicsSolidColorEffect()

    def _set_color(self, color):
        pass

    def _get_color(self):
        return core.Color()

    color = property(_get_color, _set_color,
                     doc="The color to use for the solid color display. The opacity component of the color is ignored because the opacity of custom graphics is controlled seperately using an opacity attribute.")


class CustomGraphicsText(CustomGraphicsEntity):
    """
    Represents text drawn in the graphics window. The default position of the text is at (0,0,0) and orientation is the text lying on the x-y plane. To reposition and reorient the text you can use the transformation property.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsText()

    def _set_formattedText(self, formattedText):
        pass

    def _get_formattedText(self):
        return str()

    def _set_font(self, font):
        pass

    def _get_font(self):
        return str()

    def _set_isItalic(self, isItalic):
        pass

    def _get_isItalic(self):
        return bool()

    def _set_isBold(self, isBold):
        pass

    def _get_isBold(self):
        return bool()

    def _set_isUnderline(self, isUnderline):
        pass

    def _get_isUnderline(self):
        return bool()

    def _set_isStrikeThrough(self, isStrikeThrough):
        pass

    def _get_isStrikeThrough(self):
        return bool()

    def _set_size(self, size):
        pass

    def _get_size(self):
        return float()

    def _get_width(self):
        return float()

    def _get_height(self):
        return float()

    formattedText = property(_get_formattedText, _set_formattedText,
                             doc="Gets and sets the formatted text definition. This is the full string, including the formatting information, that's used to define the displayed text.")
    font = property(_get_font, _set_font,
                    doc="Gets and sets the font used to display the text. This is the default font and applies to all of text unless there is a font override defined within the text.")
    isItalic = property(_get_isItalic, _set_isItalic,
                        doc="Specifies that the text displays using an italic style. This is the default italic style and applies to all of text unless there is a style override defined within the text.")
    isBold = property(_get_isBold, _set_isBold,
                      doc="Specifies that the text displays using a bold style. This is the default bold style and applies to all of text unless there is a style override defined within the text.")
    isUnderline = property(_get_isUnderline, _set_isUnderline,
                           doc="Specifies that the text displays using an underline style. This is the default underline style and applies to all of text unless there is a style override defined within the text.")
    isStrikeThrough = property(_get_isStrikeThrough, _set_isStrikeThrough,
                               doc="Specifies that the text displays using a strike through style. This is the default strike through style and applies to all of text unless there is a style override defined within the text.")
    size = property(_get_size, _set_size,
                    doc="Gets and sets the size of the text in centimeters. This is the default size and applies to all of text unless there is a size override defined within the text.")
    width = property(_get_width, None,
                     doc="The actual width of the text in centimeters. This is useful when you want to position several GraphicsText objects together.")
    height = property(_get_height, None,
                      doc="The actual height of the text in centimeters. This is useful when you want to position several GraphicsText objects together.")


class CustomGraphicsVertexColorEffect(CustomGraphicsColorEffect):
    """
    One of the types of color effects that can be applied to a custom graphics entity. With this type of effect, the graphics entity will display using the colors associated with the vertices of the mesh in the CustomGraphicsCoordinates object.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CustomGraphicsVertexColorEffect()

    @staticmethod
    def create():
        """
        Statically creates a new CustomGraphicsVertexColorEffect object.
        Returns the created CustomGraphicsVertexColorEffect or null in case of a failure.
        """
        return CustomGraphicsVertexColorEffect()


class CutPasteBody(Feature):
    """
    Object that represents an existing Cut/Paste Body feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CutPasteBody()

    def _get_sourceBody(self):
        return core.ObjectCollection()

    sourceBody = property(_get_sourceBody, None,
                          doc="Returns the bodies that were cut to create the result bodies of this feature. An ObjectCollection is returned that will contain the original bodies. It's possible that the collection can be empty or contain less than the number of bodies originally copied. This happens in the case where a body has been deleted or consumed by some other operation. If you roll the timeline to a point immediately before or after the feature was created you can access the bodies. Returns the bodies that were cut to create the result bodies of this feature. An ObjectCollection is returned that will contain the original bodies. Because the body is removed as a result of this operation the cut bodies will never be available after the feature has been created. If you roll the timeline to a point immediately before the feature was created you can access the bodies.")


class CylinderFeature(Feature):
    """
    Object that represents an existing cylinder feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CylinderFeature()


class CylindricalJointMotion(JointMotion):
    """
    Represents the set of information specific to a cylindrical joint.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return CylindricalJointMotion()

    def _set_rotationAxis(self, rotationAxis):
        pass

    def _get_rotationAxis(self):
        return JointDirections()

    def _get_rotationAxisVector(self):
        return core.Vector3D()

    def _set_customRotationAxisEntity(self, customRotationAxisEntity):
        pass

    def _get_customRotationAxisEntity(self):
        return core.Base()

    def _set_rotationValue(self, rotationValue):
        pass

    def _get_rotationValue(self):
        return float()

    def _get_rotationLimits(self):
        return JointLimits()

    def _set_slideValue(self, slideValue):
        pass

    def _get_slideValue(self):
        return float()

    def _get_slideLimits(self):
        return JointLimits()

    rotationAxis = property(_get_rotationAxis, _set_rotationAxis,
                            doc="Gets and sets the direction of the axis of rotation. This can be set to XAxisJointDirection, YAxisJointDirection, or ZAxisJointDirection. It can return those three directions and CustomJointDirection. If this returns CustomJointDirection then the customRotationAxisEntity will return an entity that defines the axis. If there is a custom rotation axis defined and this property is set to one of the three standard axes, the custom rotation will be removed and customRotationAxisEntity will return null.")
    rotationAxisVector = property(_get_rotationAxisVector, None,
                                  doc="Returns the direction of the rotation axis. This property will return null in the case where the CylindricalJointMotion object was obtained from a JointInput object.")
    customRotationAxisEntity = property(_get_customRotationAxisEntity, _set_customRotationAxisEntity,
                                        doc="This property can be set using various types of entities that can infer an axis. For example, a linear edge, sketch line, planar face, and cylindrical face. This property is only valid in the case where the rotationAxis property returns CustomJointDirection. Setting this property will automatically set the rotationAxis property to CustomJointDirection.")
    rotationValue = property(_get_rotationValue, _set_rotationValue,
                             doc="Gets and sets the rotation value. This is in radians. Setting this value is the equivalent of using the Drive Joints command.")
    rotationLimits = property(_get_rotationLimits, None,
                              doc="Returns a JointLimits object that defines the rotation limits for this joint. Use the functionality of the returned JointLimits object to get, set, and modify the joint limits.")
    slideValue = property(_get_slideValue, _set_slideValue,
                          doc="Gets and sets the slide value. This is in centimeters. Setting this value is the equivalent of using the Drive Joints command.")
    slideLimits = property(_get_slideLimits, None,
                           doc="Returns a JointLimits object that defines the slide limits for this joint. Use the functionality of the returned JointLimits object to get, set, and modify the joint limits.")


class DeleteFaceFeature(Feature):
    """
    Object that represents an existing DeleteFaceFeature object in a design. The SurfaceDeleteFaceFeature and DeleteFaceFeature differ in that the SurfaceDeleteFaceFeature can delete any face without any restrictions. If the body is a solid, it will become a surface when the first face is deleted. The specified face is deleted without any other changes being made to the body. The DeleteFaceFeature deletes the specified face and also modifies the other faces in the body to heal or fill in the area of the deleted face. This means that a solid body will remain solid.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return DeleteFaceFeature()

    def _set_deletedFaces(self, deletedFaces):
        pass

    def _get_deletedFaces(self):
        return BRepFace()

    def _get_nativeObject(self):
        return DeleteFaceFeature()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this is not the NativeObject.
        """
        return DeleteFaceFeature()

    deletedFaces = property(_get_deletedFaces, _set_deletedFaces,
                            doc="Gets and sets the set of faces that are deleted by this feature. To be able to use this property to both get and set the faces, you need to first roll the timeline to immediately before this feature. This can be accomplished using the following code where thisFeature is a reference to a DeleteFaceFeature: thisFeature.timelineObject.rollTo(True) Setting this property can fail if Fusion 360 is unable to heal the body after deleting the specified faces.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class DistanceAndAngleChamferTypeDefinition(ChamferTypeDefinition):
    """
    Provides information to create a chamfer that is defined by a distance from the edge and an angle.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return DistanceAndAngleChamferTypeDefinition()

    def _get_distance(self):
        return ModelParameter()

    def _get_angle(self):
        return ModelParameter()

    distance = property(_get_distance, None,
                        doc="Returns the parameter controlling the distance. You can edit the distance by editing the value of the parameter object.")
    angle = property(_get_angle, None,
                     doc="Returns the parameter controlling the angle. You can edit the angle by editing the value of the parameter object.")


class DistanceExtentDefinition(ExtentDefinition):
    """
    Defines the inputs for a distance ExtentDefinition object. This feature extent type defines the distance as well as whether the extent is symmetric or in only one direction. If the extent is not symmetric, a positive or negative distance can be used to control the direction. For a hole, the IsSymmetric property value will always be false.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return DistanceExtentDefinition()

    @staticmethod
    def create(distance):
        """
        Statically creates a new DistanceExtentDefinition object. This is used as input when defining the extents of a feature to be a specified distance.
        distance : A ValueInput that defines the distance of the extrusion.
        Returns the newly created DistanceExtentDefinition or null in the case of failure.
        """
        return DistanceExtentDefinition()

    def _set_isSymmetric(self, isSymmetric):
        pass

    def _get_isSymmetric(self):
        return bool()

    def _get_distance(self):
        return ModelParameter()

    isSymmetric = property(_get_isSymmetric, _set_isSymmetric,
                           doc="Gets and sets if the distance extent is symmetric or not For a hole this property will always return false and setting it is ignored.")
    distance = property(_get_distance, None,
                        doc="Returns the parameter controlling the distance. You can edit the distance by editing the value of the parameter object.")


class DraftFeature(Feature):
    """
    Object that represents an existing draft feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return DraftFeature()

    def _set_inputFaces(self, inputFaces):
        pass

    def _get_inputFaces(self):
        return BRepFace()

    def _set_plane(self, plane):
        pass

    def _get_plane(self):
        return core.Base()

    def _set_isTangentChain(self, isTangentChain):
        pass

    def _get_isTangentChain(self):
        return bool()

    def _set_isDirectionFlipped(self, isDirectionFlipped):
        pass

    def _get_isDirectionFlipped(self):
        return bool()

    def _get_draftDefinition(self):
        return ExtentDefinition()

    def _get_nativeObject(self):
        return DraftFeature()

    def setSingleAngle(self, isSymmetric, angle):
        """
        Changes the definition of the feature so that a single angle is used for all drafts. If the isSymmetric is true then the faces are split along the parting plane and drafted independently using the same angle.
        isSymmetric : Set to 'true' if the faces are to be split along the plane and drafted symmetrically. This will have the side effect of setting the isSymmetric property to the same value.
        angle : The ValueInput object that defines the angle of the draft. This can be a positive or negative value which will affect the direction of the draft along with the isDirectionFlipped property.
        Returns true if successful
        """
        return bool()

    def setTwoAngles(self, angleOne, angleTwo):
        """
        Changes the definition of the feature so that the surfaces are split along the draft plane and the faces on each side of the plane are drafted independently from the other side.
        angleOne : The ValueInput object that defines the angle for the faces on the first side of the draft plane.
        angleTwo : The ValueInput object that defines the angle for the faces on the second side of the draft plane.
        Returns true if successful
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return DraftFeature()

    inputFaces = property(_get_inputFaces, _set_inputFaces,
                          doc="Gets and sets the input faces. If isTangentChain is true, all the faces that are tangentially connected to the input faces (if any) will also be included.")
    plane = property(_get_plane, _set_plane,
                     doc="Gets and sets the plane that defines the direction in which the draft is applied. This can be a planar BrepFace, or a ConstructionPlane.")
    isTangentChain = property(_get_isTangentChain, _set_isTangentChain,
                              doc="Gets and sets if any faces that are tangentially connected to any of the input faces will also be included in setting InputEntities. It defaults to true.")
    isDirectionFlipped = property(_get_isDirectionFlipped, _set_isDirectionFlipped,
                                  doc="Gets and sets if the direction of the draft is flipped.")
    draftDefinition = property(_get_draftDefinition, None,
                               doc="Gets the definition object that specifies how the draft is defined. Modifying the definition object will cause the draft to recompute. This can return either an AngleExtentDefinition or TwoSidesAngleExtentDefinition object. This property returns nothing in the case where the feature is non-parametric. Use this property to access the parameters controlling the draft and whether the draft is symmetric or not.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class EqualConstraint(GeometricConstraint):
    """
    An equal constraint in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return EqualConstraint()

    def _get_curveOne(self):
        return SketchCurve()

    def _get_curveTwo(self):
        return SketchCurve()

    def _get_nativeObject(self):
        return EqualConstraint()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return EqualConstraint()

    curveOne = property(_get_curveOne, None, doc="Returns the first curve.")
    curveTwo = property(_get_curveTwo, None, doc="Returns the second curve.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class EqualDistanceChamferTypeDefinition(ChamferTypeDefinition):
    """
    Provides information to create a chamfer that is defined by a single distance and has an equal offset from the edge.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return EqualDistanceChamferTypeDefinition()

    def _get_distance(self):
        return ModelParameter()

    distance = property(_get_distance, None,
                        doc="Returns the parameter controlling the distance. You can edit the distance by editing the value of the parameter object.")


class ExtendFeature(Feature):
    """
    Object that represents an existing extend feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ExtendFeature()

    def _get_edges(self):
        return core.ObjectCollection()

    def _get_distance(self):
        return ModelParameter()

    def _set_extendType(self, extendType):
        pass

    def _get_extendType(self):
        return SurfaceExtendTypes()

    def _get_isChainingEnabled(self):
        return bool()

    def _get_nativeObject(self):
        return ExtendFeature()

    def setInputEntities(self, edges, isChainingEnabled):
        """
        Sets the edges for the extend feature
        edges : The surface edges to extend. Only the surface edges from an open body can be extended. The edges must all be from the same open body.
        isChainingEnabled : An optional boolean argument whose default is true. If this argument is set to true, all edges that are tangent or curvature continuous, and end point connected, will be found automatically and extended.
        Returns true if successful
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this is not the NativeObject.
        """
        return ExtendFeature()

    edges = property(_get_edges, None,
                     doc="Gets the edges that were extended. In many cases the extend operation results in the edges being consumed so they're no longer available after the feature is created. in this case you need to reposition the timeline marker to just before this feature when the edges do exist.")
    distance = property(_get_distance, None,
                        doc="Returns the parameter controlling the extend distance. You can edit the distance by editing the value of the parameter object.")
    extendType = property(_get_extendType, _set_extendType, doc="Gets and sets surface extend type to use")
    isChainingEnabled = property(_get_isChainingEnabled, None,
                                 doc="Gets if all edges that are tangent or curvature continuous, and end point connected, will be found automatically and extended.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class ExtrudeFeature(Feature):
    """
    Object that represents an existing extrude feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ExtrudeFeature()

    def _set_profile(self, profile):
        pass

    def _get_profile(self):
        return core.Base()

    def _get_taperAngle(self):
        return ModelParameter()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return FeatureOperations()

    def _get_extentDefinition(self):
        return ExtentDefinition()

    def _get_startFaces(self):
        return BRepFaces()

    def _get_endFaces(self):
        return BRepFaces()

    def _get_sideFaces(self):
        return BRepFaces()

    def _get_nativeObject(self):
        return ExtrudeFeature()

    def _get_isSolid(self):
        return bool()

    def _set_startExtent(self, startExtent):
        pass

    def _get_startExtent(self):
        return ExtentDefinition()

    def _set_extentOne(self, extentOne):
        pass

    def _get_extentOne(self):
        return ExtentDefinition()

    def _set_extentTwo(self, extentTwo):
        pass

    def _get_extentTwo(self):
        return ExtentDefinition()

    def _get_taperAngleOne(self):
        return ModelParameter()

    def _get_taperAngleTwo(self):
        return ModelParameter()

    def _get_hasTwoExtents(self):
        return bool()

    def _set_participantBodies(self, participantBodies):
        pass

    def _get_participantBodies(self):
        return BRepBody()

    def _get_extentType(self):
        return FeatureExtentTypes()

    def _get_symmetricExtent(self):
        return SymmetricExtentDefinition()

    def setDistanceExtent(self, isSymmetric, distance):
        """
        Sets the extrusion extents option to 'Distance'.
        isSymmetric : Set to 'true' for an extrusion symmetrical about the profile plane
        distance : ValueInput object that defines the extrude distance. If the isSymmetric argument is 'false', a positive or negative distance can be used to control the direction.
        Returns true if successful
        """
        return bool()

    def setTwoSidesDistanceExtent(self, distanceOne, distanceTwo):
        """
        Sets the extrusion extents option to 'Two Side'. This method will fail in the case of a non-parametric extrusion.
        distanceOne : ValueInput object that defines the extrude distance for the first side.
        distanceTwo : ValueInput object that defines the extrude distance for the second side.
        Returns true if successful
        """
        return bool()

    def setAllExtent(self, direction):
        """
        Sets the extrusion extents option to 'All' (i.e. the extrusion is through-all, in both directions.) This method will fail in the case of a non-parametric extrusion.
        direction : The direction can be either positive, negative, or symmetric.
        Returns true if successful
        """
        return bool()

    def setOneSideToExtent(self, toEntity, matchShape, directionHint):
        """
        Sets the extrusion Direction option to 'One Side' and the Extents option to 'To' (a specified face)
        toEntity : The entity that defines the 'to' extent. The valid types of entities can vary depending on the type of feature this is being used with. For an extrude it can be a BRepBody, BRepFace, BRepVertex, ConstructionPlane, or ConstructionPoint.
        matchShape : If the matchShape argument is 'true', the toEntity is extended to fully intersect the extrusion.
        directionHint : Specifies the direction of the extrusion. This is only used in the case where there are two possible solutions and the extrusion can hit the toEntity in either direction. An example is if the profile of the extrusion is within a hole. The extrusion will intersect the cylinder of the hole in either direction. Typically there is only a single solution and the direction is determined automatically.
        Returns true if successful.
        """
        return bool()

    def setTwoSidesToExtent(self, toEntityOne, toEntityTwo, matchShape):
        """
        Set the extrusion Direction option to 'Two Side' This method will fail in the case of a non-parametric extrusion.
        toEntityOne : The first entity that defines the 'to' extent. The valid types of entities can vary depending on the type of feature this is being used with. For an extrude it can be a BRepBody, BRepFace, BRepVertex, ConstructionPlane, or ConstructionPoint.
        toEntityTwo : The second entity that defines the 'to' extent. The valid types of entities can vary depending on the type of feature this is being used with. For an extrude it can be a BRepBody, BRepFace, BRepVertex, ConstructionPlane, or ConstructionPoint.
        matchShape : If the matchShape argument is 'true', the toEntity is extended to fully intersect the extrusion.
        Returns true if successful.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return ExtrudeFeature()

    def setOneSideExtent(self, extent, direction, taperAngle):
        """
        Redefines the extrusion to go in one direction from the profile. The extent of the extrusion is defined by the extent argument.
        extent : An ExtentDefinition object that defines how the extent of the extrusion is defined. This can be a specified distance (DistanceExtentDefinition), to an entity (ToEntityExtent), or through-all (AllExtentDefinition). These objects can be obtained by using the static create method on the appropriate class.
        direction : Specifies the direction of the extrusion. PositiveExtentDirection and NegativeExtentDirection are valid values. PositiveExtentDirection is in the same direction as the normal of the profile's parent sketch plane.
        taperAngle : Optional argument that specifies the taper angle. If omitted a taper angle of 0 is used.
        Returns true is setting the input to a one sided extent was successful.
        """
        return bool()

    def setTwoSidesExtent(self, sideOneExtent, sideTwoExtent, sideOneTaperAngle, sideTwoTaperAngle):
        """
        Redefines the extrusion to go in both directions from the profile. The extent is defined independently for each direction using the input arguments.
        sideOneExtent : An ExtentDefinition object that defines how the extent of the extrusion towards side one is defined. This can be a specified distance (DistanceExtentDefinition), to an entity (ToEntityExtent), or through-all (AllExtentDefinition). These objects can be obtained by using the static create method on the appropriate class.
        sideTwoExtent : An ExtentDefinition object that defines how the extent of the extrusion towards side two is defined. This can be a specified distance (DistanceExtentDefinition), to an entity (ToEntityExtent), or through-all (AllExtentDefinition). These objects can be obtained by using the static create method on the appropriate class.
        sideOneTaperAngle : Optional argument that specifies the taper angle for side one. If omitted a taper angle of 0 is used.
        sideTwoTaperAngle : Optional argument that specifies the taper angle for side two. If omitted a taper angle of 0 is used.
        Returns true, if the call was successful.
        """
        return bool()

    def setSymmetricExtent(self, distance, isFullLength, taperAngle):
        """
        Redefines the extrusion to go symmetrically in both directions from the profile.
        distance : The distance of the extrusions. This is either the full length of half of the length of the final extrusion depending on the value of the isFullLength property.
        isFullLength : Defines if the value defines the full length of the extrusion or half of the length. A value of true indicates it defines the full length.
        taperAngle : Optional argument that specifies the taper angle. The same taper angle is used for both sides for a symmetric extrusion. If omitted a taper angle of 0 is used.
        Returns true, if the call was successful.
        """
        return bool()

    profile = property(_get_profile, _set_profile,
                       doc="Gets and sets the profiles or planar faces used to define the shape of the extrude. This property can return or be set with a single Profile, a single planar face, or an ObjectCollection consisting of multiple profiles and planar faces. When an ObjectCollection is used all of the profiles and faces must be co-planar. When setting this property of a surface (non-solid) extrusion, you can use the createOpenProfile and createBRepEdgeProfile methods of the Component object to create an open profile. This property returns null in the case where the feature is non-parametric.")
    taperAngle = property(_get_taperAngle, None,
                          doc="Returns the parameter controlling the taper angle of the extrusion. To edit the taper angle use properties on the parameter to edit its value. This property returns nothing in the case where the feature is non-parametric.")
    operation = property(_get_operation, _set_operation,
                         doc="Gets and sets the type of operation performed by the extrusion.")
    extentDefinition = property(_get_extentDefinition, None,
                                doc="Gets the ExtentDefinition object that defines the extent of the extrude. Modifying the properties of the returned extent definition object will cause the extrude to recompute. Various types of objects can be returned depending on the type of extent currently defined for the extrusion. This property returns nothing in the case where the feature is non-parametric.")
    startFaces = property(_get_startFaces, None,
                          doc="Property that returns the set of faces that cap the end of the extrusion and are coincident with the sketch plane. In the case of a symmetric extrusion, these faces are the ones on the positive normal side of the sketch plane. In the case where there are no start faces, this property will return null.")
    endFaces = property(_get_endFaces, None,
                        doc="Property that returns the set of faces that cap the end of the extrusion, opposite the start faces. In the case where there are no end faces, this property will return null.")
    sideFaces = property(_get_sideFaces, None,
                         doc="Property that returns all of the side faces (i.e. those running perpendicular to the extrude direction) of the feature.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    isSolid = property(_get_isSolid, None,
                       doc="Indicates if this feature was initially created as a solid or a surface.")
    startExtent = property(_get_startExtent, _set_startExtent,
                           doc="Gets and sets the extent used to define the start of the extrusion. You can set this property with either a ProfilePlaneStartDefinition, ProfilePlaneWithOffsetStartDefinition or a EntityStartDefinition object. You can get any of those objects by using the static create method on the class.")
    extentOne = property(_get_extentOne, _set_extentOne,
                         doc="Gets and sets the extent used for a single sided extrude or side one of a two-sided extrusion. Valid inputs are DistanceExtentDefinition, ToEntityExtentDefinition, and ThroughAllExtentDefinition object, which can be created statically using the create method on the classes.")
    extentTwo = property(_get_extentTwo, _set_extentTwo,
                         doc="Gets and sets the extent used for side two of the extrusion. If the extrude is a single sided extrude this property will return null and will fail if set. The hasTwoExtents property can be used to determine if there are two sides or not. When setting this property, valid inputs are DistanceExtentDefinition, ToEntityExtentDefinition, and ThroughAllExtentDefinition object, which can be created statically using the create method on the classes.")
    taperAngleOne = property(_get_taperAngleOne, None,
                             doc="Gets the parameter controlling the taper angle for a single sided extrusion or side one of a two-sided extrusion. To edit the angle, use properties on the parameter to change the value of the parameter.")
    taperAngleTwo = property(_get_taperAngleTwo, None,
                             doc="Gets the parameter controlling the taper angle for side two of a two-sided extrusion. if the extrusion is single-sided, this property will return null. The hasTwoExtents property can be used to determine if there are two sides or not. To edit the angle, use properties on the parameter to change the value of the parameter.")
    hasTwoExtents = property(_get_hasTwoExtents, None,
                             doc="Property that indicates if the extrusion is a single or two-sided extrusion. If false, the extentTwo and taperAngleTwo properties should not be used.")
    participantBodies = property(_get_participantBodies, _set_participantBodies,
                                 doc="Gets and sets the list of bodies that will participate in the feature when the operation is a cut or intersection. When setting or getting this property, you must roll the timeline back to just before the feature so that the model is in the state just before the feature is computed.")
    extentType = property(_get_extentType, None,
                          doc="Returns a value indicating how the extent is defined for this extrude.")
    symmetricExtent = property(_get_symmetricExtent, None,
                               doc="If the current extent of the feautre is defined as a symmetric extent, this property returns the SymmericExtentDefinition object that provides access to the information defining the symmetric extent. If the current extent is not symmetric, this property returns null. You can determine the type of extent by using the extentType property. To change the extent of a feature to symmetric extent you can use the setSymmetricExtent method.")


class FilletFeature(Feature):
    """
    Object that represents an existing fillet feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return FilletFeature()

    def _get_edgeSets(self):
        return FilletEdgeSets()

    def _set_isG2(self, isG2):
        pass

    def _get_isG2(self):
        return bool()

    def _set_isRollingBallCorner(self, isRollingBallCorner):
        pass

    def _get_isRollingBallCorner(self):
        return bool()

    def _set_isTangentChain(self, isTangentChain):
        pass

    def _get_isTangentChain(self):
        return bool()

    def _get_nativeObject(self):
        return FilletFeature()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return FilletFeature()

    edgeSets = property(_get_edgeSets, None, doc="Returns the edge sets associated with this fillet.")
    isG2 = property(_get_isG2, _set_isG2,
                    doc="Gets and sets if the fillet uses the G2 (curvature-continuity) surface quality option .")
    isRollingBallCorner = property(_get_isRollingBallCorner, _set_isRollingBallCorner,
                                   doc="Gets and sets if a rolling ball solution is to be used in any corners.")
    isTangentChain = property(_get_isTangentChain, _set_isTangentChain,
                              doc="Gets and sets whether or not edges that are tangentially connected to the input edges (if any) will also be filleted.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of its parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class FormFeature(Feature):
    """
    Object that represents an existing Form feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return FormFeature()

    def _get_tSplineBodies(self):
        return TSplineBodies()

    def startEdit(self):
        """
        Set the user-interface so that the form body is in edit mode.
        Returns true if successful.
        """
        return bool()

    def finishEdit(self):
        """
        Exits from edit mode in the user-interface. If this form feature in not in edit mode, then nothing happens.
        Returns true if successful.
        """
        return bool()

    tSplineBodies = property(_get_tSplineBodies, None,
                             doc="Returns a TSplineBodies collection where you can access any existing T-Spline bodies and through it create new T-Spline bodies.")


class FromEntityStartDefinition(ExtentDefinition):
    """
    A definition object that is used to define a feature whose start is defined by a specified construction plane or face. If a face is specified it must be large enough to completely contain the projected profile.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return FromEntityStartDefinition()

    @staticmethod
    def create(entity, offset):
        """
        Statically creates a new FromEntityStartDefinition object. This is used as input when create a new feature and defining the starting condition.
        entity : An input construction plane or face that defines the start of the feature. If a face is specified it must be large enough to completely contain the projected profile.
        offset : An input ValueInput objects that defines the offset distance from the specified entity. The offset can be positive or negative. A positive value indicates an offset in the same direction as the positive normal direction of the face.
        Returns the newly created FromEntityStartDefinition or null in the case of a failure.
        """
        return FromEntityStartDefinition()

    def _get_offset(self):
        return core.Base()

    def _set_entity(self, entity):
        pass

    def _get_entity(self):
        return core.Base()

    offset = property(_get_offset, None,
                      doc="Gets the currently defined offset value. If the FromEntityStartDefinition object was created statically and is not associated with a feature, this will return a ValueInput object. if the FromEntityStartDefinition is associated with an existing feature, this will return the parameter that was created when the feature was created. To edit the offset, use properties on the parameter to change the value of the parameter.")
    entity = property(_get_entity, _set_entity, doc="Gets and sets the entity defining the start of the feature.")


class FusionArchiveExportOptions(ExportOptions):
    """
    Defines that a Fusion 360 Archive export is to be done and specifies the various options.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return FusionArchiveExportOptions()


class HoleFeature(Feature):
    """
    Object that represents an existing hole feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return HoleFeature()

    def _get_position(self):
        return core.Point3D()

    def _get_direction(self):
        return core.Vector3D()

    def _get_holeType(self):
        return HoleTypes()

    def _get_holeDiameter(self):
        return ModelParameter()

    def _get_tipAngle(self):
        return ModelParameter()

    def _get_counterboreDiameter(self):
        return ModelParameter()

    def _get_counterboreDepth(self):
        return ModelParameter()

    def _get_countersinkDiameter(self):
        return ModelParameter()

    def _get_countersinkAngle(self):
        return ModelParameter()

    def _set_isDefaultDirection(self, isDefaultDirection):
        pass

    def _get_isDefaultDirection(self):
        return bool()

    def _get_extentDefinition(self):
        return ExtentDefinition()

    def _get_endFaces(self):
        return BRepFaces()

    def _get_sideFaces(self):
        return BRepFaces()

    def _get_holePositionDefinition(self):
        return HolePositionDefinition()

    def _get_nativeObject(self):
        return HoleFeature()

    def _set_participantBodies(self, participantBodies):
        pass

    def _get_participantBodies(self):
        return BRepBody()

    def setToSimple(self):
        """
        Calling this method will change the hole to a simple hole.
        Returns true if changing the hole was successful.
        """
        return bool()

    def setToCounterbore(self, counterboreDiameter, counterboreDepth):
        """
        Calling this method will change the hole to a counterbore hole.
        counterboreDiameter : A ValueInput object that defines the counterbore diameter. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '3 in'). If no units are specified it is interpreted using the current default units for length.
        counterboreDepth : A ValueInput object that defines the counterbore depth. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '3 in'). If no units are specified it is interpreted using the current default units for length.
        Returns true if changing the hole was successful.
        """
        return bool()

    def setToCountersink(self, countersinkDiameter, countersinkAngle):
        """
        Calling this method will change the hole to a countersink hole.
        countersinkDiameter : A ValueInput object that defines the countersink diameter. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '3 in'). If no units are specified it is interpreted using the current default units for length.
        countersinkAngle : A ValueInput object that defines the countersink angle. If the ValueInput uses a real then it is interpreted as radians. If it is a string then the units can be defined as part of the string (i.e. '120 deg'). If no units are specified it is interpreted using the current default units for length.
        Returns true if changing the hole was successful.
        """
        return bool()

    def setDistanceExtent(self, distance):
        """
        Defines the depth of the hole using a specific distance.
        distance : The depth of the hole. If a real is specified the value is in centimeters. If a string is specified the units are derived from the string. If no units are specified, the default units of the document are used.
        Returns true if setting the extent was successful.
        """
        return bool()

    def setAllExtent(self, direction):
        """
        Defines the extent of the hole to be through-all. The direction can be either positive, negative.
        direction : The direction of the hole relative to the normal of the sketch plane.
        Returns true if successful.
        """
        return bool()

    def setOneSideToExtent(self, toEntity, matchShape, directionHint):
        """
        Sets the extent of the hole to be from the sketch plane to the specified 'to' face.
        toEntity : The entity that defines the 'to' extent. The valid types of entities can vary depending on the type of feature this is being used with. For a hole it can be a BRepBody, BRepFace, BRepVertex, ConstructionPlane, or ConstructionPoint.
        matchShape : Indicates if the hole is not contained on the face that the hole should match the shape of the entity as if it extended beyond it's current boundaries.
        directionHint : Specifies the direction of the hole. This is only used in the case where there are two possible solutions and the hole can hit the toEntity in either direction. Typically there is only a single solution and the direction is determined automatically.
        Returns true if successful.
        """
        return bool()

    def setPositionByPoint(self, planarEntity, point):
        """
        Redefines the position of a the hole using a point. The point can be a vertex on the face or it can be a Point3D object to define any location on the face. If a Point3D object is provided it will be projected onto the plane along the planes normal. The orientation of the hole is defined by the planar face or construction plane. If a vertex is used, the position of the hole is associative to that vertex. If a Point3D object is used the position of the hole is not associative.
        planarEntity : The planar BRepFace or ConstructionPlane object that defines the orientation of the hole. The natural direction of the hole will be opposite the normal of the face or construction plane.
        point : A Point3D object or vertex that defines the position of the hole. The point will be projected onto the plane along the normal of the plane.
        Returns true if successful.
        """
        return bool()

    def setPositionAtCenter(self, planarEntity, centerEdge):
        """
        Redefines the position of the hole at the center of a circular or elliptical edge of the face.
        planarEntity : The planar BRepFace or ConstructionPlane object that defines the orientation of the hole. The natural direction of the hole will be opposite the normal of the face or construction plane.
        centerEdge : A circular or elliptical edge whose center point will be the position of the hole.
        Returns true if successful.
        """
        return bool()

    def setPositionBySketchPoint(self, sketchPoint):
        """
        Redefines the position and orienation of the hole using a sketch point.
        sketchPoint : The sketch point that defines the position of the hole. The orientation is inferred from the normal of the point's parent sketch. The natural direction will be opposite the normal of the sketch.
        Returns true if successful.
        """
        return bool()

    def setPositionBySketchPoints(self, sketchPoints):
        """
        Redefines the position and orientation of the hole using a set of points.
        sketchPoints : A collection of sketch points that defines the positions of the holes. The orientation is inferred from the normal of the point's parent sketch. The natural direction will be opposite the normal of the sketch. All of the points must be in the same sketch.
        Returns true if successful.
        """
        return bool()

    def setPositionByPlaneAndOffsets(self, planarEntity, point, edgeOne, offsetOne, edgeTwo, offsetTwo):
        """
        Redefines the orientation of the hole using a planar face or construction plane. The position of the hole is defined by the distance from one or two edges.
        planarEntity : The planar BRepFace or ConstructionPlane object that defines the orientation of the hole. The natural direction of the hole will be opposite the normal of the face or construction plane.
        point : A Point3D object that defines the approximate initial position of the hole. The point will be projected onto the plane. This point should be close to the final position of the hole and is used to determine which solution out of several possible solutions should be chosen for the hole location.
        edgeOne : A linear BRepEdge object that the position of the hole will be measured from. The position of the hole will be measured along a perpendicular from this edge.
        offsetOne : A ValueInput object that defines the offset distance from edgeOne. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '3 in'). If no units are specified it is interpreted using the current default units for length.
        edgeTwo : You can optionally define a second edge and offset to specify the position of the hole. If you use a second edge it has the same requirements as the edgeOne argument. If you provide a second edge you must also provide the offsetTwo argument.
        offsetTwo : If edgeTwo is defined, you must provide this argument which is a ValueInput object that defines the offset from the edgeTwo. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '3 in'). If no units are specified it is interpreted using the current default units for length.
        Returns true if successful.
        """
        return bool()

    def setPositionOnEdge(self, planarEntity, edge, position):
        """
        Redefines the position and orientation of the hole to be on the start, end or center of an edge.
        planarEntity : The planar BRepFace or ConstructionPlane object that defines the orientation of the hole and start of the hole. The natural direction of the hole will be opposite the normal of the face or construction plane.
        edge : The edge to position the hole on.
        position : The position along the edge to place the hole.
        Returns true if successful.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return HoleFeature()

    position = property(_get_position, None, doc="Returns the position of the hole.")
    direction = property(_get_direction, None, doc="Returns the direction of the hole.")
    holeType = property(_get_holeType, None, doc="Returns the current type of hole this feature represents.")
    holeDiameter = property(_get_holeDiameter, None,
                            doc="Returns the model parameter controlling the hole diameter. The diameter of the hole can be edited through the returned parameter object.")
    tipAngle = property(_get_tipAngle, None,
                        doc="Returns the model parameter controlling the angle of the tip of the hole. The tip angle of the hole can be edited through the returned parameter object.")
    counterboreDiameter = property(_get_counterboreDiameter, None,
                                   doc="Returns the model parameter controlling the counterbore diameter. This will return null in the case the hole type is not a counterbore. The diameter of the counterbore can be edited through the returned parameter.")
    counterboreDepth = property(_get_counterboreDepth, None,
                                doc="Returns the model parameter controlling the counterbore depth. This will return null in the case the hole type is not a counterbore. The depth of the counterbore can be edited through the returned parameter.")
    countersinkDiameter = property(_get_countersinkDiameter, None,
                                   doc="Returns the model parameter controlling the countersink diameter. This will return null in the case the hole type is not a countersink. The diameter of the countersink can be edited through the returned parameter.")
    countersinkAngle = property(_get_countersinkAngle, None,
                                doc="Returns the model parameter controlling the countersink angle. This will return null in the case the hole type is not a countersink. The angle of the countersink can be edited through the returned parameter.")
    isDefaultDirection = property(_get_isDefaultDirection, _set_isDefaultDirection,
                                  doc="Gets and sets if the hole is in the default direction or not.")
    extentDefinition = property(_get_extentDefinition, None,
                                doc="Gets the definition object that is defining the extent of the hole. Modifying the definition object will cause the hole to recompute. The extent type of a hole is currently limited to a distance extent.")
    endFaces = property(_get_endFaces, None,
                        doc="Property that returns the faces at the bottom of the hole. This will typically be a single face but could return more than one face in the case where the bottom of the hole is uneven.")
    sideFaces = property(_get_sideFaces, None, doc="Property that returns all of the side faces of the hole.")
    holePositionDefinition = property(_get_holePositionDefinition, None,
                                      doc="Returns a HolePositionDefinition object that provides access to the information used to define the position of the hole. This returns null in the case where IsParametric is false.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    participantBodies = property(_get_participantBodies, _set_participantBodies,
                                 doc="Gets and sets the list of bodies that will participate in the feature when the operation is a cut or intersection. When setting or getting this property, you must roll the timeline back to just before the feature so that the model is in the state just before the feature is computed.")


class HorizontalConstraint(GeometricConstraint):
    """
    A horizontal constraint in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return HorizontalConstraint()

    def _get_line(self):
        return SketchLine()

    def _get_nativeObject(self):
        return HorizontalConstraint()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return HorizontalConstraint()

    line = property(_get_line, None, doc="Returns the line being constrained.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class HorizontalPointsConstraint(GeometricConstraint):
    """
    A horizontal constraint between two points in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return HorizontalPointsConstraint()

    def _get_pointOne(self):
        return SketchPoint()

    def _get_pointTwo(self):
        return SketchPoint()

    def _get_nativeObject(self):
        return HorizontalPointsConstraint()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return HorizontalPointsConstraint()

    pointOne = property(_get_pointOne, None, doc="Returns the first point.")
    pointTwo = property(_get_pointTwo, None, doc="Returns the second point.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class IGESExportOptions(ExportOptions):
    """
    Defines that an IGES export is to be done and specifies the various options.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return IGESExportOptions()


class LoftDirectionEndCondition(LoftEndCondition):
    """
    Represents a 'Direction' loft end condition.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return LoftDirectionEndCondition()

    def _get_angle(self):
        return core.Base()

    def _get_weight(self):
        return core.Base()

    angle = property(_get_angle, None,
                     doc="Gets the valueInput or Parameter that defines the angle of the direction of the loft. If this object was obtained from a LoftFeatureInput object then this will return a valueInput object with the initial value provided. If this object was obtained from an exiting LoftFeature then it returns a Parameter. In the case of a parameter, to change the angle, edit the value of the associated parameter.")
    weight = property(_get_weight, None,
                      doc="Gets the valueInput or Parameter that defines the weight of the loft. If this object was obtained from a LoftFeatureInput object then this will return a valueInput object with the initial value provided. If this object was obtained from an exiting LoftFeature then it returns a Parameter. In the case of a parameter, to change the weight, edit the value of the associated parameter.")


class LoftFeature(Feature):
    """
    Object that represents an existing loft feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return LoftFeature()

    def _get_loftSections(self):
        return LoftSections()

    def _get_centerLineOrRails(self):
        return LoftCenterLineOrRails()

    def _get_startFace(self):
        return BRepFace()

    def _get_endFace(self):
        return BRepFace()

    def _get_sideFaces(self):
        return BRepFaces()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return FeatureOperations()

    def _get_isSolid(self):
        return bool()

    def _get_nativeObject(self):
        return LoftFeature()

    def _set_participantBodies(self, participantBodies):
        pass

    def _get_participantBodies(self):
        return BRepBody()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return LoftFeature()

    loftSections = property(_get_loftSections, None,
                            doc="Returns the set of sections that the loft passes through. This property returns null in the case where the feature is non-parametric.")
    centerLineOrRails = property(_get_centerLineOrRails, None,
                                 doc="Returns the single centerline or the set of rails that define the shape of the loft. This property returns null in the case where the feature is non-parametric.")
    startFace = property(_get_startFace, None,
                         doc="Property that returns the face that caps the start of the loft and is coincident with the first section. In the case where the loft isn't capped and there isn't a start face, this property will return null.")
    endFace = property(_get_endFace, None,
                       doc="Property that returns the face that caps the end of the loft and is coincident with the last section. In the case where the loft isn't capped and there isn't an end face, this property will return null.")
    sideFaces = property(_get_sideFaces, None,
                         doc="Property that returns all of the side faces (i.e. those running through the sections) of the feature.")
    operation = property(_get_operation, _set_operation,
                         doc="Gets and sets the type of operation performed by the extrusion.")
    isSolid = property(_get_isSolid, None,
                       doc="Indicates if this feature was initially created as a solid or a surface.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    participantBodies = property(_get_participantBodies, _set_participantBodies,
                                 doc="Gets and sets the list of bodies that will participate in the feature when the operation is a cut or intersection. When setting or getting this property, you must roll the timeline back to just before the feature so that the model is in the state just before the feature is computed.")


class LoftFreeEndCondition(LoftEndCondition):
    """
    Represents a 'Free' loft end condition.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return LoftFreeEndCondition()


class LoftPointSharpEndCondition(LoftEndCondition):
    """
    Represents a 'Point Sharp' loft end condition.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return LoftPointSharpEndCondition()


class LoftPointTangentEndCondition(LoftEndCondition):
    """
    Represents a 'Point Tangent' loft end condition.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return LoftPointTangentEndCondition()

    def _get_weight(self):
        return core.Base()

    weight = property(_get_weight, None,
                      doc="Gets the valueInput or Parameter that defines the weight of the loft. If this object was obtained from a LoftFeatureInput object then this will return a valueInput object with the initial value provided. If this object was obtained from an exiting LoftFeature then it returns a Parameter. In the case of a parameter, to change the weight, edit the value of the associated parameter.")


class LoftSmoothEndCondition(LoftEndCondition):
    """
    Represents a 'Smooth' loft end condition.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return LoftSmoothEndCondition()

    def _get_weight(self):
        return core.Base()

    weight = property(_get_weight, None,
                      doc="Gets the valueInput or Parameter that defines the weight of the loft. If this object was obtained from a LoftFeatureInput object then this will return a valueInput object with the initial value provided. If this object was obtained from an exiting LoftFeature then it returns a Parameter. In the case of a parameter, to change the weight, edit the value of the associated parameter.")


class LoftTangentEndCondition(LoftEndCondition):
    """
    Represents a 'Tangent' loft end condition.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return LoftTangentEndCondition()

    def _get_weight(self):
        return core.Base()

    weight = property(_get_weight, None,
                      doc="Gets the valueInput or Parameter that defines the weight of the loft. If this object was obtained from a LoftFeatureInput object then this will return a valueInput object with the initial value provided. If this object was obtained from an exiting LoftFeature then it returns a Parameter. In the case of a parameter, to change the weight, edit the value of the associated parameter.")


class MidPointConstraint(GeometricConstraint):
    """
    A midpoint constraint in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return MidPointConstraint()

    def _get_point(self):
        return SketchPoint()

    def _get_midPointCurve(self):
        return SketchCurve()

    def _get_nativeObject(self):
        return MidPointConstraint()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return MidPointConstraint()

    point = property(_get_point, None, doc="Returns the sketch point being constrained.")
    midPointCurve = property(_get_midPointCurve, None, doc="Returns the curve defining the midpoint.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class MirrorFeature(Feature):
    """
    Object that represents an existing mirror feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return MirrorFeature()

    def _set_inputEntities(self, inputEntities):
        pass

    def _get_inputEntities(self):
        return core.ObjectCollection()

    def _set_mirrorPlane(self, mirrorPlane):
        pass

    def _get_mirrorPlane(self):
        return core.Base()

    def _get_patternElements(self):
        return PatternElements()

    def _get_resultFeatures(self):
        return core.ObjectCollection()

    def _get_nativeObject(self):
        return MirrorFeature()

    def _set_patternComputeOption(self, patternComputeOption):
        pass

    def _get_patternComputeOption(self):
        return PatternComputeOptions()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return MirrorFeature()

    inputEntities = property(_get_inputEntities, _set_inputEntities,
                             doc="Gets and sets the entities that are mirrored. It can contain faces, features, bodies, or components. The input must all be of a single type. For example, you can't provide a body and a component but the collection must be either all bodies or all components.")
    mirrorPlane = property(_get_mirrorPlane, _set_mirrorPlane,
                           doc="Gets and sets the mirror plane. This can be either a planar face or construction plane. This works only for parametric features.")
    patternElements = property(_get_patternElements, None,
                               doc="Gets the PatternElements collection that contains the elements created by this pattern.")
    resultFeatures = property(_get_resultFeatures, None,
                              doc="Get the features that were created for this mirror. Returns null in the case where the feature is not parametric.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    patternComputeOption = property(_get_patternComputeOption, _set_patternComputeOption,
                                    doc="Gets and sets the compute option for this mirror feature. This property only applies when mirroring features and is ignored in the direct modeling environment.")


class ModelParameter(Parameter):
    """
    Represents a Model Parameter.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ModelParameter()

    def _get_modelParameters(self):
        return ModelParameters()

    def _get_component(self):
        return Component()

    def _get_role(self):
        return str()

    def _get_createdBy(self):
        return core.Base()

    modelParameters = property(_get_modelParameters, None, doc="Returns the Collection containing the ModelParameter.")
    component = property(_get_component, None, doc="Returns the Component containing the ModelParameter.")
    role = property(_get_role, None,
                    doc="This property identifies what the parameter is used for. For an extrude, it could be 'Depth', for a Workplane it could be 'Offset'.")
    createdBy = property(_get_createdBy, None,
                         doc="Returns the object that created this parameter. For example, a feature, a sketch dimension, or a construction plane.")


class MoveFeature(Feature):
    """
    Object that represents an existing move feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return MoveFeature()

    def _set_inputEntities(self, inputEntities):
        pass

    def _get_inputEntities(self):
        return core.ObjectCollection()

    def _set_transform(self, transform):
        pass

    def _get_transform(self):
        return core.Matrix3D()

    def _get_nativeObject(self):
        return MoveFeature()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return MoveFeature()

    inputEntities = property(_get_inputEntities, _set_inputEntities,
                             doc="Gets and sets the entities to move. This collection can only contain BRepBody objects in parametric modeling.")
    transform = property(_get_transform, _set_transform, doc="Gets and sets the move transform of the input bodies.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class OffsetConstraint(GeometricConstraint):
    """
    An offset constraint in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return OffsetConstraint()

    def _get_parentCurves(self):
        return SketchCurve()

    def _get_childCurves(self):
        return SketchCurve()

    def _get_distance(self):
        return float()

    def _get_dimension(self):
        return SketchDimension()

    def _get_nativeObject(self):
        return OffsetConstraint()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return OffsetConstraint()

    parentCurves = property(_get_parentCurves, None,
                            doc="Returns an array of sketch curves that are the set of parent curves. Nothing should be assumed about the order in how the curves are returned.")
    childCurves = property(_get_childCurves, None,
                           doc="Returns an array of sketch curves that are the set of child curves resulting from the offset. Nothing should be assumed about the order in how the curves are returned.")
    distance = property(_get_distance, None,
                        doc="The current distance of the offset in centimeters. To change the offset you need to modify the value of the parameter associated with the dimension, which you can get using the dimension property.")
    dimension = property(_get_dimension, None,
                         doc="Returns the dimension controlling the offset distance. This can return null in the case where the dimension has been deleted. To change the offset distance you can use the parameter property of the returned dimension to get the parameter that controls the value and use properties on the parameter to change the value. This can return either a SketchOffsetCurvesDimension or an SketchOffsetDimension. A SketchOffsetCurvesDimension is created automatically when curves are offset but if it is deleted the offset can also be controlled by a SketchOffsetDimension.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class OffsetFacesFeature(Feature):
    """
    Object that represents an existing Offset Face feature in a design. Offset Face features are created in the UI using the 'Press Pull' command.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return OffsetFacesFeature()


class OffsetFeature(Feature):
    """
    Object that represents an existing offset feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return OffsetFeature()

    def _set_entities(self, entities):
        pass

    def _get_entities(self):
        return core.ObjectCollection()

    def _get_isChainSelection(self):
        return bool()

    def _get_distance(self):
        return ModelParameter()

    def _get_operation(self):
        return FeatureOperations()

    def _get_nativeObject(self):
        return OffsetFeature()

    def setInputEntities(self, entities, isChainSelection):
        """
        Sets the faces and sheet bodies to offset
        entities : An ObjectCollection containing the BRepFace objects to offset. Additional faces may be automatically used depending on the value of the isChainSelection argument. Input faces need not be from the same body.
        isChainSelection : A boolean value for setting whether or not faces that are tangentially connected to the input faces (if any) will also be offset. The default value is true.
        Returns true if successful
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this is not the NativeObject.
        """
        return OffsetFeature()

    entities = property(_get_entities, _set_entities, doc="Gets and sets the faces to be offset.")
    isChainSelection = property(_get_isChainSelection, None,
                                doc="Get if the faces that are tangentially connected to the input faces (if any) are also offset.")
    distance = property(_get_distance, None,
                        doc="Returns the parameter controlling the offset distance. You can edit the distance by editing the value of the parameter object. A positive value specifies that the offset is in the same direction as the normal direction of the face.")
    operation = property(_get_operation, None,
                         doc="Gets the feature operation that was performed when the feature was created, (either 'NewBodyFeatureOperation' or 'NewComponentFeatureOperation'.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class OffsetStartDefinition(ExtentDefinition):
    """
    A definition object that is used to define a feature whose start plane is defined as plane that is offset from the sketch plane of the profile.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return OffsetStartDefinition()

    @staticmethod
    def create(offset):
        """
        Statically creates a new OffsetStartDefinition object. This is used as input when create a new feature and defining the starting condition.
        offset : An input ValueInput objects that defines the offset distance. The offset can be positive or negative. A positive value indicates an offset in the same direction as the z axis of the profile plane.
        Returns the newly created OffsetStartDefinition object or null in the case of failure.
        """
        return OffsetStartDefinition()

    def _get_offset(self):
        return core.Base()

    def _get_profilePlane(self):
        return core.Plane()

    offset = property(_get_offset, None,
                      doc="Gets the currently defined offset value. If the ProfilePlaneWithOffsetDefinition object was created statically and is not associated with a feature, this will return a ValueInput object. if the ProfilePlaneWithOffsetDefinition is associated with an existing feature, this will return the parameter that was created when the feature was created. To edit the offset, use properties on the parameter to change the value of the parameter.")
    profilePlane = property(_get_profilePlane, None, doc="Returns the geometric definition of the profile plane.")


class OnEdgeHolePositionDefinition(HolePositionDefinition):
    """
    Provides positioning information for a hole that is positioned on the start, end or center of an edge.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return OnEdgeHolePositionDefinition()

    def _get_planarEntity(self):
        return core.Base()

    def _get_edge(self):
        return BRepEdge()

    def _get_position(self):
        return HoleEdgePositions()

    planarEntity = property(_get_planarEntity, None,
                            doc="Returns the plane that defines the orientation and start of the hole.")
    edge = property(_get_edge, None, doc="Returns the edge the hole is positioned on.")
    position = property(_get_position, None,
                        doc="Returns the position of the hole on the edge. The hole can be at the start, midpoint, or end of the edge.")


class OneSideToExtentDefinition(ExtentDefinition):
    """
    Defines the inputs for a OneSideToExtentDefinition object. This defines a feature extent that goes up to a face or construction plane in one direction.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return OneSideToExtentDefinition()

    def _set_toEntity(self, toEntity):
        pass

    def _get_toEntity(self):
        return core.Base()

    def _set_matchShape(self, matchShape):
        pass

    def _get_matchShape(self):
        return bool()

    toEntity = property(_get_toEntity, _set_toEntity,
                        doc="Gets and sets the entity that defines the extent. The valid types of entities can vary depending on the type of feature this is being used with.")
    matchShape = property(_get_matchShape, _set_matchShape,
                          doc="Specifies if the face should be extended or use adjacent faces if necessary to define the termination of the extrusion. When used for a revolve feature this is ignored and is always treated as true.")


class ParallelConstraint(GeometricConstraint):
    """
    A parallel constraint in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ParallelConstraint()

    def _get_lineOne(self):
        return SketchLine()

    def _get_lineTwo(self):
        return SketchLine()

    def _get_nativeObject(self):
        return ParallelConstraint()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return ParallelConstraint()

    lineOne = property(_get_lineOne, None, doc="Returns the first line.")
    lineTwo = property(_get_lineTwo, None, doc="Returns the second line.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class PatchFeature(Feature):
    """
    Object that represents an existing patch feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return PatchFeature()

    def _set_boundaryCurve(self, boundaryCurve):
        pass

    def _get_boundaryCurve(self):
        return core.Base()

    def _get_operation(self):
        return FeatureOperations()

    def _set_continuity(self, continuity):
        pass

    def _get_continuity(self):
        return SurfaceContinuityTypes()

    def _get_nativeObject(self):
        return PatchFeature()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this is not the NativeObject.
        """
        return PatchFeature()

    boundaryCurve = property(_get_boundaryCurve, _set_boundaryCurve,
                             doc="Returns an ObjectCollection that contains all of the sketch curves or B-Rep edges that define the closed outer boundary of the patch feature. When setting this property, the input can be a sketch profile, a single sketch curve, a single B-Rep edge, or an ObjectCollection of sketch curves or B-Rep edges. If a single sketch curve or B-Rep edge is input, that is not closed, Fusion 360 will automatically find connected sketch curves or B-Rep edges in order to define a closed loop. All sketch curves are valid as input. BRepEdges are valid if they are an 'open' edge, which means they are only used by one face. If an ObjectCollection of sketch curves or B-Rep edges is input they must define a closed shape and the B-Rep edges must be valid 'open' edges.")
    operation = property(_get_operation, None, doc="Gets the type of operation performed by the patch feature.")
    continuity = property(_get_continuity, _set_continuity,
                          doc="Gets and sets the type of surface continuity used when creating the patch face. This is only used when BRepEdges are input and defines the continuity of how the patch face connects to the face adjacent to each of the input edges.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class PathPatternFeature(Feature):
    """
    Object that represents an existing path pattern feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return PathPatternFeature()

    def _set_inputEntities(self, inputEntities):
        pass

    def _get_inputEntities(self):
        return core.ObjectCollection()

    def _set_path(self, path):
        pass

    def _get_path(self):
        return Path()

    def _get_quantity(self):
        return ModelParameter()

    def _get_distance(self):
        return ModelParameter()

    def _set_startPoint(self, startPoint):
        pass

    def _get_startPoint(self):
        return float()

    def _set_isFlipDirection(self, isFlipDirection):
        pass

    def _get_isFlipDirection(self):
        return bool()

    def _set_patternDistanceType(self, patternDistanceType):
        pass

    def _get_patternDistanceType(self):
        return PatternDistanceType()

    def _set_isSymmetric(self, isSymmetric):
        pass

    def _get_isSymmetric(self):
        return bool()

    def _set_isOrientationAlongPath(self, isOrientationAlongPath):
        pass

    def _get_isOrientationAlongPath(self):
        return bool()

    def _set_suppressedElementsIds(self, suppressedElementsIds):
        pass

    def _get_suppressedElementsIds(self):
        return int()

    def _get_patternElements(self):
        return PatternElements()

    def _get_resultFeatures(self):
        return core.ObjectCollection()

    def _get_nativeObject(self):
        return PathPatternFeature()

    def _get_patternEntityType(self):
        return PatternEntityTypes()

    def _set_patternComputeOption(self, patternComputeOption):
        pass

    def _get_patternComputeOption(self):
        return PatternComputeOptions()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return PathPatternFeature()

    inputEntities = property(_get_inputEntities, _set_inputEntities,
                             doc="Gets and sets the input entities. The collection can contain faces, features, bodies or occurrences. All of the entities must be of a single type. For example, it can't contain features and occurrences but only features or occurrences.")
    path = property(_get_path, _set_path, doc="Gets and sets the path to create the pattern on path.")
    quantity = property(_get_quantity, None,
                        doc="Gets the quantity of the elements. Edit the value through ModelParameter. Returns nothing in the case where the feature is non-parametric.")
    distance = property(_get_distance, None,
                        doc="Gets the distance. Edit the value through ModelParameter. Returns nothing in the case where the feature is non-parametric.")
    startPoint = property(_get_startPoint, _set_startPoint,
                          doc="Gets and sets the start point on the path to count the distance. It's between 0 and 1. 0 means start point of the path, 1 means end point of the path.")
    isFlipDirection = property(_get_isFlipDirection, _set_isFlipDirection,
                               doc="Gets and sets if flip the direction from start point.")
    patternDistanceType = property(_get_patternDistanceType, _set_patternDistanceType,
                                   doc="Gets and sets how the distance between elements is computed.")
    isSymmetric = property(_get_isSymmetric, _set_isSymmetric,
                           doc="Gets and sets if the pattern is in one direction or symmetric.")
    isOrientationAlongPath = property(_get_isOrientationAlongPath, _set_isOrientationAlongPath,
                                      doc="Gets and sets if the orientation is along path. If false, the orientation is identical.")
    suppressedElementsIds = property(_get_suppressedElementsIds, _set_suppressedElementsIds,
                                     doc="Gets and sets the id's of the elements to suppress.")
    patternElements = property(_get_patternElements, None,
                               doc="Gets the PatternElements collection that contains the elements created by this pattern.")
    resultFeatures = property(_get_resultFeatures, None,
                              doc="Get the features that were created for this mirror. Returns null in the case where the feature is parametric.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    patternEntityType = property(_get_patternEntityType, None,
                                 doc="Returns the type of entities the pattern consists of. This can be used to help determine the type of results that will be found in the pattern elements.")
    patternComputeOption = property(_get_patternComputeOption, _set_patternComputeOption,
                                    doc="Gets and sets the compute option for this pattern feature. This property only applies when patterning features and is ignored in the direct modeling environment.")


class PerpendicularConstraint(GeometricConstraint):
    """
    A perpendicular constraint in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return PerpendicularConstraint()

    def _get_lineOne(self):
        return SketchLine()

    def _get_lineTwo(self):
        return SketchLine()

    def _get_nativeObject(self):
        return PerpendicularConstraint()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return PerpendicularConstraint()

    lineOne = property(_get_lineOne, None, doc="Returns the first line.")
    lineTwo = property(_get_lineTwo, None, doc="Returns the second line.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class PinSlotJointMotion(JointMotion):
    """
    Represents the set of information specific to a pin slot joint.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return PinSlotJointMotion()

    def _set_rotationAxis(self, rotationAxis):
        pass

    def _get_rotationAxis(self):
        return JointDirections()

    def _get_rotationAxisVector(self):
        return core.Vector3D()

    def _set_customRotationAxisEntity(self, customRotationAxisEntity):
        pass

    def _get_customRotationAxisEntity(self):
        return core.Base()

    def _set_rotationValue(self, rotationValue):
        pass

    def _get_rotationValue(self):
        return float()

    def _get_rotationLimits(self):
        return JointLimits()

    def _set_slideDirection(self, slideDirection):
        pass

    def _get_slideDirection(self):
        return JointDirections()

    def _get_slideDirectionVector(self):
        return core.Vector3D()

    def _set_customSlideDirectionEntity(self, customSlideDirectionEntity):
        pass

    def _get_customSlideDirectionEntity(self):
        return core.Base()

    def _set_slideValue(self, slideValue):
        pass

    def _get_slideValue(self):
        return float()

    def _get_slideLimits(self):
        return JointLimits()

    rotationAxis = property(_get_rotationAxis, _set_rotationAxis,
                            doc="Gets and sets the direction of the axis of rotation. This can be set to XAxisJointDirection, YAxisJointDirection, or ZAxisJointDirection. It can return those three directions and CustomJointDirection. If this returns CustomJointDirection then the customRotationAxisEntity will return an entity that defines the axis. If there is a custom rotation axis defined and this property is set to one of the three standard axes, the custom rotation will be removed and customRotationAxisEntity will return null.")
    rotationAxisVector = property(_get_rotationAxisVector, None,
                                  doc="Returns the direction of the rotation axis. This property will return null in the case where the PinSlotJointMotion object was obtained from a JointInput object.")
    customRotationAxisEntity = property(_get_customRotationAxisEntity, _set_customRotationAxisEntity,
                                        doc="This property can be set using various types of entities that can infer an axis. For example, a linear edge, sketch line, planar face, and cylindrical face. This property is only valid in the case where the rotationAxis property returns CustomJointDirection. Setting this property will automatically set the rotationAxis property to CustomJointDirection.")
    rotationValue = property(_get_rotationValue, _set_rotationValue,
                             doc="Gets and sets the rotation value. This is in radians. Setting this value is the equivalent of using the Drive Joints command.")
    rotationLimits = property(_get_rotationLimits, None,
                              doc="Returns a JointLimits object that defines the rotation limits for this joint. Use the functionality of the returned JointLimits object to get, set, and modify the joint limits.")
    slideDirection = property(_get_slideDirection, _set_slideDirection,
                              doc="Gets and sets the direction of the slide motion in the slot. This can be set to XAxisJointDirection, YAxisJointDirection, or ZAxisJointDirection. It can return those three directions and CustomJointDirection. If this returns CustomJointDirection then the customSlideDirectionEntity will return an entity that defines the direction. If there is a custom direction defined and this property is set to one of the three standard axes, the custom direction will be removed and customSlideDirectionEntity will return null.")
    slideDirectionVector = property(_get_slideDirectionVector, None,
                                    doc="Returns the direction of the primary slide direction. This property will return null in the case where the PinSlotJointMotion object was obtained from a JointInput object.")
    customSlideDirectionEntity = property(_get_customSlideDirectionEntity, _set_customSlideDirectionEntity,
                                          doc="This property can be set using various types of entities that can infer a direction. For example, a linear edge, sketch line, planar face, and cylindrical face. This property is only valid in the case where the slideDirection property returns CustomJointDirection. Setting this property will automatically set the slideDirection property to CustomJointDirection.")
    slideValue = property(_get_slideValue, _set_slideValue,
                          doc="Gets and sets the slide value. This is in centimeters. Setting this value is\nthe equivalent of using the Drive Joints command.")
    slideLimits = property(_get_slideLimits, None,
                           doc="Returns a JointLimits object that defines the slide limits for this joint. Use the functionality of the returned JointLimits object to get, set, and modify the joint limits.")


class PipeFeature(Feature):
    """
    Object that represents an existing pipe feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return PipeFeature()


class PlanarJointMotion(JointMotion):
    """
    Represents the set of information specific to a planar joint.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return PlanarJointMotion()

    def _set_normalDirection(self, normalDirection):
        pass

    def _get_normalDirection(self):
        return JointDirections()

    def _get_normalDirectionVector(self):
        return core.Vector3D()

    def _set_customNormalDirectionEntity(self, customNormalDirectionEntity):
        pass

    def _get_customNormalDirectionEntity(self):
        return core.Base()

    def _get_primarySlideDirection(self):
        return JointDirections()

    def _get_primarySlideDirectionVector(self):
        return core.Vector3D()

    def _set_customPrimarySlideDirectionEntity(self, customPrimarySlideDirectionEntity):
        pass

    def _get_customPrimarySlideDirectionEntity(self):
        return core.Base()

    def _get_secondarySlideDirectionVector(self):
        return core.Vector3D()

    def _set_rotationValue(self, rotationValue):
        pass

    def _get_rotationValue(self):
        return float()

    def _get_rotationLimits(self):
        return JointLimits()

    def _set_primarySlideValue(self, primarySlideValue):
        pass

    def _get_primarySlideValue(self):
        return float()

    def _get_primarySlideLimits(self):
        return JointLimits()

    def _set_secondarySlideValue(self, secondarySlideValue):
        pass

    def _get_secondarySlideValue(self):
        return float()

    def _get_secondarySlideLimits(self):
        return JointLimits()

    normalDirection = property(_get_normalDirection, _set_normalDirection,
                               doc="Gets and sets the direction of the normal of the single degree of rotation. This can be set to XAxisJointDirection, YAxisJointDirection, or ZAxisJointDirection. It can return those three directions and CustomJointDirection. If this returns CustomJointDirection then the customNormalDirectionEntity will return an entity that defines the direction. If there is a custom direction defined and this property is set to one of the three standard axes, the custom direction will be removed and customNormalDirectionEntity will return null.")
    normalDirectionVector = property(_get_normalDirectionVector, None,
                                     doc="Returns the direction of the normal direction. This property will return null in the case where the PlanarJointMotion object was obtained from a JointInput object.")
    customNormalDirectionEntity = property(_get_customNormalDirectionEntity, _set_customNormalDirectionEntity,
                                           doc="This property defines a custom normal direction and can be set using various types of entities that can infer a direction. For example, a linear edge, sketch line, planar face, and cylindrical face.This property is only valid in the case where the normalDirection property returns CustomJointDirection. Setting this property will automatically set the normalDirection property to CustomJointDirection.")
    primarySlideDirection = property(_get_primarySlideDirection, None,
                                     doc="Gets the direction used as the primary direction for the two translational degrees of freedom. The value of this property is automatically set when setting the normalDirection. When reading this value it can return XAxisJointDirection, YAxisJointDirection, ZAxisJointDirection, or CustomJointDirection. If it's CustomJointDirection then the direction the direction can be determined using the primarySlideDirectionVector and the entity controlling the direction can be get and set using the customPrimarySlideDirectionEntity.")
    primarySlideDirectionVector = property(_get_primarySlideDirectionVector, None,
                                           doc="Returns the direction of the primary slide direction. This property will return null in the case where the PlanarJointMotion object was obtained from a JointInput object.")
    customPrimarySlideDirectionEntity = property(_get_customPrimarySlideDirectionEntity,
                                                 _set_customPrimarySlideDirectionEntity,
                                                 doc="This property can be set using various types of entities that can infer a direction. For example, a linear edge, sketch line, planar face, and cylindrical face. When reading this property, it is only valid in the case where the primarySlideDirection property returns CustomJointDirection. Setting this property will automatically set the primarySlideDirection property to CustomJointDirection. The entity defining the custom direction by be perpendicular to the normal direction.")
    secondarySlideDirectionVector = property(_get_secondarySlideDirectionVector, None,
                                             doc="Returns the direction of the secondary slide direction. This property will return null in the case where the PlanarJointMotion object was obtained from a JointInput object.")
    rotationValue = property(_get_rotationValue, _set_rotationValue,
                             doc="Gets and sets the rotation value. This is in radians. Setting this value is the equivalent of using the Drive Joints command.")
    rotationLimits = property(_get_rotationLimits, None,
                              doc="Returns a JointLimits object that defines the limits of rotation for this joint. Use the functionality of the returned JointLimits object to get, set, and modify the joint limits.")
    primarySlideValue = property(_get_primarySlideValue, _set_primarySlideValue,
                                 doc="Gets and sets the offset value in the primary direction. This is in centimeters. Setting this value is the equivalent of using the Drive Joints command.")
    primarySlideLimits = property(_get_primarySlideLimits, None,
                                  doc="Returns a JointLimits object that defines the limits in the primary direction for this joint. Use the functionality of the returned JointLimits object to get, set, and modify the joint limits.")
    secondarySlideValue = property(_get_secondarySlideValue, _set_secondarySlideValue,
                                   doc="Gets and sets the offset value in the secondary direction. This is in centimeters. Setting this value is the equivalent of using the Drive Joints command.")
    secondarySlideLimits = property(_get_secondarySlideLimits, None,
                                    doc="Returns a JointLimits object that defines the limits in the secondary direction for this joint. Use the functionality of the returned JointLimits object to get, set, and modify the joint limits.")


class PlaneAndOffsetsHolePositionDefinition(HolePositionDefinition):
    """
    Provides positioning information for a hole that is positioned on a plane and at a distance from one or two edges.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return PlaneAndOffsetsHolePositionDefinition()

    def _get_planarEntity(self):
        return core.Base()

    def _get_edgeOne(self):
        return BRepEdge()

    def _get_offsetOne(self):
        return ModelParameter()

    def _get_edgeTwo(self):
        return BRepEdge()

    def _get_offsetTwo(self):
        return ModelParameter()

    planarEntity = property(_get_planarEntity, None,
                            doc="Returns the plane that defines the orientation and start of the hole.")
    edgeOne = property(_get_edgeOne, None,
                       doc="The first of 2 edges the hole position is measured from. OffsetOne provides access to the model parameter controlling the offset distance.")
    offsetOne = property(_get_offsetOne, None,
                         doc="Returns the model parameter controlling the distance from the center of the hole to EdgeOne.")
    edgeTwo = property(_get_edgeTwo, None,
                       doc="The second of two edges the hole position is measured from. OffsetTwo provides access to the model parameter controlling the offset distance. This property can return null in the case where only one edge is used.")
    offsetTwo = property(_get_offsetTwo, None,
                         doc="Returns the model parameter controlling the distance from the center of the hole to EdgeTwo. This property returns null in the case where only one edge is used.")


class PointHolePositionDefinition(HolePositionDefinition):
    """
    Provides positioning information for a hole that is positioned relative to a 3D coordinate point.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return PointHolePositionDefinition()

    def _get_planarEntity(self):
        return core.Base()

    def _get_point(self):
        return core.Base()

    planarEntity = property(_get_planarEntity, None,
                            doc="Returns the plane that defines the orientation and start of the hole.")
    point = property(_get_point, None, doc="Returns the coordinates defining the position of the hole.")


class PolygonConstraint(GeometricConstraint):
    """
    A polygon constraint in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return PolygonConstraint()

    def _get_lines(self):
        return SketchLine()

    lines = property(_get_lines, None, doc="Returns the sketch lines that represent the polygon.")


class ProfilePlaneStartDefinition(ExtentDefinition):
    """
    A definition object that is used to define a feature whose start plane is the sketch plane of the profile.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ProfilePlaneStartDefinition()

    @staticmethod
    def create():
        """
        Statically creates a new ProfilePlaneStartDefinition object. This is used as input when creating a new feature and defining the starting condition.
        Returns the newly created ProfilePlaneStartDefinition object or null in the case of a failure.
        """
        return ProfilePlaneStartDefinition()

    def _get_profilePlane(self):
        return core.Plane()

    profilePlane = property(_get_profilePlane, None, doc="Returns the geometric definition of the profile plane.")


class RectangularPatternConstraint(GeometricConstraint):
    """
    A rectangular pattern constraint in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return RectangularPatternConstraint()


class RectangularPatternFeature(Feature):
    """
    Object that represents an existing rectangular pattern feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return RectangularPatternFeature()

    def _set_inputEntities(self, inputEntities):
        pass

    def _get_inputEntities(self):
        return core.ObjectCollection()

    def _set_directionOneEntity(self, directionOneEntity):
        pass

    def _get_directionOneEntity(self):
        return core.Base()

    def _set_directionTwoEntity(self, directionTwoEntity):
        pass

    def _get_directionTwoEntity(self):
        return core.Base()

    def _get_directionOne(self):
        return core.Vector3D()

    def _get_directionTwo(self):
        return core.Vector3D()

    def _get_quantityOne(self):
        return ModelParameter()

    def _get_quantityTwo(self):
        return ModelParameter()

    def _get_distanceOne(self):
        return ModelParameter()

    def _get_distanceTwo(self):
        return ModelParameter()

    def _set_isSymmetricInDirectionOne(self, isSymmetricInDirectionOne):
        pass

    def _get_isSymmetricInDirectionOne(self):
        return bool()

    def _set_isSymmetricInDirectionTwo(self, isSymmetricInDirectionTwo):
        pass

    def _get_isSymmetricInDirectionTwo(self):
        return bool()

    def _set_patternDistanceType(self, patternDistanceType):
        pass

    def _get_patternDistanceType(self):
        return PatternDistanceType()

    def _set_suppressedElementsIds(self, suppressedElementsIds):
        pass

    def _get_suppressedElementsIds(self):
        return int()

    def _get_patternElements(self):
        return PatternElements()

    def _get_resultFeatures(self):
        return core.ObjectCollection()

    def _get_nativeObject(self):
        return RectangularPatternFeature()

    def _get_patternEntityType(self):
        return PatternEntityTypes()

    def _set_patternComputeOption(self, patternComputeOption):
        pass

    def _get_patternComputeOption(self):
        return PatternComputeOptions()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return RectangularPatternFeature()

    inputEntities = property(_get_inputEntities, _set_inputEntities,
                             doc="Gets and sets the input entities. The collection can contain faces, features, bodies or occurrences. All of the entities must be of a single type. For example, it can't contain features and occurrences but only features or occurrences.")
    directionOneEntity = property(_get_directionOneEntity, _set_directionOneEntity,
                                  doc="Gets and sets the first direction entity. This can be a linear edge, construction axis, sketch line or rectangular pattern feature. If a rectangular pattern feature is set, the directionOneEntity and directionTwoEntity properties return the same rectangular pattern feature.")
    directionTwoEntity = property(_get_directionTwoEntity, _set_directionTwoEntity,
                                  doc="Gets and sets the second direction entity. This can be a linear edge, construction axis, sketch line or rectangular pattern feature. If a rectangular pattern feature is set, the directionOneEntity and directionTwoEntity properties return the same rectangular pattern feature. This can be null when not entity has been specified to control the second direction. In this case Fusion 360 will compute a default direction which is 90 degrees to the direction one.")
    directionOne = property(_get_directionOne, None,
                            doc="Returns a Vector3D indicating the positive direction of direction one.")
    directionTwo = property(_get_directionTwo, None,
                            doc="Returns a Vector3D indicating the positive direction of direction two.")
    quantityOne = property(_get_quantityOne, None,
                           doc="Gets the number of instances in the first direction. Edit the value through ModelParameter. Returns nothing in the case where the feature is non-parametric.")
    quantityTwo = property(_get_quantityTwo, None,
                           doc="Gets the number of instances in the second direction. Edit the value through ModelParameter. Returns nothing in the case where the feature is non-parametric.")
    distanceOne = property(_get_distanceOne, None,
                           doc="Gets the distance in the first direction. Edit the value through ModelParameter. Returns nothing in the case where the feature is non-parametric.")
    distanceTwo = property(_get_distanceTwo, None,
                           doc="Gets the distance in the second direction. Edit the value through ModelParameter. Returns nothing in the case where the feature is non-parametric.")
    isSymmetricInDirectionOne = property(_get_isSymmetricInDirectionOne, _set_isSymmetricInDirectionOne,
                                         doc="Gets and sets if the pattern in direction one is in one direction or symmetric.")
    isSymmetricInDirectionTwo = property(_get_isSymmetricInDirectionTwo, _set_isSymmetricInDirectionTwo,
                                         doc="Gets and sets if the pattern in direction two is in one direction or symmetric.")
    patternDistanceType = property(_get_patternDistanceType, _set_patternDistanceType,
                                   doc="Gets and sets how the distance between elements is computed. Is initialized to ExtentPatternDistanceType when a new RectangularPatternFeatureInput has been created.")
    suppressedElementsIds = property(_get_suppressedElementsIds, _set_suppressedElementsIds,
                                     doc="Gets and sets the ids of the patterns to suppress.")
    patternElements = property(_get_patternElements, None,
                               doc="Gets the PatternElements collection that contains the elements created by this pattern.")
    resultFeatures = property(_get_resultFeatures, None,
                              doc="Get the features that were created for this pattern. Returns null in the case where the feature is parametric.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    patternEntityType = property(_get_patternEntityType, None,
                                 doc="Returns the type of entities the pattern consists of. This can be used to help determine the type of results that will be found in the pattern elements.")
    patternComputeOption = property(_get_patternComputeOption, _set_patternComputeOption,
                                    doc="Gets and sets the compute option for this pattern feature. This property only applies when patterning features and is ignored in the direct modeling environment.")


class RemoveFeature(Feature):
    """
    Object that represents an existing Remove feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return RemoveFeature()

    def _get_itemToRemove(self):
        return core.Base()

    def _get_nativeObject(self):
        return RemoveFeature()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this is not the NativeObject.
        """
        return RemoveFeature()

    itemToRemove = property(_get_itemToRemove, None,
                            doc="Gets and sets the body or component occurrence to remove. In order to access (get) the item removed, you must roll the timeline back to just before the remove feature whose item you want to access.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class ReplaceFaceFeature(Feature):
    """
    Object that represents an existing replace face feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ReplaceFaceFeature()

    def _set_targetFaces(self, targetFaces):
        pass

    def _get_targetFaces(self):
        return core.Base()

    def _get_isTangentChain(self):
        return bool()

    def _get_nativeObject(self):
        return ReplaceFaceFeature()

    def setInputEntities(self, sourceFaces, isTangentChain):
        """
        Method that sets faces to replace.
        sourceFaces : The collection can contain the faces from a solid and/or from features. All the faces must be on the same body.
        isTangentChain : A boolean value for setting whether or not faces that are tangentially connected to the input faces (if any) will also be included. A value of true indicates that tangent faces will be included.
        Returns true if successful.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return ReplaceFaceFeature()

    targetFaces = property(_get_targetFaces, _set_targetFaces,
                           doc="Gets and sets the entities that define the target faces. The new faces must completely intersect the part. The collection can contain the surface faces, surface bodies and construction planes.")
    isTangentChain = property(_get_isTangentChain, None,
                              doc="Gets if any faces that are tangentially connected to any of the input faces will also be included in setting InputEntities.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class ReverseNormalFeature(Feature):
    """
    Object that represents an existing Reverse Normal feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ReverseNormalFeature()

    def _set_surfaces(self, surfaces):
        pass

    def _get_surfaces(self):
        return core.ObjectCollection()

    def _get_nativeObject(self):
        return ReverseNormalFeature()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this is not the NativeObject.
        """
        return ReverseNormalFeature()

    surfaces = property(_get_surfaces, _set_surfaces,
                        doc="Gets and sets the surface bodies (open BRepBodies) whose faces normals are to be reversed. All faces of the input surface bodies get reversed.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class RevoluteJointMotion(JointMotion):
    """
    Represents the set of information specific to a revolute joint.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return RevoluteJointMotion()

    def _set_rotationAxis(self, rotationAxis):
        pass

    def _get_rotationAxis(self):
        return JointDirections()

    def _get_rotationAxisVector(self):
        return core.Vector3D()

    def _set_customRotationAxisEntity(self, customRotationAxisEntity):
        pass

    def _get_customRotationAxisEntity(self):
        return core.Base()

    def _set_rotationValue(self, rotationValue):
        pass

    def _get_rotationValue(self):
        return float()

    def _get_rotationLimits(self):
        return JointLimits()

    rotationAxis = property(_get_rotationAxis, _set_rotationAxis,
                            doc="Gets and sets the direction of the axis of rotation. This can be set to XAxisJointDirection, YAxisJointDirection, or ZAxisJointDirection. It can return those three directions and CustomJointDirection. If this returns CustomJointDirection then the customRotationAxisEntity will return an entity that defines the axis. If there is a custom rotation axis defined and this property is set to one of the three standard axes, the custom rotation will be removed and customRotationAxisEntity will return null.")
    rotationAxisVector = property(_get_rotationAxisVector, None,
                                  doc="Returns the direction of the rotation axis. This property will return null in the case where the RevolutionJointMotion object was obtained from a JointInput object.")
    customRotationAxisEntity = property(_get_customRotationAxisEntity, _set_customRotationAxisEntity,
                                        doc="This property can be set using various types of entities that can infer an axis. For example, a linear edge, sketch line, planar face, and cylindrical face. This property is only valid in the case where the rotationAxis property returns CustomJointDirection. Setting this property will automatically set the rotationAxis property to CustomJointDirection.")
    rotationValue = property(_get_rotationValue, _set_rotationValue,
                             doc="Gets and sets the rotation value. This is in radians. Setting this value is the equivalent of using the Drive Joints command.")
    rotationLimits = property(_get_rotationLimits, None,
                              doc="Returns a JointLimits object that defines the rotation limits for this joint. Use the functionality of the returned JointLimits object to get, set, and modify the joint limits.")


class RevolveFeature(Feature):
    """
    Object that represents an existing revolve feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return RevolveFeature()

    def _set_profile(self, profile):
        pass

    def _get_profile(self):
        return core.Base()

    def _set_axis(self, axis):
        pass

    def _get_axis(self):
        return core.Base()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return FeatureOperations()

    def _get_extentDefinition(self):
        return ExtentDefinition()

    def _get_startFaces(self):
        return BRepFaces()

    def _get_endFaces(self):
        return BRepFaces()

    def _get_sideFaces(self):
        return BRepFaces()

    def _get_nativeObject(self):
        return RevolveFeature()

    def _get_isSolid(self):
        return bool()

    def _set_participantBodies(self, participantBodies):
        pass

    def _get_participantBodies(self):
        return BRepBody()

    def setAngleExtent(self, isSymmetric, angle):
        """
        Defines the extent of the revolution to be at a defined angle.
        isSymmetric : Boolean that specifies if the extent is symmetric or not.
        angle : ValueInput object that defines the angle. This can be a string or a value. If it's a string it is interpreted using the current document units and can include equations. For example all of the following are valid as long as they result in angle units; '45', '45 deg', 'a1 / 2'. If a value is input it is interpreted as radians. If isSymmetric is false a positive or negative angle can be used to control the direction. If isSymmetric is true, the angle is the extent in one direction so the entire angle of the revolution will be twice the specified angle. Use an angle of 360 deg or 2 pi radians to create a full revolve.
        Returns true if successful
        """
        return bool()

    def setTwoSideAngleExtent(self, angleOne, angleTwo):
        """
        Changes the extent of the revolve to be defined as a two sided angle extent.
        angleOne : ValueInput object that defines the first angle. This can be a string or a value. If it's a string it is interpreted using the current document units and can include equations. For example all of the following are valid as long as they result in angle units; '45', '45 deg', 'a1 / 2'. If a value is input it is interpreted as radians.
        angleTwo : ValueInput object that defines the second angle. This can be a string or a value. If it's a string it is interpreted using the current document units and can include equations. For example all of the following are valid as long as they result in angle units; '45', '45 deg', 'a1 / 2'. If a value is input it is interpreted as radians.
        Returns true if successful
        """
        return bool()

    def setOneSideToExtent(self, toEntity, directionHint):
        """
        Changes the extent of the revolve to be from the sketch plane to the specified 'to' face.
        toEntity : The entity that defines the 'to' extent. The valid types of entities can vary depending on the type of feature this is being used with. For a revolve it can be a BRepBody, BRepFace, BRepVertex, ConstructionPlane, or ConstructionPoint.
        directionHint : Specifies the direction of the revolve.
        Returns true if successful.
        """
        return bool()

    def setTwoSidesToExtent(self, toEntityOne, toEntityTwo):
        """
        Changes the extent of the revolve to be defined as a two sided to extent.
        toEntityOne : The first entity that defines the 'to' extent. The valid types of entities can vary depending on the type of feature this is being used with. For a revolve it can be a BRepBody, BRepFace, BRepVertex, ConstructionPlane, or ConstructionPoint.
        toEntityTwo : The second entity that defines the 'to' extent. The valid types of entities can vary depending on the type of feature this is being used with. For a revolve it can be a BRepBody, BRepFace, BRepVertex, ConstructionPlane, or ConstructionPoint.
        Returns true if successful
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return RevolveFeature()

    profile = property(_get_profile, _set_profile,
                       doc="Gets and sets the profiles or planar faces used to define the shape of the revolve. This property can return or be set with a single Profile, a single planar face, or an ObjectCollection consisting of multiple profiles and planar faces. When an ObjectCollection is used all of the profiles and faces must be co-planar. When setting this property of a surface (non-solid) extrusion, you can use the createOpenProfile and createBRepEdgeProfile methods of the Component object to create an open profile. This property returns null in the case where the feature is non-parametric.")
    axis = property(_get_axis, _set_axis,
                    doc="Gets and sets the entity used to define the axis of revolution. The axis can be a sketch line, construction axis, or linear edge. If it is not in the same plane as the profile, it is projected onto the profile plane.")
    operation = property(_get_operation, _set_operation,
                         doc="Gets and sets the type of operation performed by the revolve.")
    extentDefinition = property(_get_extentDefinition, None,
                                doc="Gets the definition object that is defining the extent of the revolve. Modifying the definition object will cause the revolve to recompute. Various types of objects can be returned depending on the type of extent currently defined for the revolve. This property returns nothing in the case where the feature is non-parametric.")
    startFaces = property(_get_startFaces, None,
                          doc="Property that returns the set of faces that cap one end of the revolve and are coincident with the sketch plane. In the case of a symmetric revolve these faces are the ones on the positive normal side of the sketch plane. In the case where there aren't any start faces, this property will return null.")
    endFaces = property(_get_endFaces, None,
                        doc="Property that returns the set of faces that cap the end of the revolve opposite the start faces. In the case where there aren't any start faces, this property will return null.")
    sideFaces = property(_get_sideFaces, None,
                         doc="Property that returns all of the faces created around the perimeter of the feature.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    isSolid = property(_get_isSolid, None,
                       doc="Indicates if this feature was initially created as a solid or a surface.")
    participantBodies = property(_get_participantBodies, _set_participantBodies,
                                 doc="Gets and sets the list of bodies that will participate in the feature when the operation is a cut or intersection. When setting or getting this property, you must roll the timeline back to just before the feature so that the model is in the state just before the feature is computed.")


class RibFeature(Feature):
    """
    Object that represents an existing Rib feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return RibFeature()


class RigidJointMotion(JointMotion):
    """
    Represents the set of information specific to a rigid joint. A rigid joint doesn't support any additional information beyond getting the joint type which it derives from JointMotion.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return RigidJointMotion()


class RuleFilletFeature(Feature):
    """
    Object that represents an existing rule fillet feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return RuleFilletFeature()


class SATExportOptions(ExportOptions):
    """
    Defines that a SAT export is to be done and specifies the various options.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SATExportOptions()


class ScaleFeature(Feature):
    """
    Object that represents an existing scale feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ScaleFeature()

    def _set_inputEntities(self, inputEntities):
        pass

    def _get_inputEntities(self):
        return core.ObjectCollection()

    def _set_point(self, point):
        pass

    def _get_point(self):
        return core.Base()

    def _get_isUniform(self):
        return bool()

    def _get_scaleFactor(self):
        return ModelParameter()

    def _get_xScale(self):
        return ModelParameter()

    def _get_yScale(self):
        return ModelParameter()

    def _get_zScale(self):
        return ModelParameter()

    def _get_nativeObject(self):
        return ScaleFeature()

    def setToUniform(self, scaleFactor):
        """
        Calling this method will change to a uniform scale. The isUniform is set to true if successful.
        scaleFactor : A ValueInput object that defines the scale factor.
        Returns true if successful.
        """
        return bool()

    def setToNonUniform(self, xScale, yScale, zScale):
        """
        Calling this method will change to a non-uniform scale. Fails of the inputEntities collection contains sketches or components. The isUniform is set to false if successful.
        xScale : A ValueInput object that defines the scale in the X direction.
        yScale : A ValueInput object that defines the scale in the Y direction.
        zScale : A ValueInput object that defines the scale in the Z direction.
        Returns true if successful.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return ScaleFeature()

    inputEntities = property(_get_inputEntities, _set_inputEntities,
                             doc="Gets and sets the input entities. This collection can contain sketches, BRep bodies and T-Spline bodies in parametric modeling. It can contain sketches, BRep bodies, T-Spline bodies, mesh bodies, root component and occurrences in non-parametric modeling. If the scaling is non-uniform (the isUniform property is false), this collection cannot contain sketches or components.")
    point = property(_get_point, _set_point,
                     doc="Gets and sets the point as reference to scale. This can be a BRepVertex, a SketchPoint or a ConstructionPoint.")
    isUniform = property(_get_isUniform, None, doc="Gets if it's uniform scale.")
    scaleFactor = property(_get_scaleFactor, None,
                           doc="Returns the parameter that controls the uniform scale factor. This will return null in the case where isUniform is false or the feature is non-parametric. You can use the properties and methods on the ModelParameter object to get and set the value.")
    xScale = property(_get_xScale, None,
                      doc="Returns the parameter that controls the X scale factor. This will return null in the case where isUniform is false or the feature is non-parametric. You can use the properties and methods on the ModelParameter object to get and set the value.")
    yScale = property(_get_yScale, None,
                      doc="Returns the parameter that controls the Y scale factor. This will return null in the case where isUniform is false or the feature is non-parametric. You can use the properties and methods on the ModelParameter object to get and set the value.")
    zScale = property(_get_zScale, None,
                      doc="Returns the parameter that controls the Z scale factor. This will return null in the case where isUniform is false or the feature is non-parametric. You can use the properties and methods on the ModelParameter object to get and set the value.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class ShellFeature(Feature):
    """
    Object that represents an existing shell feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ShellFeature()

    def _get_inputEntities(self):
        return core.ObjectCollection()

    def _get_isTangentChain(self):
        return bool()

    def _get_insideThickness(self):
        return ModelParameter()

    def _get_outsideThickness(self):
        return ModelParameter()

    def _get_nativeObject(self):
        return ShellFeature()

    def setInputEntities(self, inputEntities, isTangentChain):
        """
        Method that sets faces to remove and bodies to preform shell. Return false if any faces are input, and the owning bodies of the faces are also input.
        inputEntities : The collection contains the faces to remove and the bodies to perform shell. Fails if any faces are input, and the owning bodies of the faces are also input.
        isTangentChain : A boolean value for setting whether or not faces that are tangentially connected to the input faces (if any) will also be included. It defaults to true.
        Returns true if successful
        """
        return bool()

    def setThicknesses(self, insideThickness, outsideThickness):
        """
        Method that sets inside and outside thicknesses of the shell.
        insideThickness : ValueInput object that defines the inside thickness. If set to null, remove the existing inside thickness.
        outsideThickness : ValueInput object that defines the outside thickness. If set to null, remove the existing outside thickness.
        Returns true if successful
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return ShellFeature()

    inputEntities = property(_get_inputEntities, None, doc="Gets the input faces/bodies.")
    isTangentChain = property(_get_isTangentChain, None,
                              doc="Gets if any faces that are tangentially connected to any of the input faces will also be included in setting InputEntities.")
    insideThickness = property(_get_insideThickness, None,
                               doc="Gets the inside thickness. Edit the thickness through ModelParameter. This property returns nothing in the case where the feature is non-parametric.")
    outsideThickness = property(_get_outsideThickness, None,
                                doc="Gets the outside thickness. Edit the thickness through ModelParameter. This property returns nothing in the case where the feature is non-parametric.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SilhouetteSplitFeature(Feature):
    """
    Object that represents an existing silhouette split feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SilhouetteSplitFeature()

    def _set_viewDirection(self, viewDirection):
        pass

    def _get_viewDirection(self):
        return core.Base()

    def _set_targetBody(self, targetBody):
        pass

    def _get_targetBody(self):
        return BRepBody()

    def _get_operation(self):
        return SilhouetteSplitOperations()

    def _get_nativeObject(self):
        return SilhouetteSplitFeature()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this is not the NativeObject.
        """
        return SilhouetteSplitFeature()

    viewDirection = property(_get_viewDirection, _set_viewDirection,
                             doc="Gets and sets the entity that defines the silhouette view direction, which can be a construction axis, linear BRepEdge, planar BRepFace or a construction plane.")
    targetBody = property(_get_targetBody, _set_targetBody, doc="Gets and sets the solid body to split.")
    operation = property(_get_operation, None, doc="Gets the type of silhouette split operation.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SketchAngularDimension(SketchDimension):
    """
    An angular dimension in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchAngularDimension()

    def _get_lineOne(self):
        return SketchLine()

    def _get_lineTwo(self):
        return SketchLine()

    def _get_nativeObject(self):
        return SketchAngularDimension()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SketchAngularDimension()

    lineOne = property(_get_lineOne, None, doc="The first line being constrained.")
    lineTwo = property(_get_lineTwo, None, doc="The second line being constrained.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SketchConcentricCircleDimension(SketchDimension):
    """
    A concentric circle dimension in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchConcentricCircleDimension()

    def _get_circleOne(self):
        return SketchCurve()

    def _get_circleTwo(self):
        return SketchCurve()

    def _get_nativeObject(self):
        return SketchConcentricCircleDimension()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SketchConcentricCircleDimension()

    circleOne = property(_get_circleOne, None, doc="Returns the first concentric circle or arc.")
    circleTwo = property(_get_circleTwo, None, doc="Returns the second concentric circle or arc.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SketchCurve(SketchEntity):
    """
    A single sketch curve. This is the base class for the specific curve types.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchCurve()

    def _get_length(self):
        return float()

    def _set_isConstruction(self, isConstruction):
        pass

    def _get_isConstruction(self):
        return bool()

    def split(self, splitPoint, createConstraints):
        """
        Split a curve at a position specified along the curve
        splitPoint : A position (transient Point3D) on the curve that defines the point at which to split the curve
        createConstraints : Constraints are created by default. Specify false to create no constraints.
        Returns the resulting 2 curves; the original curve + the newly created curve When split spline the original is deleted and two new curves returned. Empty collection returned if curve is closed.
        """
        return core.ObjectCollection()

    def trim(self, segmentPoint, createConstraints):
        """
        Trim a curve by specifying a point that determines the segment of the curve to trim away
        segmentPoint : A point (transient Point3D) on or closest to the segment of the curve to remove. (start, end or middle) The segment of the curve closest to the segmentPoint gets removed
        createConstraints : Constraints are created by default. Specify false to not create constraints.
        When trimming the start or end side of a line, unclosed circular or elliptical arc, the original entity is modified and returned When trimming the middle of a line, unclosed circular or elliptical arc the original entity is deleted and two new entities are returned When trimming the start or end of any type of closed curve, the original is deleted and a new curve is returned Any trimming of a spline (open or closed) deletes the original and new spline/s are returned Trimming a curve having no intersections deletes the original and returns an empty collection
        """
        return core.ObjectCollection()

    def breakCurve(self, segmentPoint, createConstraints):
        """
        Breaks a curve into two or three pieces by finding intersections of this curve with all other curves in the sketch and splitting this curve at the nearest intersections to a specified point on the curve.
        segmentPoint : A point that specifies the segment of the curve that is to be split from the rest of the curve. The nearest intersection(s) to this point define the break location(s).
        createConstraints : Optional argument that specifies if constraints should be created between the new curve segments. A value of true indicates constraints will be created.
        All of the curves resulting from the break are returned in an ObjectCollection. In the case where no intersections are found and as a result the curve is not broken, an empty ObjectCollection is returned.
        """
        return core.ObjectCollection()

    def extend(self, endPoint, createConstraints):
        """
        Extend a curve by specifying a point that determines the end of the curve to extend
        endPoint : A point (transient Point3D) on or closest to the end of the curve to extend. (start or end) The end of the curve closest to the endPoint gets extended
        createConstraints : Constraints are created by default. Specify false to not create constraints.
        Returns the modified original curve if the start or end of the curve is extended If the extend joins a curve to another, the two original curves are deleted and a new curve is returned If an arc is extended so as to become a circle, the original arc is deleted and a new circle is returned
        """
        return core.ObjectCollection()

    def intersections(self, sketchCurves):
        """
        Get the curves that intersect this curve along with the intersection points (Point2D)
        sketchCurves : A collection of curves to attempt to find intersections with. Set the value of this parameter to null to use all curves in the sketch for the calculation.
        intersectingCurves : A collection of the actual intersecting curves
        intersectionPoints : A collection of intersection points (Point3D) Item numbers in this collection correspond to the item numbers in the intersectingCurves collection.
        Returns true if intersections are found
        """
        return bool(), core.ObjectCollection(), core.ObjectCollection()

    length = property(_get_length, None, doc="Returns the length of the curve in centimeters.")
    isConstruction = property(_get_isConstruction, _set_isConstruction,
                              doc="Gets and sets whether this curve is construction geometry.")


class SketchDiameterDimension(SketchDimension):
    """
    An diameter dimension in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchDiameterDimension()

    def _get_entity(self):
        return SketchCurve()

    def _get_nativeObject(self):
        return SketchDiameterDimension()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SketchDiameterDimension()

    entity = property(_get_entity, None, doc="Returns the arc or circle being constrained.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SketchEllipseMajorRadiusDimension(SketchDimension):
    """
    An ellipse major radius dimension in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchEllipseMajorRadiusDimension()

    def _get_ellipse(self):
        return SketchCurve()

    def _get_nativeObject(self):
        return SketchEllipseMajorRadiusDimension()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SketchEllipseMajorRadiusDimension()

    ellipse = property(_get_ellipse, None, doc="Returns the ellipse or elliptical arc being constrained.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SketchEllipseMinorRadiusDimension(SketchDimension):
    """
    An ellipse minor radius dimension in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchEllipseMinorRadiusDimension()

    def _get_ellipse(self):
        return SketchCurve()

    def _get_nativeObject(self):
        return SketchEllipseMinorRadiusDimension()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SketchEllipseMinorRadiusDimension()

    ellipse = property(_get_ellipse, None, doc="Returns the ellipse or elliptical arc being constrained.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SketchLinearDimension(SketchDimension):
    """
    A linear dimension in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchLinearDimension()

    def _get_entityOne(self):
        return SketchEntity()

    def _get_entityTwo(self):
        return SketchEntity()

    def _get_orientation(self):
        return DimensionOrientations()

    def _get_nativeObject(self):
        return SketchLinearDimension()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SketchLinearDimension()

    entityOne = property(_get_entityOne, None, doc="The first entity being constrained.")
    entityTwo = property(_get_entityTwo, None, doc="The second entity being constrained.")
    orientation = property(_get_orientation, None, doc="The orientation of this dimension.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SketchOffsetCurvesDimension(SketchDimension):
    """
    A SketchOffsetCurvesDimension object is created automatically whenever curves are offset.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchOffsetCurvesDimension()

    def _get_offsetConstraint(self):
        return OffsetConstraint()

    def _get_nativeObject(self):
        return SketchOffsetCurvesDimension()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SketchOffsetCurvesDimension()

    offsetConstraint = property(_get_offsetConstraint, None,
                                doc="Returns the OffsetConstraint object that defines the curve offset. From the constraint you can get the original curves, the offset curves, and the dimension controlling the offset distance.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SketchOffsetDimension(SketchDimension):
    """
    An offset dimension in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchOffsetDimension()

    def _get_line(self):
        return SketchLine()

    def _get_entityTwo(self):
        return SketchEntity()

    def _get_nativeObject(self):
        return SketchOffsetDimension()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SketchOffsetDimension()

    line = property(_get_line, None, doc="The first line being constrained.")
    entityTwo = property(_get_entityTwo, None,
                         doc="The second entity being constrained. (a parallel SketchLine or a SketchPoint)")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SketchPoint(SketchEntity):
    """
    A point within a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchPoint()

    def _get_geometry(self):
        return core.Point3D()

    def _get_worldGeometry(self):
        return core.Point3D()

    def _get_nativeObject(self):
        return SketchPoint()

    def _get_connectedEntities(self):
        return SketchEntityList()

    def move(self, translation):
        """
        Moves the sketch geometry using the specified transform. Move respects any constraints that would normally prohibit the move. This will fail in the case where the IsReference property is true.
        translation : The vector that defines the distance and direction to move.
        Returns true if moving the sketch point was successful.
        """
        return bool()

    def merge(self, point):
        """
        Merges the input sketch point into this sketch point. This effectively deletes the other sketch point and changes all entities that referenced that sketch point to reference this sketch point. This is the equivalent of dragging a sketch point on top of another sketch point in the user interface.
        point : The point to merge with this point.
        Returns true if the merge was successful.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SketchPoint()

    geometry = property(_get_geometry, None,
                        doc="Returns a Point3D object which provides the position of the sketch point. The returned geometry is always in sketch space.")
    worldGeometry = property(_get_worldGeometry, None,
                             doc="Returns a Point3D object which provides the position of the sketch point in world space. The returned coordinate takes into account the assembly context and the position of the sketch in it's parent component, which means the coordinate will be returned in the root component space.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    connectedEntities = property(_get_connectedEntities, None,
                                 doc="Returns the set of sketch entities that are directly connected to this point. For example any entities that use this point as their start point or end point will be returned and any circle, arc or ellipse who have this point as a center point will be returned. This does not include entities that are related to the point through a constraint.")


class SketchPointHolePositionDefinition(HolePositionDefinition):
    """
    Provides positioning information for a hole that is positioned by a sketch point.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchPointHolePositionDefinition()

    def _get_sketchPoint(self):
        return SketchPoint()

    sketchPoint = property(_get_sketchPoint, None, doc="Returns the sketch point that defines the center of the hole.")


class SketchPointsHolePositionDefinition(HolePositionDefinition):
    """
    Provides positioning information for a hole that is positioned by a sketch point.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchPointsHolePositionDefinition()

    def _get_sketchPoints(self):
        return core.ObjectCollection()

    sketchPoints = property(_get_sketchPoints, None,
                            doc="Returns the sketch point that defines the center of the hole.")


class SketchRadialDimension(SketchDimension):
    """
    An radial dimension in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchRadialDimension()

    def _get_entity(self):
        return SketchCurve()

    def _get_nativeObject(self):
        return SketchRadialDimension()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SketchRadialDimension()

    entity = property(_get_entity, None, doc="The arc or circle being constrained.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SketchText(SketchEntity):
    """
    Text in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchText()

    def _set_height(self, height):
        pass

    def _get_height(self):
        return float()

    def _set_text(self, text):
        pass

    def _get_text(self):
        return str()

    def _set_position(self, position):
        pass

    def _get_position(self):
        return core.Point3D()

    def _set_fontName(self, fontName):
        pass

    def _get_fontName(self):
        return str()

    def _set_angle(self, angle):
        pass

    def _get_angle(self):
        return float()

    def _set_textStyle(self, textStyle):
        pass

    def _get_textStyle(self):
        return TextStyles()

    def _get_boundaryLines(self):
        return SketchLineList()

    def explode(self):
        """
        Explodes the SketchText into a set of curves. The original SketchText is deleted as a result of calling this.
        Returns an array of the sketch curves that were created that represent the text.
        """
        return SketchCurve()

    def asCurves(self):
        """
        Returns the underlying curves that define the outline of the text. Calling this does not affect the SketchText and does not create any new sketch geometry but returns the geometrical definition of the sketch outline.
        Returns an array of transient curves that represent the outline of the text.
        """
        return core.Curve3D()

    height = property(_get_height, _set_height, doc="Gets and sets the height of the text in centimeters.")
    text = property(_get_text, _set_text,
                    doc="Gets and sets the text. This is a simple string and ignores any formatting defined within the text.")
    position = property(_get_position, _set_position,
                        doc="Gets and sets the position of the text on the x-y plane of the sketch. The text must lie on the x-y plane so the Z component of the point is ignored and always treated as zero.")
    fontName = property(_get_fontName, _set_fontName, doc="Gets and sets the name of the font to use.")
    angle = property(_get_angle, _set_angle,
                     doc="Gets and sets the angle of the text relative to the x-axis of the x-y plane of the sketch.")
    textStyle = property(_get_textStyle, _set_textStyle,
                         doc="Gets and sets the text style to apply to the entire text. This is a bitwise enum so styles can be combined to apply multiple styles. For example you can apply bold and underline.")
    boundaryLines = property(_get_boundaryLines, None,
                             doc="Returns the four sketch lines that define the boundary of the sketch text. By adding constraints to these lines you can associatively control the size, position and angle of the sketch text.")


class SliderJointMotion(JointMotion):
    """
    Represents the set of information specific to a slider joint.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SliderJointMotion()

    def _set_slideDirection(self, slideDirection):
        pass

    def _get_slideDirection(self):
        return JointDirections()

    def _get_slideDirectionVector(self):
        return core.Vector3D()

    def _set_customSlideDirectionEntity(self, customSlideDirectionEntity):
        pass

    def _get_customSlideDirectionEntity(self):
        return core.Base()

    def _set_slideValue(self, slideValue):
        pass

    def _get_slideValue(self):
        return float()

    def _get_slideLimits(self):
        return JointLimits()

    slideDirection = property(_get_slideDirection, _set_slideDirection,
                              doc="Gets and sets the direction of the slide. This can be set to XAxisJointDirection, YAxisJointDirection, or ZAxisJointDirection. It can return those three directions and CustomJointDirection. If this returns CustomJointDirection then the customSlideDirectionEntity will return an entity that defines the direction. If there is a custom direction defined and this property is set to one of the three standard axes, the custom direction will be removed and customSlideDirectionEntity will return null.")
    slideDirectionVector = property(_get_slideDirectionVector, None,
                                    doc="Returns the direction of the slide. This property will return null in the case where the SliderJointMotion object was obtained from a JointInput object.")
    customSlideDirectionEntity = property(_get_customSlideDirectionEntity, _set_customSlideDirectionEntity,
                                          doc="This property can be set using various types of entities that can infer a direction. For example, a linear edge, sketch line, planar face, and cylindrical face. This property is only valid in the case where the slideDirection property returns CustomJointDirection. Setting this property will automatically set the slideDirection property to CustomJointDirection.")
    slideValue = property(_get_slideValue, _set_slideValue,
                          doc="Gets and sets the slide value. This is in centimeters. Setting this value is the equivalent of using the Drive Joints command.")
    slideLimits = property(_get_slideLimits, None,
                           doc="Returns a JointLimits object that defines the slide limits for this joint. Use the functionality of the returned JointLimits object to get, set, and modify the joint limits.")


class SmoothConstraint(GeometricConstraint):
    """
    A smooth constraint in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SmoothConstraint()

    def _get_curveOne(self):
        return SketchCurve()

    def _get_curveTwo(self):
        return SketchCurve()

    def _get_nativeObject(self):
        return SmoothConstraint()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SmoothConstraint()

    curveOne = property(_get_curveOne, None, doc="Returns the first curve.")
    curveTwo = property(_get_curveTwo, None, doc="Returns the second curve.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SMTExportOptions(ExportOptions):
    """
    Defines that an SMT export is to be done and specifies the various options.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SMTExportOptions()

    def _set_version(self, version):
        pass

    def _get_version(self):
        return int()

    version = property(_get_version, _set_version,
                       doc="Gets and set the version of the SMT format to write to. The default is to use the current version of the Autodesk Shape Manager kernel that Fusion 360 is using. Specifying an invalid version will result in an assert. Valid versions are 218 up to the current version, which is what this property returns by default when a new SMTExportOptions object is created.")


class SphereFeature(Feature):
    """
    Object that represents an existing sphere feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SphereFeature()


class SplitBodyFeature(Feature):
    """
    Object that represents an existing split body feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SplitBodyFeature()

    def _set_splitBodies(self, splitBodies):
        pass

    def _get_splitBodies(self):
        return core.ObjectCollection()

    def _get_splittingTool(self):
        return core.Base()

    def _get_isSplittingToolExtended(self):
        return bool()

    def _get_nativeObject(self):
        return SplitBodyFeature()

    def setSplittingTool(self, splittingTool, isSplittingToolExtended):
        """
        Sets the splitting tool used for the feature.
        splittingTool : Input entity that defines the splitting tool. The splitting tool is a single entity that can be either a solid body, open body, construction plane, face, or sketch curve that partially or fully intersects the body to split.
        isSplittingToolExtended : A boolean value for setting whether or not the splittingTool is to be automatically extended (if possible) so as to completely intersect the facesToSplit.
        Returns true if successful.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this is not the NativeObject.
        """
        return SplitBodyFeature()

    splitBodies = property(_get_splitBodies, _set_splitBodies,
                           doc="Gets and sets the input solid or open bodies that are split.")
    splittingTool = property(_get_splittingTool, None,
                             doc="Gets the entity that defines the splitting tool. The splitting tool is a single entity that can be either a solid body, open body, plane, sketch curve or face that partially or fully intersects the bodyToSplit.")
    isSplittingToolExtended = property(_get_isSplittingToolExtended, None,
                                       doc="Gets whether or not the splitting tool is to be automatically extended (if possible) so as to completely intersect the bodyToSplit.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SplitFaceFeature(Feature):
    """
    Object that represents an existing split face feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SplitFaceFeature()

    def _set_facesToSplit(self, facesToSplit):
        pass

    def _get_facesToSplit(self):
        return core.ObjectCollection()

    def _get_splittingTool(self):
        return core.ObjectCollection()

    def _get_isSplittingToolExtended(self):
        return bool()

    def _get_nativeObject(self):
        return SplitFaceFeature()

    def _get_directionEntity(self):
        return core.Base()

    def _get_splitType(self):
        return SplitFaceSplitTypes()

    def setSplittingTool(self, splittingTool, isSplittingToolExtended):
        """
        Sets the splitting tool used for the feature.
        splittingTool : Input entity that defines the splitting tool. The splitting tool is a single entity that can be either a solid body, open body, construction plane, face, or sketch curve that partially or fully intersects the facesToSplit. The input for this argument can be one of the valid types or an ObjectCollection in the case where multiple splitting tools are being defined.
        isSplittingToolExtended : A boolean value for setting whether or not the splittingTool is to be automatically extended (if possible) so as to completely intersect the facesToSplit.
        Returns true if successful.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this is not the NativeObject.
        """
        return SplitFaceFeature()

    def setAsSurfaceIntersectionSplitType(self, splittingTool, isSplittingToolExtended):
        """
        Set the split type to be a surface to surface intersection. If the split tool is a curve it will be extruded into a surface to use in the split. If it's a surface, the surface will be used and optionally extended to fully intersect the faces to be split.
        splittingTool : Input entity(s) that defines the splitting tool. The splitting tool can be a single entity or an ObjectCollection containing solid and/or open bodies, construction planes, faces, or sketch curves that partially or fully intersect the faces that are being split.
        isSplittingToolExtended : Specifies if the splitting tool should be extended so that is fully intersects the faces to be split.
        Returns true is setting the split type was successful.
        """
        return bool()

    def setAsAlongVectorSplitType(self, splittingTool, directionEntity):
        """
        Sets the split type to project the splitting tool along the direction defined by the specified entity.
        splittingTool : Input entity(s) that defines the splitting tool. The splitting tool can be a single entity or an ObjectCollection containing faces or sketch curves. If faces are input, the edges of the face are used as the splitting tool.
        directionEntity : An entity that defines the direction of projection of the splitting tool. This can be a linear BRepEdge, SketchLine, ConstructionLine, or a planar face where the face normal is used.
        Returns true is setting the split type was successful.
        """
        return bool()

    def setAsClosestPointSplitType(self, splittingTool):
        """
        Sets the split type to be a curve that defined by projecting the splitting curve to the closest point on the surface.
        splittingTool : Input entity(s) that defines the splitting tool. The splitting tool can be a single entity or an ObjectCollection containing faces or sketch curves. If faces are input, the edges of the face are used as the splitting tool.
        Returns true if setting the closest point split type was successful.
        """
        return bool()

    facesToSplit = property(_get_facesToSplit, _set_facesToSplit,
                            doc="Gets and sets the faces to be split. The collection can contain one or more faces selected from solid and/or open bodies.")
    splittingTool = property(_get_splittingTool, None,
                             doc="Gets and sets the entity(s) that define the splitting tool(s). The splitting tool can consist of one or more of the following: BRepBody, ConstructionPlane, BRepFace, sketch curve that extends or can be extended beyond the extents of the face. To set the splitting tool, use one of the set methods to also define the split type.")
    isSplittingToolExtended = property(_get_isSplittingToolExtended, None,
                                       doc="Gets whether or not the setting to automatically extend the splittingTool was set when the feature was created. This property is valid only when the splitType property returns surfaceIntersectionSplitType.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    directionEntity = property(_get_directionEntity, None,
                               doc="Gets the direction entity when the split type is along a vector. If the split type is not alongVectorSplitType this property will return null. To set the direction entity use the setAsAlongVectorSplitType method.")
    splitType = property(_get_splitType, None,
                         doc="Returns the type of split type currently defined. To change the split type, use one of the set methods.")


class STEPExportOptions(ExportOptions):
    """
    Defines that a STEP export is to be done and specifies the various options.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return STEPExportOptions()


class StitchFeature(Feature):
    """
    Object that represents an existing stitch feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return StitchFeature()

    def _set_stitchSurfaces(self, stitchSurfaces):
        pass

    def _get_stitchSurfaces(self):
        return core.ObjectCollection()

    def _get_tolerance(self):
        return ModelParameter()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return FeatureOperations()

    def _get_nativeObject(self):
        return StitchFeature()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this is not the NativeObject.
        """
        return StitchFeature()

    stitchSurfaces = property(_get_stitchSurfaces, _set_stitchSurfaces,
                              doc="Gets and sets the surfaces to stitch together. In some cases the stitch operation results in faces being merged so the original faces are no longer available after the feature is created. in this case you need to reposition the timeline marker to just before this feature when the faces do exist. To get valid results and when setting this property, the timeline should be rolled back to immediately before this feature.")
    tolerance = property(_get_tolerance, None,
                         doc="Returns the parameter controlling the tolerance. You can edit the tolerance by editing the value of the parameter object.")
    operation = property(_get_operation, _set_operation,
                         doc="Gets and sets the feature operation to perform. This property value is ignored if the stitched result does not form a solid body.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class STLExportOptions(ExportOptions):
    """
    Defines that a STL export is to be done and specifies the various options.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return STLExportOptions()

    def _set_isBinaryFormat(self, isBinaryFormat):
        pass

    def _get_isBinaryFormat(self):
        return bool()

    def _set_isOneFilePerBody(self, isOneFilePerBody):
        pass

    def _get_isOneFilePerBody(self):
        return bool()

    def _set_meshRefinement(self, meshRefinement):
        pass

    def _get_meshRefinement(self):
        return MeshRefinementSettings()

    def _set_surfaceDeviation(self, surfaceDeviation):
        pass

    def _get_surfaceDeviation(self):
        return float()

    def _set_normalDeviation(self, normalDeviation):
        pass

    def _get_normalDeviation(self):
        return float()

    def _set_maximumEdgeLength(self, maximumEdgeLength):
        pass

    def _get_maximumEdgeLength(self):
        return float()

    def _set_aspectRatio(self, aspectRatio):
        pass

    def _get_aspectRatio(self):
        return float()

    def _get_availablePrintUtilities(self):
        return str()

    def _set_printUtility(self, printUtility):
        pass

    def _get_printUtility(self):
        return str()

    def _set_sendToPrintUtility(self, sendToPrintUtility):
        pass

    def _get_sendToPrintUtility(self):
        return bool()

    isBinaryFormat = property(_get_isBinaryFormat, _set_isBinaryFormat,
                              doc="Indicates if the STL file is to be an ASCII or binary STL format. The default is true.")
    isOneFilePerBody = property(_get_isOneFilePerBody, _set_isOneFilePerBody,
                                doc="If the input is an Occurrence or the root Component, this specifies if a single file should be created containing all of the bodies within that occurrence or component or if multiple files should be created; one for each body. If multiple files are created, the body name is appended to the filename. The default is false.")
    meshRefinement = property(_get_meshRefinement, _set_meshRefinement,
                              doc="Gets and sets the current simple mesh refinement settings. Setting this property will reset the surfaceDeviation, normalDeviation, maximumEdgeLength, and aspectRatio to values that correspond to the specified mesh refinement. The default is MeshRefinementMedium")
    surfaceDeviation = property(_get_surfaceDeviation, _set_surfaceDeviation,
                                doc="Gets and sets the current surface deviation, or the distance the mesh can deviate from the actual surface. This is defined in centimetre. Setting this property will automatically set the meshRefinement to MeshRefinementCustom. The default is the value associated with medium mesh refinement.")
    normalDeviation = property(_get_normalDeviation, _set_normalDeviation,
                               doc="Gets and sets the current normal deviation, or the angle the mesh normals at the vertices can deviate from the actual surface normals. This is defined in radians. Setting this property will automatically set the meshRefinement to MeshRefinementCustom. The default is the value associated with medium mesh refinement.")
    maximumEdgeLength = property(_get_maximumEdgeLength, _set_maximumEdgeLength,
                                 doc="Gets and sets the maximum length of any mesh edge. This is defined in centimetre. Setting this property will automatically set the meshRefinement to MeshRefinementCustom. The default is the value associated with medium mesh refinement.")
    aspectRatio = property(_get_aspectRatio, _set_aspectRatio,
                           doc="Gets and sets the minimum aspect ratio for that triangles that are generated for the mesh. Setting this property will automatically set the meshRefinement to MeshRefinementCustom. The default is the value associated with medium mesh refinement.")
    availablePrintUtilities = property(_get_availablePrintUtilities, None,
                                       doc="Returns a list of the known available print utilities. These strings can be used to set the PrintUtility property to specify which print utility to open the STL file in.")
    printUtility = property(_get_printUtility, _set_printUtility,
                            doc="Specifies which print utility to use when opening the STL file if the sendToPrintUtility property is true. The value of this property can be one of the strings returned by the availalbePrintUtilities property, which will specify one of the know print utilities. You can also specify a custom print utility by specifying the full path to the print utility executable. The default value of this property is the last setting specified in the user-interface.")
    sendToPrintUtility = property(_get_sendToPrintUtility, _set_sendToPrintUtility,
                                  doc="Gets and sets whether the created STL file will be sent to the print utility specified by the printUtility property. If this is false a filename must be defined.")


class SurfaceDeleteFaceFeature(Feature):
    """
    Object that represents an existing Surface Delete Face feature in a design. The SurfaceDeleteFaceFeature and DeleteFaceFeature differ in that the SurfaceDeleteFaceFeature can delete any face without any restrictions. If the body is a solid, it will become a surface when the first face is deleted. The specified face is deleted without any other changes being made to the body. The DeleteFaceFeature deletes the specified face and also modifies the other faces in the body to heal or fill in the area of the deleted face. This means that a solid body will remain solid.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SurfaceDeleteFaceFeature()

    def _set_deletedFaces(self, deletedFaces):
        pass

    def _get_deletedFaces(self):
        return BRepFace()

    def _get_nativeObject(self):
        return SurfaceDeleteFaceFeature()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this is not the NativeObject.
        """
        return SurfaceDeleteFaceFeature()

    deletedFaces = property(_get_deletedFaces, _set_deletedFaces,
                            doc="Gets and sets the set of faces that are deleted by this feature. To be able to use this property to both get and set the faces, you need to first roll the timeline to immediately before this feature. This can be accomplished using the following code where thisFeature is a reference to a SurfaceDeleteFaceFeature: thisFeature.timelineObject.rollTo(True)")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SweepFeature(Feature):
    """
    Object that represents an existing sweep feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SweepFeature()

    def _set_profile(self, profile):
        pass

    def _get_profile(self):
        return core.Base()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return FeatureOperations()

    def _set_path(self, path):
        pass

    def _get_path(self):
        return Path()

    def _get_distanceOne(self):
        return ModelParameter()

    def _get_distanceTwo(self):
        return ModelParameter()

    def _set_orientation(self, orientation):
        pass

    def _get_orientation(self):
        return SweepOrientationTypes()

    def _get_startFaces(self):
        return BRepFaces()

    def _get_endFaces(self):
        return BRepFaces()

    def _get_sideFaces(self):
        return BRepFaces()

    def _get_nativeObject(self):
        return SweepFeature()

    def _get_isSolid(self):
        return bool()

    def _set_guideRail(self, guideRail):
        pass

    def _get_guideRail(self):
        return Path()

    def _set_isDirectionFlipped(self, isDirectionFlipped):
        pass

    def _get_isDirectionFlipped(self):
        return bool()

    def _set_profileScaling(self, profileScaling):
        pass

    def _get_profileScaling(self):
        return SweepProfileScalingOptions()

    def _set_participantBodies(self, participantBodies):
        pass

    def _get_participantBodies(self):
        return BRepBody()

    def _get_taperAngle(self):
        return ModelParameter()

    def _get_twistAngle(self):
        return ModelParameter()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SweepFeature()

    profile = property(_get_profile, _set_profile,
                       doc="Gets and sets the profiles or planar faces used to define the shape of the sweep. This property can return or be set with a single Profile, a single planar face, or an ObjectCollection consisting of multiple profiles and planar faces. When an ObjectCollection is used all of the profiles and faces must be co-planar. This property returns nothing in the case where the feature is non-parametric.")
    operation = property(_get_operation, _set_operation,
                         doc="Gets and sets the type of operation performed by the sweep.")
    path = property(_get_path, _set_path,
                    doc="Gets and sets the path to create the sweep. This property returns nothing in the case where the feature is non-parametric.")
    distanceOne = property(_get_distanceOne, None,
                           doc="Gets the distance for the first side. This property returns nothing in the case where the feature is non-parametric.")
    distanceTwo = property(_get_distanceTwo, None,
                           doc="Gets the distance for the second side. Returns nothing if the path is only on one side of the profile or if the sweep definition includes a guide rail. It's always the distance against the normal of the profile if available. This property returns nothing in the case where the feature is non-parametric.")
    orientation = property(_get_orientation, _set_orientation,
                           doc="Gets and sets the sweep orientation. It defaults to PerpendicularOrientationType.")
    startFaces = property(_get_startFaces, None,
                          doc="Property that returns the set of that cap one end of the sweep that are coincident with the sketch plane. In the cases where there aren't any start faces this property will return Nothing.")
    endFaces = property(_get_endFaces, None,
                        doc="Property that returns the set of that cap one end of the sweep that are coincident with the sketch plane. The end faces are those not coincident to the sketch plane of the feature's profile. In the case of a symmetric revolution these faces are the ones on the negative normal side of the sketch plane. In the cases where there aren't any end faces this property will return Nothing.")
    sideFaces = property(_get_sideFaces, None,
                         doc="Property that returns a object that provides access to all of the faces created around the perimeter of the feature.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    isSolid = property(_get_isSolid, None,
                       doc="Indicates if this feature was initially created as a solid or a surface.")
    guideRail = property(_get_guideRail, _set_guideRail,
                         doc="Gets and sets the guide rail to create the sweep. This can be set to null to have a path only sweep.")
    isDirectionFlipped = property(_get_isDirectionFlipped, _set_isDirectionFlipped,
                                  doc="Gets and sets if the direction of the sweep is flipped. This property only applies to sweep features that include a guide rail and whose path runs on both sides of the profile.")
    profileScaling = property(_get_profileScaling, _set_profileScaling,
                              doc="Gets and sets the sweep profile scaling option. It defaults to SweepProfileScaleOption. This property is only used when a guide rail has been specified.")
    participantBodies = property(_get_participantBodies, _set_participantBodies,
                                 doc="Gets and sets the list of bodies that will participate in the feature when the operation is a cut or intersection. When setting or getting this property, you must roll the timeline back to just before the feature so that the model is in the state just before the feature is computed.")
    taperAngle = property(_get_taperAngle, None,
                          doc="Gets the ModelParameter that defines the taper angle of the sweep feature. The value of the angle can be edited by using the properties on the ModelParameter object to edit the parameter.")
    twistAngle = property(_get_twistAngle, None,
                          doc="Gets the ModelParameter that defines the twist angle of the sweep feature. The value of the angle can be edited by using the properties on the ModelParameter object to edit the parameter.")


class SymmetricExtentDefinition(ExtentDefinition):
    """
    A definition object that is used to define the extents of a feature to be symmetric.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SymmetricExtentDefinition()

    @staticmethod
    def create(distance, isFullLength):
        """
        Statically creates a new SymmetricExtentDefinition object. This is used as input when create a new feature and defining the starting condition.
        distance : An input ValueInput objects that defines either half the extent of the extrude or the full extent, depending on the value of the isFullLength argument.
        isFullLength : An input boolean that specifies if the distance specified defines the full or half length of the extrusion.
        Returns the newly created SymmetricExtentDefinition or null in the case of a failure.
        """
        return SymmetricExtentDefinition()

    def _set_isFullLength(self, isFullLength):
        pass

    def _get_isFullLength(self):
        return bool()

    def _get_distance(self):
        return core.Base()

    def _get_taperAngle(self):
        return core.Base()

    isFullLength = property(_get_isFullLength, _set_isFullLength,
                            doc="Gets and sets if the distance defines the full extent length or half the length. A value of True indicates if defines the full length.")
    distance = property(_get_distance, None,
                        doc="Returns the current extent distance. If the SymmetricExtentDefinition object has been created statically and isn't associated with a feature this will return a ValueInput object. If the SymmetricExtentDefinition object is obtained from a feature this will return a ModelParameter object. You can use properties of the parameter to edit it's value which will result in the feature updating.")
    taperAngle = property(_get_taperAngle, None,
                          doc="Returns the current taper angle. If the SymmetricExtentDefinition object has been created statically and isn't associated with a feature this will return a ValueInput object. If the SymmetricExtentDefinition object is obtained from a feature this will return a ModelParameter object. You can use properties of the parameter to edit it's value which will result in the feature updating.")


class SymmetryConstraint(GeometricConstraint):
    """
    A symmetry constraint in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SymmetryConstraint()

    def _get_entityOne(self):
        return SketchEntity()

    def _get_entityTwo(self):
        return SketchEntity()

    def _get_symmetryLine(self):
        return SketchLine()

    def _get_nativeObject(self):
        return SymmetryConstraint()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SymmetryConstraint()

    entityOne = property(_get_entityOne, None, doc="Returns the first curve.")
    entityTwo = property(_get_entityTwo, None, doc="Returns the second curve.")
    symmetryLine = property(_get_symmetryLine, None, doc="Returns the axis (SketchLine) that defines the symmetry.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class TangentConstraint(GeometricConstraint):
    """
    A tangent constraint in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TangentConstraint()

    def _get_curveOne(self):
        return SketchCurve()

    def _get_curveTwo(self):
        return SketchCurve()

    def _get_nativeObject(self):
        return TangentConstraint()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return TangentConstraint()

    curveOne = property(_get_curveOne, None, doc="Returns the first curve.")
    curveTwo = property(_get_curveTwo, None, doc="Returns the second curve.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class ThickenFeature(Feature):
    """
    Object that represents an existing Thicken feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ThickenFeature()

    def _set_inputFaces(self, inputFaces):
        pass

    def _get_inputFaces(self):
        return core.ObjectCollection()

    def _get_thickness(self):
        return ModelParameter()

    def _set_isSymmetric(self, isSymmetric):
        pass

    def _get_isSymmetric(self):
        return bool()

    def _set_operation(self, operation):
        pass

    def _get_operation(self):
        return FeatureOperations()

    def _get_isChainSelection(self):
        return bool()

    def _get_nativeObject(self):
        return ThickenFeature()

    def setInputEntities(self, inputFaces, isChainSelection):
        """
        Sets the faces and patch bodies to thicken
        inputFaces : The faces or patch bodies to thicken. Faces need not be from the same component or body, nor do they need to be connected or touching one another.
        isChainSelection : A boolean value for setting whether or not faces that are tangentially connected to the input faces (if any) will be included in the offset. The default value is true.
        Returns true if successful
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this is not the NativeObject.
        """
        return ThickenFeature()

    inputFaces = property(_get_inputFaces, _set_inputFaces,
                          doc="Gets and sets the ObjectCollection containing the face and/or patch bodies to thicken.")
    thickness = property(_get_thickness, None,
                         doc="Returns the parameter controlling the thickness. You can edit the thickness value by editing the value of the parameter object.")
    isSymmetric = property(_get_isSymmetric, _set_isSymmetric,
                           doc="Gets and sets whether to add thickness symmetrically or only on one side of the face/s to thicken")
    operation = property(_get_operation, _set_operation, doc="Gets and sets the feature operation to perform.")
    isChainSelection = property(_get_isChainSelection, None,
                                doc="Get and sets whether faces that are tangentially connected to the input faces will be included in the thicken feature.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class ThreadFeature(Feature):
    """
    Object that represents an existing thread feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ThreadFeature()

    def _set_inputCylindricalFace(self, inputCylindricalFace):
        pass

    def _get_inputCylindricalFace(self):
        return BRepFace()

    def _set_isModeled(self, isModeled):
        pass

    def _get_isModeled(self):
        return bool()

    def _set_isFullLength(self, isFullLength):
        pass

    def _get_isFullLength(self):
        return bool()

    def _get_threadLength(self):
        return ModelParameter()

    def _get_threadOffset(self):
        return ModelParameter()

    def _set_threadLocation(self, threadLocation):
        pass

    def _get_threadLocation(self):
        return ThreadLocations()

    def _set_threadInfo(self, threadInfo):
        pass

    def _get_threadInfo(self):
        return ThreadInfo()

    def _set_isRightHanded(self, isRightHanded):
        pass

    def _get_isRightHanded(self):
        return bool()

    def _get_nativeObject(self):
        return ThreadFeature()

    def _set_inputCylindricalFaces(self, inputCylindricalFaces):
        pass

    def _get_inputCylindricalFaces(self):
        return core.ObjectCollection()

    def setThreadOffsetLength(self, threadOffset, threadLength, threadLocation):
        """
        Sets the thread offset, length and location. Calling this method will cause the isFullLength property to be set to false.
        threadOffset : A ValueInput object that defines the thread offset.
        threadLength : A ValueInput object that defines the thread length.
        threadLocation : Indicates where the thread length is measured from.
        Returns true if successful.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return ThreadFeature()

    inputCylindricalFace = property(_get_inputCylindricalFace, _set_inputCylindricalFace,
                                    doc="Gets and sets the threaded face. In the case where there are multiple faces, only the first one is returned. Setting this results in a thread being applied to only a single face. It is recommended that you use the inputCylindricalfaces property in order to have full access to the collection of faces to be threaded.")
    isModeled = property(_get_isModeled, _set_isModeled,
                         doc="Gets and sets if the thread is physical or cosmetic thread. A value of true indicates a physical thread. It defaults to false.")
    isFullLength = property(_get_isFullLength, _set_isFullLength,
                            doc="Gets and sets if this thread is the full length of the cylinder. It only can be set to true.")
    threadLength = property(_get_threadLength, None,
                            doc="Gets the parameter that controls the depth of the thread. Even though the parameter for the thread depth is always created and accessible through this property, it is only used in the case where the isFullLength property is false. Returns nothing in the case where the feature is non-parametric.")
    threadOffset = property(_get_threadOffset, None,
                            doc="Gets the parameter that controls the offset value of the thread. The offset is the distance along the axis of the cylinder from the edge to the start of the thread, it is only used in the case where the isFullLength property is false. Returns nothing in the case where the feature is non-parametric.")
    threadLocation = property(_get_threadLocation, _set_threadLocation,
                              doc="Gets and sets where the thread length is measured from. This property is only used in the case where the isFullLength property is false.")
    threadInfo = property(_get_threadInfo, _set_threadInfo,
                          doc="Gets and sets the thread data. Also can edit the thread through the properties and methods on the ThreadInfo object.")
    isRightHanded = property(_get_isRightHanded, _set_isRightHanded,
                             doc="Gets and sets if the thread is right or left-handed thread. A value of true indicates a right-handed thread. It defaults to true.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    inputCylindricalFaces = property(_get_inputCylindricalFaces, _set_inputCylindricalFaces,
                                     doc="Gets and sets the cylindrical input faces.")


class ThroughAllExtentDefinition(ExtentDefinition):
    """
    A definition object that is used to define the extents of a feature to be through all.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ThroughAllExtentDefinition()

    @staticmethod
    def create():
        """
        Statically creates a new ThroughAllExtentDefinition object. This is used as input when defining the extents of a feature to be through all.
        Returns the newly created ThroughAllExtentDefinition or null in the case of a failure.
        """
        return ThroughAllExtentDefinition()

    def _set_isPositiveDirection(self, isPositiveDirection):
        pass

    def _get_isPositiveDirection(self):
        return bool()

    isPositiveDirection = property(_get_isPositiveDirection, _set_isPositiveDirection,
                                   doc="Gets and sets if the direction is positive or negative. A value of true indicates it is in the same direction as the z direction of the profile's sketch plane. This is only used when the extrusion is only defined in a single direction from the profile plane. If it's a two sided extrusion, this value is ignored.")


class TimelineGroup(TimelineObject):
    """
    Represents a group in the timeline.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TimelineGroup()

    def _set_isCollapsed(self, isCollapsed):
        pass

    def _get_isCollapsed(self):
        return bool()

    def _get_count(self):
        return int()

    def deleteMe(self, deleteGroupAndContents):
        """
        Deletes the group with the option of deleting or keeping the contents.
        deleteGroupAndContents : Indicates if the group and its contents should be deleted or if only the group should be deleted and the contents kept and expanded. A value of true will delete the group and its contents.
        Returns true if the delete was successful.
        """
        return bool()

    def item(self, index):
        """
        Function that returns the specified timeline object within the group using an index into the collection.
        index : The index of the item within the collection to return. The first item in the collection has an index of 0.
        Returns the specified item or null if an invalid index was specified.
        """
        return TimelineObject()

    isCollapsed = property(_get_isCollapsed, _set_isCollapsed, doc="Indicates if the group is collapsed or expanded.")
    count = property(_get_count, None, doc="The number of items in the group.")


class ToEntityExtentDefinition(ExtentDefinition):
    """
    A definition object that is used to define the extents of a feature to be up to a specified construction plane or face.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return ToEntityExtentDefinition()

    @staticmethod
    def create(entity, isChained, offset):
        """
        Statically creates a new ToEntityExtentDefinition object. This is used as input when defining the extents of a feature to be up to a construction plane or face.
        entity : The construction plane or face that the feature extent it up to.
        isChained :
        offset : A optional input value that defines an offset distance of the entity that will be used for the extent. Positive and negative values can be used to offset in both directions. If this argument is not provided a value of zero will be used.
        Returns the newly created ToEntityExtentDefinition object or null if the creation failed.
        """
        return ToEntityExtentDefinition()

    def _set_entity(self, entity):
        pass

    def _get_entity(self):
        return core.Base()

    def _get_offset(self):
        return core.Base()

    def _set_isChained(self, isChained):
        pass

    def _get_isChained(self):
        return bool()

    def _set_directionHint(self, directionHint):
        pass

    def _get_directionHint(self):
        return core.Vector3D()

    def _set_isMinimumSolution(self, isMinimumSolution):
        pass

    def _get_isMinimumSolution(self):
        return bool()

    entity = property(_get_entity, _set_entity,
                      doc="Gets and sets the entity that the feature extent is defined up to. This can be a ConstructionPlane, Profile, BrepFace, BrepBody, or BRepVertex.")
    offset = property(_get_offset, None,
                      doc="Returns the current offset. If the EntityExtentDefinition object has been created statically and isn't associated with a feature this will return a ValueInput object. If the EntityExtentDefinition object is obtained from a feature this will return a ModelParameter object. You can use properties of the parameter to edit it's value which will result in the feature updating.")
    isChained = property(_get_isChained, _set_isChained,
                         doc="Gets and sets whether connected faces to the input entity should also be used when calculating the extent or if the input entity should be extended. A value of true indicates that connected entities should be used.")
    directionHint = property(_get_directionHint, _set_directionHint,
                             doc="Gets and sets a direction that is used when the result is ambiguous. For example, if you have a profile in the center of a torus and are extruding to the torus, the extrusion can go in either direction. When needed, this provides the information to tell Fusion 360 which direction to go. In most cases this is not needed and the property will be null.")
    isMinimumSolution = property(_get_isMinimumSolution, _set_isMinimumSolution,
                                 doc="Gets and sets if the minimum or maximum solution is calculated. This is only used when the input entity is a body and defines if the extrusion to go to the near side (minimum solution) of the body or the far side. When a new ToEntityExtentDefinition object is created, this property defaults to True.")


class TorusFeature(Feature):
    """
    Object that represents an existing torus feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TorusFeature()


class TrimFeature(Feature):
    """
    Object that represents an existing trim feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TrimFeature()

    def _set_trimTool(self, trimTool):
        pass

    def _get_trimTool(self):
        return core.Base()

    def _get_bRepCells(self):
        return BRepCells()

    def _get_nativeObject(self):
        return TrimFeature()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return TrimFeature()

    def applyCellChanges(self):
        """
        After making any changes to the set of selected cells you must call this method to indicate all changes have been made and to apply those changes to the feature.
        Returns true if the apply was successful.
        """
        return bool()

    trimTool = property(_get_trimTool, _set_trimTool,
                        doc="Gets and sets the entity (a patch body, B-Rep face, construction plane or sketch curve) that intersects the trim tool")
    bRepCells = property(_get_bRepCells, None,
                         doc="Returns the collection of the valid cells that have been calculated based on the trim tool. Use this collection to specify which cells to trim away.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class TwoDistancesChamferTypeDefinition(ChamferTypeDefinition):
    """
    Provides information to create a chamfer that is defined by a two distances from the edge.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TwoDistancesChamferTypeDefinition()

    def _get_distanceOne(self):
        return ModelParameter()

    def _get_distanceTwo(self):
        return ModelParameter()

    distanceOne = property(_get_distanceOne, None,
                           doc="Returns the parameter controlling the first distance. You can edit the distance by editing the value of the parameter object.")
    distanceTwo = property(_get_distanceTwo, None,
                           doc="Returns the parameter controlling the second distance. You can edit the distance by editing the value of the parameter object.")


class TwoSidesAngleExtentDefinition(ExtentDefinition):
    """
    Defines the inputs for a TwoSidesAngleExtentDefinition object. This feature extent type defines the extents of the feature using angle extents on two sides.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TwoSidesAngleExtentDefinition()

    def _get_angleOne(self):
        return ModelParameter()

    def _get_angleTwo(self):
        return ModelParameter()

    angleOne = property(_get_angleOne, None,
                        doc="Gets the ModelParameter that defines the angle on the first side. The value of the angle can be edited by using the properties on the ModelParameter object to edit the parameter.")
    angleTwo = property(_get_angleTwo, None,
                        doc="Gets the ModelParameter that defines the angle on the second side. The value of the angle can be edited by using the properties on the ModelParameter object to edit the parameter.")


class TwoSidesDistanceExtentDefinition(ExtentDefinition):
    """
    Defines the inputs for a TwoSidesDistanceExtentDefinition object. This defines a feature extent where the distance in each direction can be a different value.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TwoSidesDistanceExtentDefinition()

    def _get_distanceOne(self):
        return ModelParameter()

    def _get_distanceTwo(self):
        return ModelParameter()

    distanceOne = property(_get_distanceOne, None, doc="Gets the ModelParameter that defines the first distance")
    distanceTwo = property(_get_distanceTwo, None, doc="Gets the ModelParameter that defines the second distance")


class TwoSidesToExtentDefinition(ExtentDefinition):
    """
    Defines the inputs for a TwoSidesToExtentDefinition object This defines a feature extent where the extents of feature go up to faces or construction planes in both directions.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return TwoSidesToExtentDefinition()

    def _set_toEntityOne(self, toEntityOne):
        pass

    def _get_toEntityOne(self):
        return core.Base()

    def _set_toEntityTwo(self, toEntityTwo):
        pass

    def _get_toEntityTwo(self):
        return core.Base()

    def _set_matchShape(self, matchShape):
        pass

    def _get_matchShape(self):
        return bool()

    toEntityOne = property(_get_toEntityOne, _set_toEntityOne,
                           doc="Gets and sets the entity that defines the extent on side one. The valid types of "
                               "entities can vary depending on the type of feature this is being used with.")
    toEntityTwo = property(_get_toEntityTwo, _set_toEntityTwo,
                           doc="Gets and sets the entity that defines the extent on side two. The valid types of "
                               "entities can vary depending on the type of feature this is being used with.")
    matchShape = property(_get_matchShape, _set_matchShape,
                          doc="Gets and sets whether the toEntity is extended to fully intersect the extrusion.")


class UnstitchFeature(Feature):
    """
    Object that represents an existing Unstitch feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return UnstitchFeature()

    def _get_inputFaces(self):
        return core.ObjectCollection()

    def _get_isChainSelection(self):
        return bool()

    def _get_nativeObject(self):
        return UnstitchFeature()

    def setInputFaces(self, faces, isChainSelection):
        """
        Sets the faces and/or bodies to be unstiched
        faces : The faces and/or bodies to Unstitch. Individual faces can be unstitched from solids and/or patch bodies. The faces being unstitched need not all come from the same body.
        isChainSelection : A boolean value for setting whether or not faces that are connected and adjacent to the input faces will be included in the selection. The default value is true.
        Returns true if successful.
        """
        return bool()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this is not the NativeObject.
        """
        return UnstitchFeature()

    inputFaces = property(_get_inputFaces, None, doc="Gets the faces that were input to be unstitched.")
    isChainSelection = property(_get_isChainSelection, None,
                                doc="A boolean value for setting whether or not faces that are connected and adjacent to the input faces will be included in the selection. The default value is true.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class UserParameter(Parameter):
    """
    Represents a User Parameter.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return UserParameter()

    def _get_userParameters(self):
        return UserParameters()

    def _get_design(self):
        return Design()

    def deleteMe(self):
        """
        Deletes the user parameter A parameter can only be deleted if it is a UserParameter and it is not referenced by other parameters.
        Returns a bool indicating if the delete was successful or not. Bug!!! Currently returning true if the parameter can't be deleted because it is being referenced by other parameters.
        """
        return bool()

    userParameters = property(_get_userParameters, None, doc="Returns the Collection containing the UserParameter.")
    design = property(_get_design, None, doc="Returns the Design containing the UserParameter.")


class VariableRadiusFilletEdgeSet(FilletEdgeSet):
    """
    Provides access to the edges and the parameters associated with a variable radius fillet.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return VariableRadiusFilletEdgeSet()

    def _set_edges(self, edges):
        pass

    def _get_edges(self):
        return core.ObjectCollection()

    def _get_startRadius(self):
        return ModelParameter()

    def _get_endRadius(self):
        return ModelParameter()

    def _get_midRadii(self):
        return ParameterList()

    def _get_midPositions(self):
        return ParameterList()

    def addMidPosition(self, position, radius):
        """
        Creates a new mid position radius on the variable radius edge set.
        position : The position where the new radius is to be created. This is a value between 0 and 1 where 0 is at the start of the edge and 1 is at the end. If the ValueInput uses a real then it is interpreted as a unitless value. If it is a string then it must resolve to a unitless value.
        radius : A ValueInput object that defines the radius at the defined position. If the ValueInput uses a real then it is interpreted as centimeters. If it is a string then the units can be defined as part of the string (i.e. '2 in'). If no units are specified it will be interpreted using the current default units for length.
        Returns true if successful.
        """
        return bool()

    def deleteMidPosition(self, positionIndex):
        """
        Deletes the specified mid position from the variable radius fillet.
        positionIndex : The index of the mid position to delete. The points are in the order they appear along the edge where the first point has an index of 0. The number of mid positions and their locations can be obtained by getting the list of mid positions using the midPositions property.
        Returns true if successful.
        """
        return bool()

    edges = property(_get_edges, _set_edges,
                     doc="Gets and sets the edges that will be filleted. In order to access (get) the input edges of a fillet, you must roll the timeline back to just before the fillet feature whose edges you want to access.")
    startRadius = property(_get_startRadius, None,
                           doc="Returns the model parameter that controls the start radius of the fillet. You can edit the start radius by using the properties on the returned ModelParameter object.")
    endRadius = property(_get_endRadius, None,
                         doc="Returns the model parameter that controls the end radius of the fillet. You can edit the end radius by using the properties on the returned ModelParameter object.")
    midRadii = property(_get_midRadii, None,
                        doc="Returns a list of model parameters that control radius of the fillet at each position defined along the edge set. You can edit any of these radii by using the properties on its returned ModelParameter object. This list does not include the parameters for the start and end radii. Use the startRadius and endRadius properties to get those.")
    midPositions = property(_get_midPositions, None,
                            doc="Returns a list of model parameters that control the location of each mid point radius. These positions are defined from 0 to 1 where 0 is at the start of the edge and 1 is at the end. You can edit any of these positions by using the properties on its returned ModelParameter object.")


class VerticalConstraint(GeometricConstraint):
    """
    A vertical constraint in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return VerticalConstraint()

    def _get_line(self):
        return SketchLine()

    def _get_nativeObject(self):
        return VerticalConstraint()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return VerticalConstraint()

    line = property(_get_line, None, doc="Returns the line being constrained.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class VerticalPointsConstraint(GeometricConstraint):
    """
    A vertical constraint between two points in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return VerticalPointsConstraint()

    def _get_pointOne(self):
        return SketchPoint()

    def _get_pointTwo(self):
        return SketchPoint()

    def _get_nativeObject(self):
        return VerticalPointsConstraint()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return VerticalPointsConstraint()

    pointOne = property(_get_pointOne, None, doc="Returns the first point.")
    pointTwo = property(_get_pointTwo, None, doc="Returns the second point.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class WebFeature(Feature):
    """
    Object that represents an existing web feature in a design.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return WebFeature()


class SketchArc(SketchCurve):
    """
    An arc in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchArc()

    def _get_centerSketchPoint(self):
        return SketchPoint()

    def _get_startSketchPoint(self):
        return SketchPoint()

    def _get_endSketchPoint(self):
        return SketchPoint()

    def _set_radius(self, radius):
        pass

    def _get_radius(self):
        return float()

    def _get_geometry(self):
        return core.Arc3D()

    def _get_worldGeometry(self):
        return core.Arc3D()

    def _get_nativeObject(self):
        return SketchArc()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SketchArc()

    centerSketchPoint = property(_get_centerSketchPoint, None,
                                 doc="The sketch point at the center of the arc. The arc is dependent on this point and moving the point will cause the arc to adjust.")
    startSketchPoint = property(_get_startSketchPoint, None,
                                doc="The sketch point at the start of the arc. The arc is dependent on this point and moving the point will cause the arc to adjust.")
    endSketchPoint = property(_get_endSketchPoint, None,
                              doc="The sketch point at the end of the arc. The arc is dependent on this point and moving the point will cause the arc to adjust.")
    radius = property(_get_radius, _set_radius,
                      doc="Gets and sets the radius of the arc. Changing the radius is limited by any constraints that might exist on the circle. Setting the radius can fail in cases where the radius is fully defined through constraints.")
    geometry = property(_get_geometry, None,
                        doc="Returns the transient geometry of the arc which provides geometric information about the arc. The returned geometry is always in sketch space.")
    worldGeometry = property(_get_worldGeometry, None,
                             doc="Returns an Arc3D object which provides geometric information in world space. The returned geometry takes into account the assembly context and the position of the sketch in it's parent component, which means the geometry will be returned in the root component space.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SketchCircle(SketchCurve):
    """
    A circle in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchCircle()

    def _get_centerSketchPoint(self):
        return SketchPoint()

    def _get_geometry(self):
        return core.Circle3D()

    def _get_worldGeometry(self):
        return core.Circle3D()

    def _get_area(self):
        return float()

    def _set_radius(self, radius):
        pass

    def _get_radius(self):
        return float()

    def _get_nativeObject(self):
        return SketchCircle()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SketchCircle()

    centerSketchPoint = property(_get_centerSketchPoint, None,
                                 doc="Returns the sketch point at the center of the circle.")
    geometry = property(_get_geometry, None,
                        doc="Returns the transient geometry of the circle which provides geometric information about the circle. The returned geometry is always in sketch space.")
    worldGeometry = property(_get_worldGeometry, None,
                             doc="Returns a Point3D object which provides the position of the sketch point in world space. The returned coordinate takes into account the assembly context and the position of the sketch in it's parent component, which means the coordinate will be returned in the root component space.")
    area = property(_get_area, None, doc="Returns the area of the circle in square centimeters.")
    radius = property(_get_radius, _set_radius,
                      doc="Gets and sets the radius of the circle. Changing the radius is limited by any constraints that might exist on the circle.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SketchConicCurve(SketchCurve):
    """
    The SketchConicCurve class represents conic curves in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchConicCurve()

    def _get_startSketchPoint(self):
        return SketchPoint()

    def _get_endSketchPoint(self):
        return SketchPoint()

    def _get_apexSketchPoint(self):
        return SketchPoint()

    def _get_geometry(self):
        return core.NurbsCurve3D()

    def _get_worldGeometry(self):
        return core.NurbsCurve3D()

    def _get_evaluator(self):
        return core.CurveEvaluator3D()

    def _get_nativeObject(self):
        return SketchConicCurve()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SketchConicCurve()

    startSketchPoint = property(_get_startSketchPoint, None, doc="The sketch point at the start of the curve.")
    endSketchPoint = property(_get_endSketchPoint, None, doc="The sketch point at the end of the curve.")
    apexSketchPoint = property(_get_apexSketchPoint, None, doc="The sketch point at the apex of the conic curve.")
    geometry = property(_get_geometry, None,
                        doc="Returns the transient geometry of the curve which provides geometric information about the curve. The returned geometry is always in sketch space. Because the fixed spline can be analytically defined, for example it can be the precise intersection of a surface and the sketch plane, returning a NURBS curve that represents the spline may be an approximation of the actual curve. You can use the Evaluator property of the SketchFixedSpline object to perform evaluations on the precise curve.")
    worldGeometry = property(_get_worldGeometry, None,
                             doc="Returns a NurbsCurve3D object that is the equivalent of this sketch curve but is in the space of the parent component rather than in sketch space.")
    evaluator = property(_get_evaluator, None,
                         doc="Returns an evaluator object that lets you perform evaluations on the precise geometry of the curve.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SketchEllipse(SketchCurve):
    """
    An ellipse in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchEllipse()

    def _get_centerSketchPoint(self):
        return SketchPoint()

    def _set_majorAxis(self, majorAxis):
        pass

    def _get_majorAxis(self):
        return core.Vector3D()

    def _set_majorAxisRadius(self, majorAxisRadius):
        pass

    def _get_majorAxisRadius(self):
        return float()

    def _set_minorAxisRadius(self, minorAxisRadius):
        pass

    def _get_minorAxisRadius(self):
        return float()

    def _get_geometry(self):
        return core.Ellipse3D()

    def _get_worldGeometry(self):
        return core.Ellipse3D()

    def _get_nativeObject(self):
        return SketchEllipse()

    def _get_majorAxisLine(self):
        return SketchLine()

    def _get_minorAxisLine(self):
        return SketchLine()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SketchEllipse()

    centerSketchPoint = property(_get_centerSketchPoint, None,
                                 doc="Returns the sketch point that defines the center of the ellipse. You can reposition the ellipse by moving the sketch point, assuming any existing constraints allow the desired change.")
    majorAxis = property(_get_majorAxis, _set_majorAxis,
                         doc="Gets and sets the major axis direction of the ellipse. Changing the axis is limited by any constraints that might exist on the ellipse. Setting the axis can fail in cases where the direction is fully defined through constraints.")
    majorAxisRadius = property(_get_majorAxisRadius, _set_majorAxisRadius,
                               doc="Gets and sets the major axis radius of the ellipse. Changing the radius is limited by any constraints that might exist on the ellipse. Setting the radius can fail in cases where the radius is fully defined through constraints.")
    minorAxisRadius = property(_get_minorAxisRadius, _set_minorAxisRadius,
                               doc="Gets and sets the minor axis radius of the ellipse. Changing the radius is limited by any constraints that might exist on the ellipse. Setting the radius can fail in cases where the radius is fully defined through constraints.")
    geometry = property(_get_geometry, None,
                        doc="Returns the transient geometry of the ellipse which provides geometric information about the ellipse. The returned geometry is always in sketch space.")
    worldGeometry = property(_get_worldGeometry, None,
                             doc="Returns an Ellipse3D object which provides geometric information in world space. The returned geometry takes into account the assembly context and the position of the sketch in it's parent component, which means the geometry will be returned in the root component space.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
    majorAxisLine = property(_get_majorAxisLine, None,
                             doc="Returns the sketch line associated with the ellipse that lies along the major axis. This can return null in the case where the line has been deleted.")
    minorAxisLine = property(_get_minorAxisLine, None,
                             doc="Returns the sketch line associated with the ellipse that lies along the minor axis. This can return null in the case where the line has been deleted.")


class SketchEllipticalArc(SketchCurve):
    """
    An elliptical arc in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchEllipticalArc()

    def _get_centerSketchPoint(self):
        return SketchPoint()

    def _get_startSketchPoint(self):
        return SketchPoint()

    def _get_endSketchPoint(self):
        return SketchPoint()

    def _set_majorAxis(self, majorAxis):
        pass

    def _get_majorAxis(self):
        return core.Vector3D()

    def _set_majorAxisRadius(self, majorAxisRadius):
        pass

    def _get_majorAxisRadius(self):
        return float()

    def _set_minorAxisRadius(self, minorAxisRadius):
        pass

    def _get_minorAxisRadius(self):
        return float()

    def _get_geometry(self):
        return core.EllipticalArc3D()

    def _get_worldGeometry(self):
        return core.EllipticalArc3D()

    def _get_nativeObject(self):
        return SketchEllipticalArc()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SketchEllipticalArc()

    centerSketchPoint = property(_get_centerSketchPoint, None,
                                 doc="Gets the sketch point that defines the center of the elliptical arc. You can reposition the elliptical arc by moving the sketch point, assuming any existing constraints allow the desired change.")
    startSketchPoint = property(_get_startSketchPoint, None,
                                doc="Gets the sketch point that defines the start of the elliptical arc. You can reposition the sketch point, assuming any existing constraints allow the desired change.")
    endSketchPoint = property(_get_endSketchPoint, None,
                              doc="Gets the sketch point that defines the end of the elliptical arc. You can reposition the sketch point, assuming any existing constraints allow the desired change.")
    majorAxis = property(_get_majorAxis, _set_majorAxis,
                         doc="Gets and sets the major axis direction of the elliptical arc. Changing the axis is limited by any constraints that might exist on the elliptical arc. Setting the axis can fail in cases where the direction is fully defined through constraints.")
    majorAxisRadius = property(_get_majorAxisRadius, _set_majorAxisRadius,
                               doc="Gets and sets the major axis radius of the elliptical arc. Changing the radius is limited by any constraints that might exist on the elliptical arc. Setting the radius can fail in cases where the radius is fully defined through constraints.")
    minorAxisRadius = property(_get_minorAxisRadius, _set_minorAxisRadius,
                               doc="Gets and sets the minor axis radius of the elliptical arc. Changing the radius is limited by any constraints that might exist on the elliptical arc. Setting the radius can fail in cases where the radius is fully defined through constraints.")
    geometry = property(_get_geometry, None,
                        doc="Returns the transient geometry of the elliptical arc which provides geometric information about the elliptical arc. The returned geometry is always in sketch space.")
    worldGeometry = property(_get_worldGeometry, None,
                             doc="Returns an EllipticalArc3D object which provides geometric information in world space. The returned geometry takes into account the assembly context and the position of the sketch in it's parent component, which means the geometry will be returned in the root component space.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SketchFittedSpline(SketchCurve):
    """
    A fitted spline in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchFittedSpline()

    def _get_startSketchPoint(self):
        return SketchPoint()

    def _get_endSketchPoint(self):
        return SketchPoint()

    def _get_fitPoints(self):
        return SketchPointList()

    def _set_isClosed(self, isClosed):
        pass

    def _get_isClosed(self):
        return bool()

    def _get_geometry(self):
        return core.NurbsCurve3D()

    def _get_worldGeometry(self):
        return core.NurbsCurve3D()

    def _get_nativeObject(self):
        return SketchFittedSpline()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SketchFittedSpline()

    def activateTangentHandle(self, fitPoint):
        """
        Activates the tangent handle for the specified fit point and returns the sketch line that acts as the handle to control the tangency. You can use the getTangentHandle property to determine if the tangent handle has already been activated. If this method is called for a handle that already exists, nothing changes and the existing sketch line that acts as the tangent handle is returned. The getTangentHandle method can be used to determine if the handle has already been activated. To deactivate a sketch handle you can delete the sketch line.
        fitPoint : The fit point on the curve where you want to activate the tangent handle. The fit points can be obtained by using the fitPoints property of the SketchFittedSpline object.
        Returns the sketch line that acts as the tangent handle at the specified fit point.
        """
        return SketchLine()

    def getTangentHandle(self, fitPoint):
        """
        Returns the sketch line that acts as the handle to control the tangency at the specified fit point. Returns null in the case where the tangent handle has not been activated at that sketch point. Deleting the returned line will deactivate the tangent handle. Use the activateTangentHandle method to activate the tangent handle.
        fitPoint : The fit point on the curve where you want to get the tangent handle. The fit points can be obtained by using the fitPoints property of the SketchFittedSpline object.
        Returns the sketch line that acts as the handle to control the tangency at the specified point or returns null in the case where the tangency handle has not been activated at the specified sketch point.
        """
        return SketchLine()

    def activateCurvatureHandle(self, fitPoint):
        """
        Activates the curvature handle for the specified fit point and returns the sketch arc that acts as the handle to control the curvature. You can use the getCurvatureHandle property to determine if the curvature handle has already been activated. If this method is called for a handle that already exists, nothing changes and the existing sketch arc that acts as the curvature handle is returned. The getCurvatureHandle method can be used to determine if the handle has already been activated. To deactivate a sketch handle you can delete the sketch arc.
        fitPoint : The fit point on the curve where you want to activate the curvature handle. The fit points can be obtained by using the fitPoints property of the SketchFittedSpline object.
        Returns the sketch arc that acts as the curvature handle at the specified fit point.
        """
        return SketchArc()

    def getCurvatureHandle(self, fitPoint):
        """
        Returns the sketch arc that acts as the handle to control the curvature at the specified fit point. Returns null in the case where the curvature handle has not been activated at that sketch point. Deleting the returned arc will deactivate the curvature handle. Use the activateCurvatureHandle method to activate the curvature handle.
        fitPoint : The fit point on the curve where you want to get the curvature handle. The fit points can be obtained by using the fitPoints property of the SketchFittedSpline object.
        Returns the sketch arc that acts as the handle to control the curvature at the specified point or returns null in the case where the curvature handle has not been activated at the specified sketch point.
        """
        return SketchArc()

    startSketchPoint = property(_get_startSketchPoint, None,
                                doc="Returns the sketch point that defines the starting position of the spline. Editing the position of this sketch point will result in editing the spline.")
    endSketchPoint = property(_get_endSketchPoint, None,
                              doc="Returns the sketch point that defines the ending position of the spline. Editing the position of this sketch point will result in editing the spline.")
    fitPoints = property(_get_fitPoints, None,
                         doc="Returns the set of sketch points that the spline fits through. The points include the start and end points and are returned in the same order as the spline fits through them where the first point in the list is the start point and the last point is the end point. Editing the position of these sketch points will result in editing the spline.")
    isClosed = property(_get_isClosed, _set_isClosed,
                        doc="Gets and sets if this spline is closed. A closed spline is also periodic. This property can return false even in the case where the spline is physically closed. It's possible that the start and end points of a spline can be the same point but the curve is still not considered closed. This can happen when the start and end points of an open curve are merged. The curve is physically closed but is not periodic and can have a discontinuity at the joint. Setting it to closed will cause it to be periodic and to always remain closed even as fit points are deleted.")
    geometry = property(_get_geometry, None,
                        doc="Returns the transient geometry of the curve which provides geometric information about the curve. The returned geometry is always in sketch space.")
    worldGeometry = property(_get_worldGeometry, None,
                             doc="Returns an NurbsCurve3D object which provides geometric information in world space. The returned geometry takes into account the assembly context and the position of the sketch in it's parent component, which means the geometry will be returned in the root component space.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SketchFixedSpline(SketchCurve):
    """
    The SketchFixedSpline class represents splines in a sketch that are uneditable. These can result from including splines from other sketches or the spline edges. They can also be created by intersections and projecting splines onto a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchFixedSpline()

    def _get_startSketchPoint(self):
        return SketchPoint()

    def _get_endSketchPoint(self):
        return SketchPoint()

    def _get_geometry(self):
        return core.NurbsCurve3D()

    def _get_worldGeometry(self):
        return core.NurbsCurve3D()

    def _get_evaluator(self):
        return core.CurveEvaluator3D()

    def _get_nativeObject(self):
        return SketchFixedSpline()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SketchFixedSpline()

    startSketchPoint = property(_get_startSketchPoint, None, doc="The sketch point at the start of the spline.")
    endSketchPoint = property(_get_endSketchPoint, None, doc="The sketch point at the end of the spline.")
    geometry = property(_get_geometry, None,
                        doc="Returns the transient geometry of the curve which provides geometric information about the curve. The returned geometry is always in sketch space. Because the fixed spline can be analytically defined, for example it can be the precise intersection of a surface and the sketch plane, returning a NURBS curve that represents the spline may be an approximation of the actual curve. You can use the Evaluator property of the SketchFixedSpline object to perform evaluations on the precise curve.")
    worldGeometry = property(_get_worldGeometry, None,
                             doc="Returns a NurbsCurve3D object that is the equivalent of this sketch curve but is in the space of the parent component rather than in sketch space.")
    evaluator = property(_get_evaluator, None,
                         doc="Returns an evaluator object that lets you perform evaluations on the precise geometry of the curve.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")


class SketchLine(SketchCurve):
    """
    A line in a sketch.
    """

    def __init__(self):
        super().__init__()

    @staticmethod
    def cast(arg):
        return SketchLine()

    def _get_startSketchPoint(self):
        return SketchPoint()

    def _get_endSketchPoint(self):
        return SketchPoint()

    def _get_geometry(self):
        return core.Line3D()

    def _get_worldGeometry(self):
        return core.Line3D()

    def _get_nativeObject(self):
        return SketchLine()

    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence.
        occurrence : The occurrence that defines the context to create the proxy in.
        Returns the proxy object or null if this isn't the NativeObject.
        """
        return SketchLine()

    startSketchPoint = property(_get_startSketchPoint, None,
                                doc="The sketch point at the start of the line. The line is dependent on this point and moving the point will cause the line to adjust.")
    endSketchPoint = property(_get_endSketchPoint, None,
                              doc="The sketch point at the end of the line. The line is dependent on this point and moving the point will cause the line to adjust.")
    geometry = property(_get_geometry, None,
                        doc="Returns the transient geometry of the line which provides geometry information about the line. The returned geometry is always in sketch space.")
    worldGeometry = property(_get_worldGeometry, None,
                             doc="Returns a Line3D object which provides geometric information in world space. The returned geometry takes into account the assembly context and the position of the sketch in it's parent component, which means the geometry will be returned in the root component space.")
    nativeObject = property(_get_nativeObject, None,
                            doc="The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.")
