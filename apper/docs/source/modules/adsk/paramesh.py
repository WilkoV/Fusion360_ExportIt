# This file is automatically generated for code intellisense only.
# It does not reflect the actual implementation.

from . import core

class ParaMeshBodies(core.Base):
    """
    Provides access to the ParaMeshBodies in the parent Component and supports the creation of new mesh bodies.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return ParaMeshBodies()
    @staticmethod
    def getFromComponent(self, component):
        """
        Gets the ParaMeshBodies object from a component.
        """
        return ParaMeshBodies()
    def add(self, fullFilename, units, baseOrFormFeature):
        """
        Creates a new mesh body by importing an .stl or .obj file. Because of a current limitation, if you want to create a mesh body in a parametric model, you must first call the edit method of the base or form feature, use this method to create the mesh body, and then call the finishEdit method of the base or form feature. The base or form feature must be in an 'edit' state to be able to add any additional items to it.

        fullFilename : The full filename (path and file) of a .stl or .obj file.
        units : The units to use when importing the file.
        baseOrFormFeature : The BaseFeature or FormFeature object that this mesh body will be associated with. This is an optional requirement and is required when the model design history is being captured (paremetric model) but is ignored otherwise (direct edit model).

        Returns a list of the newly created mesh bodies or null if the creation failed. Multiple bodies can be created in the case where a .obj file that contains multiple bodies was imported. stl files always contain a single body.
        """
        return ParaMeshBodyList()
    def item(self, index):
        """
        Provides access to a mesh body within the collection.

        index : The index of the mesh body to return, where an index of 0 is the first mesh body in the collection.

        Returns the specified mesh body or null in the case of a invalid index.
        """
        return ParaMeshBody()
    @property
    def count(self):
        """
        Returns the number of mesh bodies in the collection.
        """
        return int()

class ParaMeshBody(core.Base):
    """
    An empty API definition for testing.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return ParaMeshBody()
    def reduce(self, inputProportions, maxDeviation, triangleBudget, remeshType, reduceType):
        """
        Reduces the number of triangles on a mesh.
        """
        return bool()
    def createForAssemblyContext(self, occurrence):
        """
        Creates or returns a proxy for the native object - i.e. a new object that represents this object but adds the assembly context defined by the input occurrence. Fails if this object is not the NativeObject.

        occurrence : The occurrence that represents the context you want to create this proxy in.

        Returns the proxy for the occurrence in the context of the specified occurrence. Returns null if it failed.
        """
        return ParaMeshBody()
    @property
    def mesh(self):
        return fusion.PolygonMesh()
    @property
    def name(self):
        """
        Gets and sets the name of the mesh body as displayed in the browser.
        """
        return str()
    @name.setter
    def name(self, name):
        """
        Gets and sets the name of the mesh body as displayed in the browser.
        """
        pass
    @property
    def parentComponent(self):
        """
        Returns the parent Component.
        """
        return fusion.Component()
    @property
    def assemblyContext(self):
        """
        Returns the assembly occurrence (i.e. the occurrence) of this object in an assembly. This is only valid in the case where this is acting as a proxy in an assembly. Returns null in the case where the object is not in the context of an assembly but is already the native object.
        """
        return fusion.Occurrence()
    @property
    def nativeObject(self):
        """
        The NativeObject is the object outside the context of an assembly and in the context of it's parent component. Returns null in the case where this object is not in the context of an assembly but is already the native object.
        """
        return ParaMeshBody()

class ParaMeshBodyList(core.Base):
    """
    Provides access to a list of ParaMeshBody objects.
    """
    def __init__(self):
        pass
    @staticmethod
    def cast(arg):
        return ParaMeshBodyList()
    def item(self, index):
        """
        Provides access to a mesh body within the collection.

        index : The index of the mesh body to return, where an index of 0 is the first mesh body in the collection.

        Returns the specified mesh body or null in the case of a invalid index.
        """
        return ParaMeshBody()
    @property
    def count(self):
        """
        Returns the number of mesh bodies in the collection.
        """
        return int()

class ParaMeshReduceTypes():
    """
    The type of reducing.
    """
    def __init__(self):
        pass
    MaxDeviation = 0
    Proportion = 1
    TriangleBudget = 2

class ParaMeshRemeshTypes():
    """
    The type of remesh.
    """
    def __init__(self):
        pass
    RemeshAdaptive = 0
    RemeshUniform = 1

class ParaMeshUnits():
    """
    The unit types that can be specified when importing a .stl or .obj file as a mesh.
    """
    def __init__(self):
        pass
    CentimeterMeshUnit = 0
    MillimeterMeshUnit = 1
    MeterMeshUnit = 2
    InchMeshUnit = 3
    FootMeshUnit = 4